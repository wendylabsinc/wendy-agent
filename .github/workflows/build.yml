name: Build products and release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

# Add permissions needed for creating releases
permissions:
  contents: write

jobs:
  determine-version:
    name: Determine Version
    runs-on: ubuntu-22.04-arm
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Set version
        id: set-version
        run: |
          TIMESTAMP=$(date +'%Y.%m.%d-%H%M%S')

          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            VERSION="${TIMESTAMP}"
          else
            VERSION="${TIMESTAMP}-dev"
          fi

          echo "Setting version to $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build:
    needs: determine-version
    strategy:
      matrix:
        include:
          - artifact-name: wendy-agent-linux-static-musl-aarch64
            os: ubuntu-22.04-arm
            container: swift:6.2.0
            swift-sdk: aarch64-swift-linux-musl
            swift-sdk-url: https://download.swift.org/swift-6.2-release/static-sdk/swift-6.2-RELEASE/swift-6.2-RELEASE_static-linux-0.0.1.artifactbundle.tar.gz
            swift-sdk-checksum: d2225840e592389ca517bbf71652f7003dbf45ac35d1e57d98b9250368769378
            product: wendy-agent
          - artifact-name: wendy-agent-linux-static-musl-x86_64
            os: ubuntu-22.04-arm
            container: swift:6.2.0
            swift-sdk: x86_64-swift-linux-musl
            swift-sdk-url: https://download.swift.org/swift-6.2-release/static-sdk/swift-6.2-RELEASE/swift-6.2-RELEASE_static-linux-0.0.1.artifactbundle.tar.gz
            swift-sdk-checksum: d2225840e592389ca517bbf71652f7003dbf45ac35d1e57d98b9250368769378
            product: wendy-agent
          - artifact-name: wendy-cli-linux-static-musl-aarch64
            os: ubuntu-22.04-arm
            container: swift:6.2.0
            swift-sdk: aarch64-swift-linux-musl
            swift-sdk-url: https://download.swift.org/swift-6.2-release/static-sdk/swift-6.2-RELEASE/swift-6.2-RELEASE_static-linux-0.0.1.artifactbundle.tar.gz
            swift-sdk-checksum: d2225840e592389ca517bbf71652f7003dbf45ac35d1e57d98b9250368769378
            product: wendy
          - artifact-name: wendy-cli-linux-static-musl-x86_64
            os: ubuntu-22.04-arm
            container: swift:6.2.0
            swift-sdk: x86_64-swift-linux-musl
            swift-sdk-url: https://download.swift.org/swift-6.2-release/static-sdk/swift-6.2-RELEASE/swift-6.2-RELEASE_static-linux-0.0.1.artifactbundle.tar.gz
            swift-sdk-checksum: d2225840e592389ca517bbf71652f7003dbf45ac35d1e57d98b9250368769378
            product: wendy
          - artifact-name: wendy-cli-macos-arm64
            os: macos-15
            xcode-select: /Applications/Xcode_26.0.app
            product: wendy

    name: ${{ matrix.artifact-name }}
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    steps:
      - uses: actions/checkout@v4
      - name: Install Static Linux SDK
        if: ${{ matrix.swift-sdk-url != '' }}
        run: |
          swift sdk install ${{ matrix.swift-sdk-url }} --checksum ${{ matrix.swift-sdk-checksum }}
      - name: xcode-select
        if: ${{ matrix.xcode-select != '' }}
        run: |
          sudo xcode-select --switch ${{ matrix.xcode-select }}
      - name: Inject Version
        run: |
          # Use the version from the needs context
          echo "Using version: ${{ needs.determine-version.outputs.version }}"
          ./Scripts/inject-version.sh "${{ needs.determine-version.outputs.version }}"
      - name: Build
        shell: bash
        run: |
          args=(
            --configuration release
            --product "${{ matrix.product }}"
          )

          if [ -n "${{ matrix.swift-sdk }}" ]; then
            args+=(--swift-sdk "${{ matrix.swift-sdk }}")
          fi

          # Add optimization flags for wendy-agent builds
          if [ "${{ matrix.product }}" == "wendy-agent" ]; then
            args+=(-Xswiftc -whole-module-optimization)
            args+=(-Xlinker --gc-sections)
            args+=(-Xlinker --strip-all)
          fi

          swift build "${args[@]}"

          # Copy built binary to the output directory
          OUTPUT_DIR=${{ matrix.artifact-name }}
          BIN_PATH=$(swift build --show-bin-path "${args[@]}")
          mkdir $OUTPUT_DIR
          cp $BIN_PATH/${{ matrix.product }} $OUTPUT_DIR/

          # If a folder exists at $BIN_PATH/wendy-agent_${{ matrix.product }}.bundle, copy it to output/
          if [ -d "$BIN_PATH/wendy-agent_${{ matrix.product }}.bundle" ]; then
            cp -r $BIN_PATH/wendy-agent_${{ matrix.product }}.bundle $OUTPUT_DIR/
          fi
      - name: Import P12 Certificate
        if: ${{ matrix.artifact-name == 'wendy-cli-macos-arm64' }}
        uses: apple-actions/import-codesign-certs@v3
        with: 
          p12-file-base64: ${{ secrets.APPSTORE_CERTIFICATES_FILE_BASE64 }}
          p12-password: ${{ secrets.APPSTORE_CERTIFICATES_PASSWORD }}
          keychain: notary-keychain
      - name: Setup Notary Profile
        if: ${{ matrix.artifact-name == 'wendy-cli-macos-arm64' }}
        run: |
          xcrun notarytool store-credentials "notary-profile" \
            --apple-id "${{ secrets.NOTARY_APPLE_ID }}" \
            --team-id "${{ secrets.NOTARY_TEAM_ID }}" \
            --password "${{ secrets.NOTARY_PASSWORD }}"
      - name: Codesign
        if: ${{ matrix.artifact-name == 'wendy-cli-macos-arm64' }}
        timeout-minutes: 10
        run: |
          ./Scripts/codesign.sh "${{ matrix.artifact-name }}/${{ matrix.product }}"
      - name: Create tarball
        run: |
          TARBALL_NAME="${{ matrix.artifact-name }}-${{ needs.determine-version.outputs.version }}.tar.gz"
          tar -czvf "$TARBALL_NAME" ${{ matrix.artifact-name }}/
          echo "tarball_name=$TARBALL_NAME" >> $GITHUB_OUTPUT
        id: create-tarball
      - name: Upload binary artifact
        id: upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.create-tarball.outputs.tarball_name }}
          path: ${{ steps.create-tarball.outputs.tarball_name }}
          retention-days: 14
          if-no-files-found: error

  release:
    name: Release
    runs-on: ubuntu-22.04-arm
    needs: [determine-version, build]
    # if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - name: List files
        run: |
          ls -la
          # Create a newline-delimited list of tar.gz files
          {
            echo 'FILES<<EOF'
            find . -name "*.tar.gz" | sort
            echo 'EOF'
          } >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ needs.determine-version.outputs.version }}
          tag_name: ${{ needs.determine-version.outputs.version }}
          draft: false
          prerelease: true
          files: ${{ env.FILES }}
          generate_release_notes: true
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       # NEW: move/update a 'latest' tag to this prerelease's commit
      # needed so .git exists in the workspace
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # grab history + tags
      - name: Update 'latest' tag
        run: |
          set -euo pipefail
          git fetch origin --tags --force
          TAG='${{ needs.determine-version.outputs.version }}'   # your tag, e.g. 2025.09.16-224322
          TARGET_SHA="$(git rev-list -n 1 "refs/tags/$TAG" || true)"
          if [ -z "$TARGET_SHA" ]; then TARGET_SHA="$GITHUB_SHA"; fi
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag -fa latest "$TARGET_SHA" -m "Latest prerelease: $TAG"
          git push -f origin refs/tags/latest

  update-homebrew:
    name: Update Homebrew Formula
    runs-on: macos-26
    needs: [determine-version, release]
    # if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write  # Needed to commit formula updates
    steps:
      - name: Checkout wendy-agent
        uses: actions/checkout@v4
        with:
          path: wendy-agent

      - name: Create GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.CLI_PUBLISHER_APP_ID }}
          private-key: ${{ secrets.CLI_PUBLISHER_APP_PRIVATE_KEY }}
          owner: wendylabsinc

      - name: Checkout homebrew-tap
        uses: actions/checkout@v4
        with:
          repository: wendylabsinc/homebrew-tap
          token: ${{ steps.app-token.outputs.token }}
          path: homebrew-tap

      - name: Setup Homebrew
        run: |
          brew update

      - name: Tap homebrew-tap
        run: |
          brew tap wendylabsinc/tap $GITHUB_WORKSPACE/homebrew-tap

      - name: Install build dependencies
        run: |
          brew install gh jq

      - name: Build bottle and update formula
        run: |
          $GITHUB_WORKSPACE/wendy-agent/Scripts/update-homebrew-bottle.sh \
            "${{ needs.determine-version.outputs.version }}" \
            "$GITHUB_WORKSPACE/homebrew-tap" \
            "$GITHUB_WORKSPACE/homebrew-tap/Formula/wendy.rb" \
            "${{ steps.app-token.outputs.token }}"

      - name: Commit and push formula to homebrew-tap
        working-directory: homebrew-tap
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git add Formula/wendy.rb
          
          # Only commit if there are changes
          if git diff --staged --quiet; then
            echo "No changes to formula"
          else
            git commit -m "Update wendy formula to ${{ needs.determine-version.outputs.version }}"
            git push origin main
          fi
