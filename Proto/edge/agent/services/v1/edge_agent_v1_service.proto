syntax = "proto3";

package edge.agent.services.v1;

service EdgeAgentService {
    // Upload a container image to the agent, and run it.
    // The first message in the stream MUST be the header.
    rpc RunContainer(stream RunContainerRequest) returns (stream RunContainerResponse);

    rpc UpdateAgent(stream UpdateAgentRequest) returns (stream UpdateAgentResponse);

    rpc GetAgentVersion(GetAgentVersionRequest) returns (GetAgentVersionResponse);
    
    // List available WiFi networks
    rpc ListWiFiNetworks(ListWiFiNetworksRequest) returns (ListWiFiNetworksResponse);
    
    // Connect to a specific WiFi network
    rpc ConnectToWiFi(ConnectToWiFiRequest) returns (ConnectToWiFiResponse);
    
    // Get the current WiFi connection status
    rpc GetWiFiStatus(GetWiFiStatusRequest) returns (GetWiFiStatusResponse);
    
    // Disconnect from the current WiFi network
    rpc DisconnectWiFi(DisconnectWiFiRequest) returns (DisconnectWiFiResponse);
    
    // List available hardware capabilities on the device
    rpc ListHardwareCapabilities(ListHardwareCapabilitiesRequest) returns (ListHardwareCapabilitiesResponse);
}

message RunContainerRequest {
    oneof request_type {
        /// The first message in the stream MUST be the header.
        Header header = 1;

        /// A chunk of the container tarball.
        Chunk chunk = 2;

        /// After uploading the container, control messages can be sent to the agent.
        ControlCommand control = 3;
    }

    message Header {
        // Unique name for the container image
        string image_name = 1;

        // The command to run when the container starts.
        string cmd = 2;

        // The app config for the container.
        bytes app_config = 3;
    }

    message Chunk {
        // Binary chunk of the container tarball
        bytes data = 1;
    }
}

message ControlCommand {
    oneof command {
        Run run = 1;
        Stop stop = 2;
    }

    message Run {
        // Whether to run the container with a debugger
        bool debug = 1;

        // Optional restart policy override for Docker runtime.
        enum RestartPolicy {
            DEFAULT = 0;          // Agent chooses default (unless-stopped for normal runs)
            UNLESS_STOPPED = 1;   // --restart unless-stopped
            NO = 2;               // --restart no
            ON_FAILURE = 3;       // --restart on-failure:N (see on_failure_max_retries)
        }

        optional RestartPolicy restart_policy = 2;
        // Only used when restart_policy==ON_FAILURE
        optional int32 on_failure_max_retries = 3;
    }

    message Stop {
        // No fields needed; acts on the current container in this stream
    }
}

message RunContainerResponse {
    oneof response_type {
        Started started = 1;
        Stopped stopped = 2;
    }

    message Started {
        // The port that the debugger is listening on.
        // If this is 0, the container is not running with a debugger.
        uint32 debug_port = 1;
    }

    message Stopped {
        // No fields; indicates container has been stopped
    }
}

message UpdateAgentRequest {
    oneof request_type {
        Chunk chunk = 1;
        ControlCommand control = 2;
    }

    message Chunk {
        bytes data = 1;
    }

    message ControlCommand {
        oneof command {
            // Triggers the replacement of the running agent with the new binary.
            Update update = 1;
        }

        message Update {
            
        }
    }
}

message UpdateAgentResponse {
    oneof response_type {
        Updated updated = 1;
    }

    message Updated {
        
    }
}

message GetAgentVersionRequest {

}

message GetAgentVersionResponse {
    string version = 1;
}

// Request message for listing WiFi networks
message ListWiFiNetworksRequest {
    // Empty request - no parameters needed
}

// Response message for listing WiFi networks
message ListWiFiNetworksResponse {
    // List of available WiFi networks
    repeated WiFiNetwork networks = 1;
    
    // Information about a WiFi network
    message WiFiNetwork {
        // SSID (name) of the WiFi network
        string ssid = 1;
        
        // Signal strength indicator (if available)
        optional int32 signal_strength = 2;
    }
}

// Request message for connecting to a WiFi network
message ConnectToWiFiRequest {
    // SSID (name) of the WiFi network to connect to
    string ssid = 1;
    
    // Password for the WiFi network
    string password = 2;
}

// Response message for connecting to a WiFi network
message ConnectToWiFiResponse {
    // Whether the connection was successful
    bool success = 1;
    
    // Optional error message if connection failed
    optional string error_message = 2;
}

// Request message for getting WiFi status
message GetWiFiStatusRequest {
    // Empty request - no parameters needed
}

// Response message for getting WiFi status
message GetWiFiStatusResponse {
    // Whether the device is currently connected to a WiFi network
    bool connected = 1;
    
    // SSID of the connected network (only present if connected is true)
    optional string ssid = 2;
    
    // Optional error message if status check failed
    optional string error_message = 3;
}

// Request message for disconnecting from WiFi
message DisconnectWiFiRequest {
    // Empty request - no parameters needed
}

// Response message for disconnecting from WiFi
message DisconnectWiFiResponse {
    // Whether the disconnection was successful
    bool success = 1;
    
    // Optional error message if disconnection failed
    optional string error_message = 2;
}

// Request message for listing hardware capabilities
message ListHardwareCapabilitiesRequest {
    // Optional filter by hardware category (e.g., "gpu", "usb", "i2c")
    optional string category_filter = 1;
}

// Response message for listing hardware capabilities
message ListHardwareCapabilitiesResponse {
    // List of available hardware capabilities
    repeated HardwareCapability capabilities = 1;
    
    // Information about a hardware capability
    message HardwareCapability {
        // Category of hardware (e.g., "gpu", "usb", "i2c", "gpio", "camera")
        string category = 1;
        
        // Device path (e.g., "/dev/video0", "/dev/i2c-1")
        string device_path = 2;
        
        // Human-readable description
        string description = 3;
        
        // Additional properties as key-value pairs
        map<string, string> properties = 4;
    }
}
