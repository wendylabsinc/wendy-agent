syntax = "proto3";

package wendycloud.v1;

import "google/protobuf/timestamp.proto";

// Service for issuing, refreshing, revoking, and querying X.509 certificates
// for assets within an organization. Backed by Google Cloud Certificate
// Authority Service (CAS).
service CertificateService {
  // Issue a new X.509 certificate for an asset using a CSR (PEM PKCS#10).
  rpc IssueCertificate(IssueCertificateRequest) returns (IssueCertificateResponse);

  // Refresh/rotate the certificate by submitting a new CSR for the same asset.
  rpc RefreshCertificate(RefreshCertificateRequest) returns (RefreshCertificateResponse);

  // Revoke an issued certificate.
  rpc RevokeCertificate(RevokeCertificateRequest) returns (RevokeCertificateResponse);

  // Get current status/details of a certificate.
  rpc GetCertificate(GetCertificateRequest) returns (Certificate);

  // List certificates for an asset (history and current) using server streaming
  // and offset/limit pagination (matches OrganizationService).
  rpc ListCertificates(ListCertificatesRequest) returns (stream ListCertificatesResponse);

  // Retrieve the CA trust bundle used to validate issued certificates.
  rpc GetCaBundle(GetCaBundleRequest) returns (GetCaBundleResponse);

  // CLI-only: Create a short-lived enrollment token to give to an asset's `wendy-agent`
  // `wendy-agent` will use this token to ask for `IssueCertificateRequest` RPCs
  rpc CreateAssetEnrollmentToken(CreateAssetEnrollmentTokenRequest) returns (CreateAssetEnrollmentTokenResponse);

  // Dashboard-only: Create a short-lived enrollment token for a user (for companion SDK or Wendy CLI).
  rpc CreateUserEnrollmentToken(CreateUserEnrollmentTokenRequest) returns (CreateUserEnrollmentTokenResponse);

  // Get certificate metadata (organization, asset, or user) from the client's mTLS certificate
  rpc GetCertificateMetadata(GetCertificateMetadataRequest) returns (GetCertificateMetadataResponse);
}

message GetCertificateMetadataRequest {}

message GetCertificateMetadataResponse {
  int32 organization_id = 1;              // Always present for all certificate types
  optional int32 asset_id = 2;            // Set if this is an asset certificate
  optional string user_id = 3;            // Set if this is a user certificate
}

// Represents a persisted certificate record.
// Can represent a certificate for either an asset or a user.
// It will always have an organization_id, but may have an asset_id or user_id.
// The asset_id and user_id are mutually exclusive.
// If there is a certificate for `wendy-agent`, it will have an asset_id and organization_id.
// If there is a certificate for a user, it will have a user_id and organization_id.
message Certificate {
  int32 id = 1;
  int32 organization_id = 2;
  optional int32 asset_id = 3;        // Set if this is an asset certificate
  optional string user_id = 14;       // Set if this is a user certificate

  string serial_number = 4;
  string pem_certificate = 5;         // Leaf certificate (PEM)
  string pem_certificate_chain = 6;   // Chain including issuer(s) (PEM)

  google.protobuf.Timestamp not_before = 7;
  google.protobuf.Timestamp not_after = 8;

  CertificateStatus status = 9;
  google.protobuf.Timestamp revoked_at = 10; // if revoked
  string revocation_reason = 11;             // free-form for now

  google.protobuf.Timestamp created_at = 12;
  google.protobuf.Timestamp updated_at = 13;
}

enum CertificateStatus {
  CERTIFICATE_STATUS_UNSPECIFIED = 0;
  CERTIFICATE_STATUS_ACTIVE = 1;
  CERTIFICATE_STATUS_REVOKED = 2;
  CERTIFICATE_STATUS_EXPIRED = 3;
}

// Required for issuing a certificate for the first time for an asset
// you can look up the assetId and organizationId by the enrollment token
message IssueCertificateRequest {
  string pem_csr = 3;          // PKCS#10 CSR (PEM)
  string enrollment_token = 5; // For device provisioning (no Firebase on device)
}

// Response wrapper with structured error handling for certificate issuance
message IssueCertificateResponse {
  // If successful, contains the issued certificate
  Certificate certificate = 1;

  // Error details if issuance failed (empty on success)
  CertificateError error = 2;

  // Warnings that don't prevent issuance (e.g., CSR has unusual extensions)
  repeated string warnings = 3;

  // Organization that owns this certificate
  int32 organization_id = 4;

  // Asset this certificate was issued for (populated when using asset enrollment token)
  optional int32 asset_id = 5;

  // User this certificate was issued for (populated when using user enrollment token)
  optional string user_id = 6;
}

// Used by an authenticated asset (via mTLS) to rotate its certificate.
// The server extracts organization_id and asset_id from the client's current
// certificate SAN (Subject Alternative Name), so they don't need to be provided.
// The agent should refresh ~2/3 through the current certificate's lifetime.
message RefreshCertificateRequest {
  string pem_csr = 3;          // New CSR with new public key (PKCS#10 PEM)
}

// Response wrapper with structured error handling for certificate refresh
message RefreshCertificateResponse {
  // If successful, contains the refreshed certificate
  Certificate certificate = 1;

  // Error details if refresh failed (empty on success)
  CertificateError error = 2;

  // Warnings that don't prevent refresh
  repeated string warnings = 3;
}

message RevokeCertificateRequest {
  int32 certificate_id = 1;
  string reason = 2;
}

message RevokeCertificateResponse {
  bool success = 1;
}

message GetCertificateRequest {
  int32 certificate_id = 1;
}

message ListCertificatesRequest {
  int32 asset_id = 1;
  // Offset/limit based pagination
  optional int32 offset = 2;
  optional int32 limit = 3;
}

message ListCertificatesResponse {
  // One certificate per streamed response and total count for the full query
  Certificate certificate = 1;
  int32 total = 2;
}

message GetCaBundleRequest {}

message GetCaBundleResponse {
  // PEM-encoded concatenated root/issuer chain used by clients to build trust.
  string pem_bundle = 1;
}

// Asset Enrollment Token RPCs
// This DOES use the Authorization: Bearer token since it's generated primarily by a user logged into the dashboard
message CreateAssetEnrollmentTokenRequest {
  int32 organization_id = 1;
  string name = 2;
  // Lifetime in seconds (default server policy, e.g., 600s)
  int32 ttl_seconds = 3;
}

message CreateAssetEnrollmentTokenResponse {
  string enrollment_token = 1;   // Opaque signed token the agent will use
  string jti = 2;                // Token id for auditing
  google.protobuf.Timestamp expires_at = 3;
  int32 organization_id = 4;     // Organization this token belongs to
  int32 asset_id = 5;            // Asset this token is for
}

// User Enrollment Token RPCs
// This DOES use the Authorization: Bearer token since it's generated primarily by a user logged into the dashboard
// The user_id is derived from the Authorization: Bearer token (Firebase ID token)
message CreateUserEnrollmentTokenRequest {
  // Lifetime in seconds (default server policy, e.g., 600s)
  int32 ttl_seconds = 2;
  int32 organization_id = 3;
}

message CreateUserEnrollmentTokenResponse {
  string enrollment_token = 1;   // Opaque signed token the user will use
  string jti = 2;                // Token id for auditing
  google.protobuf.Timestamp expires_at = 3;
  string user_id = 5;            // User this token is for
}

// Structured error information for certificate operations
message CertificateError {
  // Machine-readable error code
  CertificateErrorCode code = 1;

  // Human-readable error message
  string message = 2;

  // Optional additional context (e.g., CSR validation details)
  map<string, string> details = 3;
}

// Error codes for certificate operations
enum CertificateErrorCode {
  CERTIFICATE_ERROR_UNSPECIFIED = 0;
  CERTIFICATE_ERROR_INVALID_CSR = 1;              // CSR parsing/validation failed
  CERTIFICATE_ERROR_INVALID_ENROLLMENT_TOKEN = 2; // Token expired or invalid
  CERTIFICATE_ERROR_UNAUTHORIZED = 3;             // Missing or invalid auth
  CERTIFICATE_ERROR_ORGANIZATION_NOT_FOUND = 4;   // Organization doesn't exist
  CERTIFICATE_ERROR_ASSET_NOT_FOUND = 5;          // Asset doesn't exist
  CERTIFICATE_ERROR_CA_SERVICE_UNAVAILABLE = 6;   // GCP CAS issue
  CERTIFICATE_ERROR_QUOTA_EXCEEDED = 7;           // Rate limiting
  CERTIFICATE_ERROR_CERTIFICATE_REVOKED = 8;      // Trying to refresh revoked cert
  CERTIFICATE_ERROR_CERTIFICATE_EXPIRED = 9;      // Trying to refresh expired cert
  CERTIFICATE_ERROR_INVALID_COMMON_NAME = 10;     // CSR CN doesn't match requirements
  CERTIFICATE_ERROR_INTERNAL = 11;                // Internal server error
}
