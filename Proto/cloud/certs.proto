syntax = "proto3";

package wendycloud.v1;

import "google/protobuf/timestamp.proto";

// Service for issuing, refreshing, revoking, and querying X.509 certificates
// for assets within an organization. Backed by Google Cloud Certificate
// Authority Service (CAS).
service CertificateService {
  // Issue a new X.509 certificate for an asset using a CSR (PEM PKCS#10).
  rpc IssueCertificate(IssueCertificateRequest) returns (Certificate);

  // Refresh/rotate the certificate by submitting a new CSR for the same asset.
  rpc RefreshCertificate(RefreshCertificateRequest) returns (Certificate);

  // Revoke an issued certificate.
  rpc RevokeCertificate(RevokeCertificateRequest) returns (RevokeCertificateResponse);

  // Get current status/details of a certificate.
  rpc GetCertificate(GetCertificateRequest) returns (Certificate);

  // List certificates for an asset (history and current).
  rpc ListCertificates(ListCertificatesRequest) returns (ListCertificatesResponse);

  // Retrieve the CA trust bundle used to validate issued certificates.
  rpc GetCaBundle(GetCaBundleRequest) returns (GetCaBundleResponse);

  // Dashboard-only: Create a short-lived enrollment token to bootstrap an asset.
  rpc CreateEnrollmentToken(CreateEnrollmentTokenRequest) returns (CreateEnrollmentTokenResponse);
}

// Represents a persisted certificate record.
message Certificate {
  int32 id = 1;
  int32 organization_id = 2;
  int32 asset_id = 3;

  string serial_number = 4;
  string pem_certificate = 5;         // Leaf certificate (PEM)
  string pem_certificate_chain = 6;   // Chain including issuer(s) (PEM)

  google.protobuf.Timestamp not_before = 7;
  google.protobuf.Timestamp not_after = 8;

  CertificateStatus status = 9;
  google.protobuf.Timestamp revoked_at = 10; // if revoked
  string revocation_reason = 11;             // free-form for now

  google.protobuf.Timestamp created_at = 12;
  google.protobuf.Timestamp updated_at = 13;
}

enum CertificateStatus {
  CERTIFICATE_STATUS_UNSPECIFIED = 0;
  CERTIFICATE_STATUS_ACTIVE = 1;
  CERTIFICATE_STATUS_REVOKED = 2;
  CERTIFICATE_STATUS_EXPIRED = 3;
}

// Required for issuing a certificate for the first time for an asset
// you can look up the assetId and organizationId by the enrollment token
message IssueCertificateRequest {
  string pem_csr = 3;          // PKCS#10 CSR (PEM)
  string enrollment_token = 5; // For device provisioning (no Firebase on device)
}

// Used by an authenticated asset (via mTLS) to rotate its certificate.
// The server extracts organization_id and asset_id from the client's current
// certificate SAN (Subject Alternative Name), so they don't need to be provided.
// The agent should refresh ~2/3 through the current certificate's lifetime.
message RefreshCertificateRequest {
  string pem_csr = 3;          // New CSR with new public key (PKCS#10 PEM)
}

message RevokeCertificateRequest {
  int32 certificate_id = 1;
  string reason = 2;
}

message RevokeCertificateResponse {
  bool success = 1;
}

message GetCertificateRequest {
  int32 certificate_id = 1;
}

message ListCertificatesRequest {
  int32 asset_id = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message ListCertificatesResponse {
  repeated Certificate certificates = 1;
  string next_page_token = 2;
}

message GetCaBundleRequest {}

message GetCaBundleResponse {
  // PEM-encoded concatenated root/issuer chain used by clients to build trust.
  string pem_bundle = 1;
}

// Enrollment token RPCs
message CreateEnrollmentTokenRequest {
  int32 organization_id = 1;
  // Optional: restrict to an existing asset; if omitted, asset can be created at issuance time
  int32 asset_id = 2;
  // Lifetime in seconds (default server policy, e.g., 600s)
  int32 ttl_seconds = 3;
}

message CreateEnrollmentTokenResponse {
  string enrollment_token = 1;   // Opaque signed token the agent will use
  string jti = 2;                // Token id for auditing
  google.protobuf.Timestamp expires_at = 3;
}
