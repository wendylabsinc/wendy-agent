syntax = "proto3";

package wendycloud.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

// Remote logging ingress for device/agent collectors.
//
// Notes:
// - Authentication is performed via mTLS using the device/asset X.509
//   client certificate (see CertificateService). No Firebase JWT is required
//   or expected on this service.
// - Each request MUST include organization_id, asset_id, and app_id so the
//   server can route and attribute logs. These should be greater than zero.
// - The backend implementation forwards entries to Google Cloud Logging using
//   appropriate labels and structured payloads.
service RemoteLoggingService {
  // Ingest a batch of log entries for a specific app on an asset.
  // The server authenticates the caller via its client certificate and
  // attributes the logs to the provided organization_id, asset_id, and app_id.
  rpc WriteLogEntries(WriteLogEntriesRequest) returns (WriteLogEntriesResponse);

  // Server-stream logs for a given (organization_id, asset_id, app_id) tuple.
  // Implemented by polling Cloud Logging's entries.list and emitting batches.
  // Intended for gRPC-web consumption from the dashboard.
  rpc TailLogEntries(TailLogEntriesRequest) returns (stream TailLogEntriesResponse);
}

// Log severity levels aligned with common syslog/Cloud Logging values.
enum LogSeverity {
  LOG_SEVERITY_UNSPECIFIED = 0;
  LOG_SEVERITY_DEBUG = 1;
  LOG_SEVERITY_INFO = 2;
  LOG_SEVERITY_NOTICE = 3;
  LOG_SEVERITY_WARNING = 4;
  LOG_SEVERITY_ERROR = 5;
  LOG_SEVERITY_CRITICAL = 6;
  LOG_SEVERITY_ALERT = 7;
  LOG_SEVERITY_EMERGENCY = 8;
}

// A single log record. Designed to map cleanly to Google Cloud Logging's
// LogEntry (textPayload/jsonPayload), plus trace context fields.
message LogEntry {
  // Event time at the source.
  google.protobuf.Timestamp timestamp = 1;

  // Observed time at the collector/agent (optional).
  google.protobuf.Timestamp observed_at = 2;

  LogSeverity severity = 3;

  // W3C Trace Context fields for cross-service correlation (optional).
  string trace_id = 4;  // 16-byte (32 hex chars) recommended
  string span_id = 5;   // 8-byte (16 hex chars) recommended
  bool trace_sampled = 6;

  // Freeform logger or source (e.g., "otel-collector", "app", "syslog").
  string logger_name = 7;

  // Optional source location hints.
  optional string file = 8;
  optional string function = 9;
  optional int32 line = 10;

  // Labels/attributes copied to Cloud Logging labels.
  map<string, string> labels = 11;

  // Optional deployment ID for associating logs with a specific deployment.
  optional int32 deployment_id = 14;

  // Payload (choose one). text_payload maps to textPayload; json_payload to jsonPayload.
  oneof payload {
    string text_payload = 12;
    google.protobuf.Struct json_payload = 13;
  }
}

// Batch write request for log entries originating from a specific app running
// on an asset within an organization. All fields must be set and the
// caller is authenticated via mTLS client certificates.
message WriteLogEntriesRequest {
  int32 organization_id = 1;
  int32 asset_id = 2;
  string app_id = 3;

  // Optional: identity of the collector/agent pushing logs.
  optional string collector = 4;           // e.g., "otel-collector"
  optional string collector_version = 5;   // e.g., "0.98.0"

  // Log entries to ingest. The server may truncate overly large batches per policy.
  repeated LogEntry entries = 6;

  // Optional hint for grouping in Cloud Logging (otherwise computed server-side).
  optional string log_name = 7;
}

message WriteLogEntriesResponse {
  // Count of entries accepted by the server/backend.
  int32 accepted_count = 1;

  // Details for any entries that were rejected.
  repeated RejectedEntry rejections = 2;

  // Server-generated id for correlating this batch in logs/metrics.
  string ingestion_id = 3;
}

message RejectedEntry {
  // Index within WriteLogEntriesRequest.entries that was rejected.
  int32 index = 1;
  // Short reason for rejection (e.g., validation, size limit).
  string reason = 2;
}

// Request to tail logs for a specific app running on an asset.
message TailLogEntriesRequest {
  int32 organization_id = 1;
  int32 asset_id = 2;
  string app_id = 3;

  // Optional start time for the tail window; defaults to 'now - 2m'.
  optional google.protobuf.Timestamp start_time = 4;

  // Server polling interval in seconds; defaults to 2.
  optional int32 poll_interval_seconds = 5;

  // Max entries per batch; defaults to 100.
  optional int32 page_size = 6;

  // Optional explicit log name (otherwise the server uses its default).
  optional string log_name = 7;

  // Optional deployment filter; when set, only entries matching this deployment_id are returned.
  optional int32 deployment_id = 8;
}

message TailLogEntriesResponse {
  repeated LogEntry entries = 1;
  // Watermark timestamp up to which the server attempted to read.
  google.protobuf.Timestamp read_through = 2;
}
