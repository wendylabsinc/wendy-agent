// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: cloud/organizations.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - wendycloud.v1.OrganizationService

/// Namespace containing generated types for the "wendycloud.v1.OrganizationService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public enum Wendycloud_V1_OrganizationService {
    /// Service descriptor for the "wendycloud.v1.OrganizationService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.OrganizationService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "CreateOrganization" metadata.
        public enum CreateOrganization {
            /// Request type for "CreateOrganization".
            public typealias Input = Wendycloud_V1_CreateOrganizationRequest
            /// Response type for "CreateOrganization".
            public typealias Output = Wendycloud_V1_Organization
            /// Descriptor for "CreateOrganization".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.OrganizationService"),
                method: "CreateOrganization"
            )
        }
        /// Namespace for "GetOrganization" metadata.
        public enum GetOrganization {
            /// Request type for "GetOrganization".
            public typealias Input = Wendycloud_V1_GetOrganizationRequest
            /// Response type for "GetOrganization".
            public typealias Output = Wendycloud_V1_Organization
            /// Descriptor for "GetOrganization".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.OrganizationService"),
                method: "GetOrganization"
            )
        }
        /// Namespace for "UpdateOrganization" metadata.
        public enum UpdateOrganization {
            /// Request type for "UpdateOrganization".
            public typealias Input = Wendycloud_V1_UpdateOrganizationRequest
            /// Response type for "UpdateOrganization".
            public typealias Output = Wendycloud_V1_Organization
            /// Descriptor for "UpdateOrganization".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.OrganizationService"),
                method: "UpdateOrganization"
            )
        }
        /// Namespace for "DeleteOrganization" metadata.
        public enum DeleteOrganization {
            /// Request type for "DeleteOrganization".
            public typealias Input = Wendycloud_V1_DeleteOrganizationRequest
            /// Response type for "DeleteOrganization".
            public typealias Output = Wendycloud_V1_DeleteOrganizationResponse
            /// Descriptor for "DeleteOrganization".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.OrganizationService"),
                method: "DeleteOrganization"
            )
        }
        /// Namespace for "ListOrganizations" metadata.
        public enum ListOrganizations {
            /// Request type for "ListOrganizations".
            public typealias Input = Wendycloud_V1_ListOrganizationsRequest
            /// Response type for "ListOrganizations".
            public typealias Output = Wendycloud_V1_ListOrganizationsResponse
            /// Descriptor for "ListOrganizations".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.OrganizationService"),
                method: "ListOrganizations"
            )
        }
        /// Namespace for "AddMember" metadata.
        public enum AddMember {
            /// Request type for "AddMember".
            public typealias Input = Wendycloud_V1_AddMemberRequest
            /// Response type for "AddMember".
            public typealias Output = Wendycloud_V1_OrganizationMember
            /// Descriptor for "AddMember".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.OrganizationService"),
                method: "AddMember"
            )
        }
        /// Namespace for "AddMembersByEmails" metadata.
        public enum AddMembersByEmails {
            /// Request type for "AddMembersByEmails".
            public typealias Input = Wendycloud_V1_AddMembersByEmailsRequest
            /// Response type for "AddMembersByEmails".
            public typealias Output = Wendycloud_V1_AddMembersByEmailsResponse
            /// Descriptor for "AddMembersByEmails".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.OrganizationService"),
                method: "AddMembersByEmails"
            )
        }
        /// Namespace for "UpdateMemberRole" metadata.
        public enum UpdateMemberRole {
            /// Request type for "UpdateMemberRole".
            public typealias Input = Wendycloud_V1_UpdateMemberRoleRequest
            /// Response type for "UpdateMemberRole".
            public typealias Output = Wendycloud_V1_OrganizationMember
            /// Descriptor for "UpdateMemberRole".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.OrganizationService"),
                method: "UpdateMemberRole"
            )
        }
        /// Namespace for "RemoveMember" metadata.
        public enum RemoveMember {
            /// Request type for "RemoveMember".
            public typealias Input = Wendycloud_V1_RemoveMemberRequest
            /// Response type for "RemoveMember".
            public typealias Output = Wendycloud_V1_RemoveMemberResponse
            /// Descriptor for "RemoveMember".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.OrganizationService"),
                method: "RemoveMember"
            )
        }
        /// Namespace for "ListMembers" metadata.
        public enum ListMembers {
            /// Request type for "ListMembers".
            public typealias Input = Wendycloud_V1_ListMembersRequest
            /// Response type for "ListMembers".
            public typealias Output = Wendycloud_V1_ListMembersResponse
            /// Descriptor for "ListMembers".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.OrganizationService"),
                method: "ListMembers"
            )
        }
        /// Descriptors for all methods in the "wendycloud.v1.OrganizationService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateOrganization.descriptor,
            GetOrganization.descriptor,
            UpdateOrganization.descriptor,
            DeleteOrganization.descriptor,
            ListOrganizations.descriptor,
            AddMember.descriptor,
            AddMembersByEmails.descriptor,
            UpdateMemberRole.descriptor,
            RemoveMember.descriptor,
            ListMembers.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "wendycloud.v1.OrganizationService" service.
    public static let wendycloud_v1_OrganizationService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.OrganizationService")
}

// MARK: wendycloud.v1.OrganizationService (server)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_OrganizationService {
    /// Streaming variant of the service protocol for the "wendycloud.v1.OrganizationService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "CreateOrganization" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_CreateOrganizationRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_Organization` messages.
        func createOrganization(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_CreateOrganizationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Organization>

        /// Handle the "GetOrganization" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_GetOrganizationRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_Organization` messages.
        func getOrganization(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetOrganizationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Organization>

        /// Handle the "UpdateOrganization" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_UpdateOrganizationRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_Organization` messages.
        func updateOrganization(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_UpdateOrganizationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Organization>

        /// Handle the "DeleteOrganization" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_DeleteOrganizationRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_DeleteOrganizationResponse` messages.
        func deleteOrganization(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_DeleteOrganizationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_DeleteOrganizationResponse>

        /// Handle the "ListOrganizations" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_ListOrganizationsRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_ListOrganizationsResponse` messages.
        func listOrganizations(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListOrganizationsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListOrganizationsResponse>

        /// Handle the "AddMember" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_AddMemberRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_OrganizationMember` messages.
        func addMember(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_AddMemberRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_OrganizationMember>

        /// Handle the "AddMembersByEmails" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_AddMembersByEmailsRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_AddMembersByEmailsResponse` messages.
        func addMembersByEmails(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_AddMembersByEmailsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_AddMembersByEmailsResponse>

        /// Handle the "UpdateMemberRole" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_UpdateMemberRoleRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_OrganizationMember` messages.
        func updateMemberRole(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_UpdateMemberRoleRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_OrganizationMember>

        /// Handle the "RemoveMember" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_RemoveMemberRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_RemoveMemberResponse` messages.
        func removeMember(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_RemoveMemberRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_RemoveMemberResponse>

        /// Handle the "ListMembers" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_ListMembersRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_ListMembersResponse` messages.
        func listMembers(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListMembersRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListMembersResponse>
    }

    /// Service protocol for the "wendycloud.v1.OrganizationService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    public protocol ServiceProtocol: Wendycloud_V1_OrganizationService.StreamingServiceProtocol {
        /// Handle the "CreateOrganization" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateOrganizationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_Organization` message.
        func createOrganization(
            request: GRPCCore.ServerRequest<Wendycloud_V1_CreateOrganizationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Organization>

        /// Handle the "GetOrganization" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetOrganizationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_Organization` message.
        func getOrganization(
            request: GRPCCore.ServerRequest<Wendycloud_V1_GetOrganizationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Organization>

        /// Handle the "UpdateOrganization" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_UpdateOrganizationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_Organization` message.
        func updateOrganization(
            request: GRPCCore.ServerRequest<Wendycloud_V1_UpdateOrganizationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Organization>

        /// Handle the "DeleteOrganization" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_DeleteOrganizationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_DeleteOrganizationResponse` message.
        func deleteOrganization(
            request: GRPCCore.ServerRequest<Wendycloud_V1_DeleteOrganizationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_DeleteOrganizationResponse>

        /// Handle the "ListOrganizations" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListOrganizationsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_ListOrganizationsResponse` messages.
        func listOrganizations(
            request: GRPCCore.ServerRequest<Wendycloud_V1_ListOrganizationsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListOrganizationsResponse>

        /// Handle the "AddMember" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_AddMemberRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_OrganizationMember` message.
        func addMember(
            request: GRPCCore.ServerRequest<Wendycloud_V1_AddMemberRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_OrganizationMember>

        /// Handle the "AddMembersByEmails" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_AddMembersByEmailsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_AddMembersByEmailsResponse` message.
        func addMembersByEmails(
            request: GRPCCore.ServerRequest<Wendycloud_V1_AddMembersByEmailsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_AddMembersByEmailsResponse>

        /// Handle the "UpdateMemberRole" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_UpdateMemberRoleRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_OrganizationMember` message.
        func updateMemberRole(
            request: GRPCCore.ServerRequest<Wendycloud_V1_UpdateMemberRoleRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_OrganizationMember>

        /// Handle the "RemoveMember" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_RemoveMemberRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_RemoveMemberResponse` message.
        func removeMember(
            request: GRPCCore.ServerRequest<Wendycloud_V1_RemoveMemberRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_RemoveMemberResponse>

        /// Handle the "ListMembers" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListMembersRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_ListMembersResponse` message.
        func listMembers(
            request: GRPCCore.ServerRequest<Wendycloud_V1_ListMembersRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_ListMembersResponse>
    }

    /// Simple service protocol for the "wendycloud.v1.OrganizationService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    public protocol SimpleServiceProtocol: Wendycloud_V1_OrganizationService.ServiceProtocol {
        /// Handle the "CreateOrganization" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_CreateOrganizationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_Organization` to respond with.
        func createOrganization(
            request: Wendycloud_V1_CreateOrganizationRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_Organization

        /// Handle the "GetOrganization" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_GetOrganizationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_Organization` to respond with.
        func getOrganization(
            request: Wendycloud_V1_GetOrganizationRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_Organization

        /// Handle the "UpdateOrganization" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_UpdateOrganizationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_Organization` to respond with.
        func updateOrganization(
            request: Wendycloud_V1_UpdateOrganizationRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_Organization

        /// Handle the "DeleteOrganization" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_DeleteOrganizationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_DeleteOrganizationResponse` to respond with.
        func deleteOrganization(
            request: Wendycloud_V1_DeleteOrganizationRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_DeleteOrganizationResponse

        /// Handle the "ListOrganizations" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_ListOrganizationsRequest` message.
        ///   - response: A response stream of `Wendycloud_V1_ListOrganizationsResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func listOrganizations(
            request: Wendycloud_V1_ListOrganizationsRequest,
            response: GRPCCore.RPCWriter<Wendycloud_V1_ListOrganizationsResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "AddMember" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_AddMemberRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_OrganizationMember` to respond with.
        func addMember(
            request: Wendycloud_V1_AddMemberRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_OrganizationMember

        /// Handle the "AddMembersByEmails" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_AddMembersByEmailsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_AddMembersByEmailsResponse` to respond with.
        func addMembersByEmails(
            request: Wendycloud_V1_AddMembersByEmailsRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_AddMembersByEmailsResponse

        /// Handle the "UpdateMemberRole" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_UpdateMemberRoleRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_OrganizationMember` to respond with.
        func updateMemberRole(
            request: Wendycloud_V1_UpdateMemberRoleRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_OrganizationMember

        /// Handle the "RemoveMember" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_RemoveMemberRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_RemoveMemberResponse` to respond with.
        func removeMember(
            request: Wendycloud_V1_RemoveMemberRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_RemoveMemberResponse

        /// Handle the "ListMembers" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_ListMembersRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_ListMembersResponse` to respond with.
        func listMembers(
            request: Wendycloud_V1_ListMembersRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_ListMembersResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_OrganizationService.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Wendycloud_V1_OrganizationService.Method.CreateOrganization.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_CreateOrganizationRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_Organization>(),
            handler: { request, context in
                try await self.createOrganization(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_OrganizationService.Method.GetOrganization.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_GetOrganizationRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_Organization>(),
            handler: { request, context in
                try await self.getOrganization(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_OrganizationService.Method.UpdateOrganization.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_UpdateOrganizationRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_Organization>(),
            handler: { request, context in
                try await self.updateOrganization(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_OrganizationService.Method.DeleteOrganization.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_DeleteOrganizationRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_DeleteOrganizationResponse>(),
            handler: { request, context in
                try await self.deleteOrganization(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_OrganizationService.Method.ListOrganizations.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListOrganizationsRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListOrganizationsResponse>(),
            handler: { request, context in
                try await self.listOrganizations(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_OrganizationService.Method.AddMember.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_AddMemberRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_OrganizationMember>(),
            handler: { request, context in
                try await self.addMember(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_OrganizationService.Method.AddMembersByEmails.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_AddMembersByEmailsRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_AddMembersByEmailsResponse>(),
            handler: { request, context in
                try await self.addMembersByEmails(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_OrganizationService.Method.UpdateMemberRole.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_UpdateMemberRoleRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_OrganizationMember>(),
            handler: { request, context in
                try await self.updateMemberRole(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_OrganizationService.Method.RemoveMember.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_RemoveMemberRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_RemoveMemberResponse>(),
            handler: { request, context in
                try await self.removeMember(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_OrganizationService.Method.ListMembers.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListMembersRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListMembersResponse>(),
            handler: { request, context in
                try await self.listMembers(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_OrganizationService.ServiceProtocol {
    public func createOrganization(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_CreateOrganizationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Organization> {
        let response = try await self.createOrganization(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getOrganization(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetOrganizationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Organization> {
        let response = try await self.getOrganization(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func updateOrganization(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_UpdateOrganizationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Organization> {
        let response = try await self.updateOrganization(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func deleteOrganization(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_DeleteOrganizationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_DeleteOrganizationResponse> {
        let response = try await self.deleteOrganization(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func listOrganizations(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListOrganizationsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListOrganizationsResponse> {
        let response = try await self.listOrganizations(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return response
    }

    public func addMember(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_AddMemberRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_OrganizationMember> {
        let response = try await self.addMember(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func addMembersByEmails(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_AddMembersByEmailsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_AddMembersByEmailsResponse> {
        let response = try await self.addMembersByEmails(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func updateMemberRole(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_UpdateMemberRoleRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_OrganizationMember> {
        let response = try await self.updateMemberRole(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func removeMember(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_RemoveMemberRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_RemoveMemberResponse> {
        let response = try await self.removeMember(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func listMembers(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListMembersRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListMembersResponse> {
        let response = try await self.listMembers(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_OrganizationService.SimpleServiceProtocol {
    public func createOrganization(
        request: GRPCCore.ServerRequest<Wendycloud_V1_CreateOrganizationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Organization> {
        return GRPCCore.ServerResponse<Wendycloud_V1_Organization>(
            message: try await self.createOrganization(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getOrganization(
        request: GRPCCore.ServerRequest<Wendycloud_V1_GetOrganizationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Organization> {
        return GRPCCore.ServerResponse<Wendycloud_V1_Organization>(
            message: try await self.getOrganization(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func updateOrganization(
        request: GRPCCore.ServerRequest<Wendycloud_V1_UpdateOrganizationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Organization> {
        return GRPCCore.ServerResponse<Wendycloud_V1_Organization>(
            message: try await self.updateOrganization(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func deleteOrganization(
        request: GRPCCore.ServerRequest<Wendycloud_V1_DeleteOrganizationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_DeleteOrganizationResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_DeleteOrganizationResponse>(
            message: try await self.deleteOrganization(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func listOrganizations(
        request: GRPCCore.ServerRequest<Wendycloud_V1_ListOrganizationsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListOrganizationsResponse> {
        return GRPCCore.StreamingServerResponse<Wendycloud_V1_ListOrganizationsResponse>(
            metadata: [:],
            producer: { writer in
                try await self.listOrganizations(
                    request: request.message,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    public func addMember(
        request: GRPCCore.ServerRequest<Wendycloud_V1_AddMemberRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_OrganizationMember> {
        return GRPCCore.ServerResponse<Wendycloud_V1_OrganizationMember>(
            message: try await self.addMember(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func addMembersByEmails(
        request: GRPCCore.ServerRequest<Wendycloud_V1_AddMembersByEmailsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_AddMembersByEmailsResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_AddMembersByEmailsResponse>(
            message: try await self.addMembersByEmails(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func updateMemberRole(
        request: GRPCCore.ServerRequest<Wendycloud_V1_UpdateMemberRoleRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_OrganizationMember> {
        return GRPCCore.ServerResponse<Wendycloud_V1_OrganizationMember>(
            message: try await self.updateMemberRole(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func removeMember(
        request: GRPCCore.ServerRequest<Wendycloud_V1_RemoveMemberRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_RemoveMemberResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_RemoveMemberResponse>(
            message: try await self.removeMember(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func listMembers(
        request: GRPCCore.ServerRequest<Wendycloud_V1_ListMembersRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_ListMembersResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_ListMembersResponse>(
            message: try await self.listMembers(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: wendycloud.v1.OrganizationService (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_OrganizationService {
    /// Generated client protocol for the "wendycloud.v1.OrganizationService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    public protocol ClientProtocol: Sendable {
        /// Call the "CreateOrganization" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateOrganizationRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_CreateOrganizationRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Organization` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createOrganization<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_CreateOrganizationRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_CreateOrganizationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Organization>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Organization>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetOrganization" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetOrganizationRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetOrganizationRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Organization` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getOrganization<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetOrganizationRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetOrganizationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Organization>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Organization>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateOrganization" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_UpdateOrganizationRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_UpdateOrganizationRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Organization` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateOrganization<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_UpdateOrganizationRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_UpdateOrganizationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Organization>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Organization>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteOrganization" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_DeleteOrganizationRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_DeleteOrganizationRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_DeleteOrganizationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteOrganization<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_DeleteOrganizationRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_DeleteOrganizationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_DeleteOrganizationResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_DeleteOrganizationResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListOrganizations" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListOrganizationsRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListOrganizationsRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListOrganizationsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listOrganizations<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListOrganizationsRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListOrganizationsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListOrganizationsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Wendycloud_V1_ListOrganizationsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "AddMember" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_AddMemberRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_AddMemberRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_OrganizationMember` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func addMember<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_AddMemberRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_AddMemberRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_OrganizationMember>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_OrganizationMember>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "AddMembersByEmails" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_AddMembersByEmailsRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_AddMembersByEmailsRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_AddMembersByEmailsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func addMembersByEmails<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_AddMembersByEmailsRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_AddMembersByEmailsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_AddMembersByEmailsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_AddMembersByEmailsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateMemberRole" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_UpdateMemberRoleRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_UpdateMemberRoleRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_OrganizationMember` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateMemberRole<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_UpdateMemberRoleRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_UpdateMemberRoleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_OrganizationMember>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_OrganizationMember>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RemoveMember" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_RemoveMemberRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_RemoveMemberRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_RemoveMemberResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func removeMember<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_RemoveMemberRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_RemoveMemberRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_RemoveMemberResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_RemoveMemberResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListMembers" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListMembersRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListMembersRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListMembersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listMembers<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListMembersRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListMembersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListMembersResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListMembersResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "wendycloud.v1.OrganizationService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "CreateOrganization" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateOrganizationRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_CreateOrganizationRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Organization` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createOrganization<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_CreateOrganizationRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_CreateOrganizationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Organization>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Organization>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_OrganizationService.Method.CreateOrganization.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetOrganization" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetOrganizationRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetOrganizationRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Organization` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getOrganization<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetOrganizationRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetOrganizationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Organization>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Organization>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_OrganizationService.Method.GetOrganization.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateOrganization" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_UpdateOrganizationRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_UpdateOrganizationRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Organization` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateOrganization<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_UpdateOrganizationRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_UpdateOrganizationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Organization>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Organization>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_OrganizationService.Method.UpdateOrganization.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteOrganization" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_DeleteOrganizationRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_DeleteOrganizationRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_DeleteOrganizationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteOrganization<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_DeleteOrganizationRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_DeleteOrganizationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_DeleteOrganizationResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_DeleteOrganizationResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_OrganizationService.Method.DeleteOrganization.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListOrganizations" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListOrganizationsRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListOrganizationsRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListOrganizationsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listOrganizations<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListOrganizationsRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListOrganizationsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListOrganizationsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Wendycloud_V1_ListOrganizationsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.serverStreaming(
                request: request,
                descriptor: Wendycloud_V1_OrganizationService.Method.ListOrganizations.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "AddMember" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_AddMemberRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_AddMemberRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_OrganizationMember` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func addMember<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_AddMemberRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_AddMemberRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_OrganizationMember>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_OrganizationMember>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_OrganizationService.Method.AddMember.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "AddMembersByEmails" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_AddMembersByEmailsRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_AddMembersByEmailsRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_AddMembersByEmailsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func addMembersByEmails<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_AddMembersByEmailsRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_AddMembersByEmailsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_AddMembersByEmailsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_AddMembersByEmailsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_OrganizationService.Method.AddMembersByEmails.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateMemberRole" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_UpdateMemberRoleRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_UpdateMemberRoleRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_OrganizationMember` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateMemberRole<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_UpdateMemberRoleRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_UpdateMemberRoleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_OrganizationMember>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_OrganizationMember>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_OrganizationService.Method.UpdateMemberRole.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RemoveMember" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_RemoveMemberRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_RemoveMemberRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_RemoveMemberResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func removeMember<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_RemoveMemberRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_RemoveMemberRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_RemoveMemberResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_RemoveMemberResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_OrganizationService.Method.RemoveMember.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListMembers" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListMembersRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListMembersRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListMembersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listMembers<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListMembersRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListMembersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListMembersResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListMembersResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_OrganizationService.Method.ListMembers.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_OrganizationService.ClientProtocol {
    /// Call the "CreateOrganization" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_CreateOrganizationRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createOrganization<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_CreateOrganizationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Organization>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createOrganization(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_CreateOrganizationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_Organization>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetOrganization" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_GetOrganizationRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getOrganization<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_GetOrganizationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Organization>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getOrganization(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_GetOrganizationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_Organization>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateOrganization" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_UpdateOrganizationRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateOrganization<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_UpdateOrganizationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Organization>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateOrganization(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_UpdateOrganizationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_Organization>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteOrganization" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_DeleteOrganizationRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteOrganization<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_DeleteOrganizationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_DeleteOrganizationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteOrganization(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_DeleteOrganizationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_DeleteOrganizationResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListOrganizations" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_ListOrganizationsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listOrganizations<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_ListOrganizationsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Wendycloud_V1_ListOrganizationsResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.listOrganizations(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListOrganizationsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListOrganizationsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AddMember" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_AddMemberRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func addMember<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_AddMemberRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_OrganizationMember>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.addMember(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_AddMemberRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_OrganizationMember>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AddMembersByEmails" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_AddMembersByEmailsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func addMembersByEmails<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_AddMembersByEmailsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_AddMembersByEmailsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.addMembersByEmails(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_AddMembersByEmailsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_AddMembersByEmailsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateMemberRole" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_UpdateMemberRoleRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateMemberRole<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_UpdateMemberRoleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_OrganizationMember>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateMemberRole(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_UpdateMemberRoleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_OrganizationMember>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RemoveMember" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_RemoveMemberRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func removeMember<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_RemoveMemberRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_RemoveMemberResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.removeMember(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_RemoveMemberRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_RemoveMemberResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListMembers" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_ListMembersRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listMembers<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_ListMembersRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListMembersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listMembers(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListMembersRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListMembersResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_OrganizationService.ClientProtocol {
    /// Call the "CreateOrganization" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createOrganization<Result>(
        _ message: Wendycloud_V1_CreateOrganizationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Organization>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_CreateOrganizationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createOrganization(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetOrganization" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getOrganization<Result>(
        _ message: Wendycloud_V1_GetOrganizationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Organization>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_GetOrganizationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getOrganization(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateOrganization" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateOrganization<Result>(
        _ message: Wendycloud_V1_UpdateOrganizationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Organization>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_UpdateOrganizationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateOrganization(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteOrganization" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteOrganization<Result>(
        _ message: Wendycloud_V1_DeleteOrganizationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_DeleteOrganizationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_DeleteOrganizationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteOrganization(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListOrganizations" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listOrganizations<Result>(
        _ message: Wendycloud_V1_ListOrganizationsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Wendycloud_V1_ListOrganizationsResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_ListOrganizationsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listOrganizations(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AddMember" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func addMember<Result>(
        _ message: Wendycloud_V1_AddMemberRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_OrganizationMember>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_AddMemberRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.addMember(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AddMembersByEmails" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func addMembersByEmails<Result>(
        _ message: Wendycloud_V1_AddMembersByEmailsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_AddMembersByEmailsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_AddMembersByEmailsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.addMembersByEmails(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateMemberRole" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateMemberRole<Result>(
        _ message: Wendycloud_V1_UpdateMemberRoleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_OrganizationMember>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_UpdateMemberRoleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateMemberRole(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RemoveMember" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func removeMember<Result>(
        _ message: Wendycloud_V1_RemoveMemberRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_RemoveMemberResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_RemoveMemberRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.removeMember(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListMembers" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listMembers<Result>(
        _ message: Wendycloud_V1_ListMembersRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListMembersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_ListMembersRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listMembers(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}