// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: cloud/certificates.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - wendycloud.v1.CertificateService

/// Namespace containing generated types for the "wendycloud.v1.CertificateService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public enum Wendycloud_V1_CertificateService {
    /// Service descriptor for the "wendycloud.v1.CertificateService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.CertificateService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "IssueCertificate" metadata.
        public enum IssueCertificate {
            /// Request type for "IssueCertificate".
            public typealias Input = Wendycloud_V1_IssueCertificateRequest
            /// Response type for "IssueCertificate".
            public typealias Output = Wendycloud_V1_IssueCertificateResponse
            /// Descriptor for "IssueCertificate".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.CertificateService"),
                method: "IssueCertificate"
            )
        }
        /// Namespace for "RefreshCertificate" metadata.
        public enum RefreshCertificate {
            /// Request type for "RefreshCertificate".
            public typealias Input = Wendycloud_V1_RefreshCertificateRequest
            /// Response type for "RefreshCertificate".
            public typealias Output = Wendycloud_V1_RefreshCertificateResponse
            /// Descriptor for "RefreshCertificate".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.CertificateService"),
                method: "RefreshCertificate"
            )
        }
        /// Namespace for "RevokeCertificate" metadata.
        public enum RevokeCertificate {
            /// Request type for "RevokeCertificate".
            public typealias Input = Wendycloud_V1_RevokeCertificateRequest
            /// Response type for "RevokeCertificate".
            public typealias Output = Wendycloud_V1_RevokeCertificateResponse
            /// Descriptor for "RevokeCertificate".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.CertificateService"),
                method: "RevokeCertificate"
            )
        }
        /// Namespace for "GetCertificate" metadata.
        public enum GetCertificate {
            /// Request type for "GetCertificate".
            public typealias Input = Wendycloud_V1_GetCertificateRequest
            /// Response type for "GetCertificate".
            public typealias Output = Wendycloud_V1_Certificate
            /// Descriptor for "GetCertificate".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.CertificateService"),
                method: "GetCertificate"
            )
        }
        /// Namespace for "ListCertificates" metadata.
        public enum ListCertificates {
            /// Request type for "ListCertificates".
            public typealias Input = Wendycloud_V1_ListCertificatesRequest
            /// Response type for "ListCertificates".
            public typealias Output = Wendycloud_V1_ListCertificatesResponse
            /// Descriptor for "ListCertificates".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.CertificateService"),
                method: "ListCertificates"
            )
        }
        /// Namespace for "GetCaBundle" metadata.
        public enum GetCaBundle {
            /// Request type for "GetCaBundle".
            public typealias Input = Wendycloud_V1_GetCaBundleRequest
            /// Response type for "GetCaBundle".
            public typealias Output = Wendycloud_V1_GetCaBundleResponse
            /// Descriptor for "GetCaBundle".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.CertificateService"),
                method: "GetCaBundle"
            )
        }
        /// Namespace for "CreateAssetEnrollmentToken" metadata.
        public enum CreateAssetEnrollmentToken {
            /// Request type for "CreateAssetEnrollmentToken".
            public typealias Input = Wendycloud_V1_CreateAssetEnrollmentTokenRequest
            /// Response type for "CreateAssetEnrollmentToken".
            public typealias Output = Wendycloud_V1_CreateAssetEnrollmentTokenResponse
            /// Descriptor for "CreateAssetEnrollmentToken".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.CertificateService"),
                method: "CreateAssetEnrollmentToken"
            )
        }
        /// Namespace for "CreateUserEnrollmentToken" metadata.
        public enum CreateUserEnrollmentToken {
            /// Request type for "CreateUserEnrollmentToken".
            public typealias Input = Wendycloud_V1_CreateUserEnrollmentTokenRequest
            /// Response type for "CreateUserEnrollmentToken".
            public typealias Output = Wendycloud_V1_CreateUserEnrollmentTokenResponse
            /// Descriptor for "CreateUserEnrollmentToken".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.CertificateService"),
                method: "CreateUserEnrollmentToken"
            )
        }
        /// Namespace for "GetCertificateMetadata" metadata.
        public enum GetCertificateMetadata {
            /// Request type for "GetCertificateMetadata".
            public typealias Input = Wendycloud_V1_GetCertificateMetadataRequest
            /// Response type for "GetCertificateMetadata".
            public typealias Output = Wendycloud_V1_GetCertificateMetadataResponse
            /// Descriptor for "GetCertificateMetadata".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.CertificateService"),
                method: "GetCertificateMetadata"
            )
        }
        /// Descriptors for all methods in the "wendycloud.v1.CertificateService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            IssueCertificate.descriptor,
            RefreshCertificate.descriptor,
            RevokeCertificate.descriptor,
            GetCertificate.descriptor,
            ListCertificates.descriptor,
            GetCaBundle.descriptor,
            CreateAssetEnrollmentToken.descriptor,
            CreateUserEnrollmentToken.descriptor,
            GetCertificateMetadata.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "wendycloud.v1.CertificateService" service.
    public static let wendycloud_v1_CertificateService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.CertificateService")
}

// MARK: wendycloud.v1.CertificateService (server)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_CertificateService {
    /// Streaming variant of the service protocol for the "wendycloud.v1.CertificateService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Service for issuing, refreshing, revoking, and querying X.509 certificates
    /// > for assets within an organization. Backed by Google Cloud Certificate
    /// > Authority Service (CAS).
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "IssueCertificate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Issue a new X.509 certificate for an asset using a CSR (PEM PKCS#10).
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_IssueCertificateRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_IssueCertificateResponse` messages.
        func issueCertificate(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_IssueCertificateRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_IssueCertificateResponse>

        /// Handle the "RefreshCertificate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Refresh/rotate the certificate by submitting a new CSR for the same asset.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_RefreshCertificateRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_RefreshCertificateResponse` messages.
        func refreshCertificate(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_RefreshCertificateRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_RefreshCertificateResponse>

        /// Handle the "RevokeCertificate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Revoke an issued certificate.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_RevokeCertificateRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_RevokeCertificateResponse` messages.
        func revokeCertificate(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_RevokeCertificateRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_RevokeCertificateResponse>

        /// Handle the "GetCertificate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get current status/details of a certificate.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_GetCertificateRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_Certificate` messages.
        func getCertificate(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetCertificateRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Certificate>

        /// Handle the "ListCertificates" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List certificates for an asset (history and current) using server streaming
        /// > and offset/limit pagination (matches OrganizationService).
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_ListCertificatesRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_ListCertificatesResponse` messages.
        func listCertificates(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListCertificatesRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListCertificatesResponse>

        /// Handle the "GetCaBundle" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Retrieve the CA trust bundle used to validate issued certificates.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_GetCaBundleRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_GetCaBundleResponse` messages.
        func getCaBundle(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetCaBundleRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_GetCaBundleResponse>

        /// Handle the "CreateAssetEnrollmentToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > CLI-only: Create a short-lived enrollment token to give to an asset's `wendy-agent`
        /// > `wendy-agent` will use this token to ask for `IssueCertificateRequest` RPCs
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_CreateAssetEnrollmentTokenRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_CreateAssetEnrollmentTokenResponse` messages.
        func createAssetEnrollmentToken(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_CreateAssetEnrollmentTokenRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_CreateAssetEnrollmentTokenResponse>

        /// Handle the "CreateUserEnrollmentToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Dashboard-only: Create a short-lived enrollment token for a user (for companion SDK or Wendy CLI).
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_CreateUserEnrollmentTokenRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_CreateUserEnrollmentTokenResponse` messages.
        func createUserEnrollmentToken(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_CreateUserEnrollmentTokenRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_CreateUserEnrollmentTokenResponse>

        /// Handle the "GetCertificateMetadata" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get certificate metadata (organization, asset, or user) from the client's mTLS certificate
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_GetCertificateMetadataRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_GetCertificateMetadataResponse` messages.
        func getCertificateMetadata(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetCertificateMetadataRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_GetCertificateMetadataResponse>
    }

    /// Service protocol for the "wendycloud.v1.CertificateService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Service for issuing, refreshing, revoking, and querying X.509 certificates
    /// > for assets within an organization. Backed by Google Cloud Certificate
    /// > Authority Service (CAS).
    public protocol ServiceProtocol: Wendycloud_V1_CertificateService.StreamingServiceProtocol {
        /// Handle the "IssueCertificate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Issue a new X.509 certificate for an asset using a CSR (PEM PKCS#10).
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_IssueCertificateRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_IssueCertificateResponse` message.
        func issueCertificate(
            request: GRPCCore.ServerRequest<Wendycloud_V1_IssueCertificateRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_IssueCertificateResponse>

        /// Handle the "RefreshCertificate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Refresh/rotate the certificate by submitting a new CSR for the same asset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_RefreshCertificateRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_RefreshCertificateResponse` message.
        func refreshCertificate(
            request: GRPCCore.ServerRequest<Wendycloud_V1_RefreshCertificateRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_RefreshCertificateResponse>

        /// Handle the "RevokeCertificate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Revoke an issued certificate.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_RevokeCertificateRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_RevokeCertificateResponse` message.
        func revokeCertificate(
            request: GRPCCore.ServerRequest<Wendycloud_V1_RevokeCertificateRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_RevokeCertificateResponse>

        /// Handle the "GetCertificate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get current status/details of a certificate.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetCertificateRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_Certificate` message.
        func getCertificate(
            request: GRPCCore.ServerRequest<Wendycloud_V1_GetCertificateRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Certificate>

        /// Handle the "ListCertificates" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List certificates for an asset (history and current) using server streaming
        /// > and offset/limit pagination (matches OrganizationService).
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListCertificatesRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_ListCertificatesResponse` messages.
        func listCertificates(
            request: GRPCCore.ServerRequest<Wendycloud_V1_ListCertificatesRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListCertificatesResponse>

        /// Handle the "GetCaBundle" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Retrieve the CA trust bundle used to validate issued certificates.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetCaBundleRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_GetCaBundleResponse` message.
        func getCaBundle(
            request: GRPCCore.ServerRequest<Wendycloud_V1_GetCaBundleRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_GetCaBundleResponse>

        /// Handle the "CreateAssetEnrollmentToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > CLI-only: Create a short-lived enrollment token to give to an asset's `wendy-agent`
        /// > `wendy-agent` will use this token to ask for `IssueCertificateRequest` RPCs
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateAssetEnrollmentTokenRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_CreateAssetEnrollmentTokenResponse` message.
        func createAssetEnrollmentToken(
            request: GRPCCore.ServerRequest<Wendycloud_V1_CreateAssetEnrollmentTokenRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_CreateAssetEnrollmentTokenResponse>

        /// Handle the "CreateUserEnrollmentToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Dashboard-only: Create a short-lived enrollment token for a user (for companion SDK or Wendy CLI).
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateUserEnrollmentTokenRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_CreateUserEnrollmentTokenResponse` message.
        func createUserEnrollmentToken(
            request: GRPCCore.ServerRequest<Wendycloud_V1_CreateUserEnrollmentTokenRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_CreateUserEnrollmentTokenResponse>

        /// Handle the "GetCertificateMetadata" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get certificate metadata (organization, asset, or user) from the client's mTLS certificate
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetCertificateMetadataRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_GetCertificateMetadataResponse` message.
        func getCertificateMetadata(
            request: GRPCCore.ServerRequest<Wendycloud_V1_GetCertificateMetadataRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_GetCertificateMetadataResponse>
    }

    /// Simple service protocol for the "wendycloud.v1.CertificateService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Service for issuing, refreshing, revoking, and querying X.509 certificates
    /// > for assets within an organization. Backed by Google Cloud Certificate
    /// > Authority Service (CAS).
    public protocol SimpleServiceProtocol: Wendycloud_V1_CertificateService.ServiceProtocol {
        /// Handle the "IssueCertificate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Issue a new X.509 certificate for an asset using a CSR (PEM PKCS#10).
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_IssueCertificateRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_IssueCertificateResponse` to respond with.
        func issueCertificate(
            request: Wendycloud_V1_IssueCertificateRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_IssueCertificateResponse

        /// Handle the "RefreshCertificate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Refresh/rotate the certificate by submitting a new CSR for the same asset.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_RefreshCertificateRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_RefreshCertificateResponse` to respond with.
        func refreshCertificate(
            request: Wendycloud_V1_RefreshCertificateRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_RefreshCertificateResponse

        /// Handle the "RevokeCertificate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Revoke an issued certificate.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_RevokeCertificateRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_RevokeCertificateResponse` to respond with.
        func revokeCertificate(
            request: Wendycloud_V1_RevokeCertificateRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_RevokeCertificateResponse

        /// Handle the "GetCertificate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get current status/details of a certificate.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_GetCertificateRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_Certificate` to respond with.
        func getCertificate(
            request: Wendycloud_V1_GetCertificateRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_Certificate

        /// Handle the "ListCertificates" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List certificates for an asset (history and current) using server streaming
        /// > and offset/limit pagination (matches OrganizationService).
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_ListCertificatesRequest` message.
        ///   - response: A response stream of `Wendycloud_V1_ListCertificatesResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func listCertificates(
            request: Wendycloud_V1_ListCertificatesRequest,
            response: GRPCCore.RPCWriter<Wendycloud_V1_ListCertificatesResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "GetCaBundle" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Retrieve the CA trust bundle used to validate issued certificates.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_GetCaBundleRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_GetCaBundleResponse` to respond with.
        func getCaBundle(
            request: Wendycloud_V1_GetCaBundleRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_GetCaBundleResponse

        /// Handle the "CreateAssetEnrollmentToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > CLI-only: Create a short-lived enrollment token to give to an asset's `wendy-agent`
        /// > `wendy-agent` will use this token to ask for `IssueCertificateRequest` RPCs
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_CreateAssetEnrollmentTokenRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_CreateAssetEnrollmentTokenResponse` to respond with.
        func createAssetEnrollmentToken(
            request: Wendycloud_V1_CreateAssetEnrollmentTokenRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_CreateAssetEnrollmentTokenResponse

        /// Handle the "CreateUserEnrollmentToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Dashboard-only: Create a short-lived enrollment token for a user (for companion SDK or Wendy CLI).
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_CreateUserEnrollmentTokenRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_CreateUserEnrollmentTokenResponse` to respond with.
        func createUserEnrollmentToken(
            request: Wendycloud_V1_CreateUserEnrollmentTokenRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_CreateUserEnrollmentTokenResponse

        /// Handle the "GetCertificateMetadata" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get certificate metadata (organization, asset, or user) from the client's mTLS certificate
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_GetCertificateMetadataRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_GetCertificateMetadataResponse` to respond with.
        func getCertificateMetadata(
            request: Wendycloud_V1_GetCertificateMetadataRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_GetCertificateMetadataResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_CertificateService.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Wendycloud_V1_CertificateService.Method.IssueCertificate.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_IssueCertificateRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_IssueCertificateResponse>(),
            handler: { request, context in
                try await self.issueCertificate(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_CertificateService.Method.RefreshCertificate.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_RefreshCertificateRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_RefreshCertificateResponse>(),
            handler: { request, context in
                try await self.refreshCertificate(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_CertificateService.Method.RevokeCertificate.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_RevokeCertificateRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_RevokeCertificateResponse>(),
            handler: { request, context in
                try await self.revokeCertificate(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_CertificateService.Method.GetCertificate.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_GetCertificateRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_Certificate>(),
            handler: { request, context in
                try await self.getCertificate(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_CertificateService.Method.ListCertificates.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListCertificatesRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListCertificatesResponse>(),
            handler: { request, context in
                try await self.listCertificates(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_CertificateService.Method.GetCaBundle.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_GetCaBundleRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_GetCaBundleResponse>(),
            handler: { request, context in
                try await self.getCaBundle(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_CertificateService.Method.CreateAssetEnrollmentToken.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_CreateAssetEnrollmentTokenRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_CreateAssetEnrollmentTokenResponse>(),
            handler: { request, context in
                try await self.createAssetEnrollmentToken(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_CertificateService.Method.CreateUserEnrollmentToken.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_CreateUserEnrollmentTokenRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_CreateUserEnrollmentTokenResponse>(),
            handler: { request, context in
                try await self.createUserEnrollmentToken(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_CertificateService.Method.GetCertificateMetadata.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_GetCertificateMetadataRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_GetCertificateMetadataResponse>(),
            handler: { request, context in
                try await self.getCertificateMetadata(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_CertificateService.ServiceProtocol {
    public func issueCertificate(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_IssueCertificateRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_IssueCertificateResponse> {
        let response = try await self.issueCertificate(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func refreshCertificate(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_RefreshCertificateRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_RefreshCertificateResponse> {
        let response = try await self.refreshCertificate(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func revokeCertificate(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_RevokeCertificateRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_RevokeCertificateResponse> {
        let response = try await self.revokeCertificate(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getCertificate(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetCertificateRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Certificate> {
        let response = try await self.getCertificate(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func listCertificates(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListCertificatesRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListCertificatesResponse> {
        let response = try await self.listCertificates(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return response
    }

    public func getCaBundle(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetCaBundleRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_GetCaBundleResponse> {
        let response = try await self.getCaBundle(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func createAssetEnrollmentToken(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_CreateAssetEnrollmentTokenRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_CreateAssetEnrollmentTokenResponse> {
        let response = try await self.createAssetEnrollmentToken(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func createUserEnrollmentToken(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_CreateUserEnrollmentTokenRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_CreateUserEnrollmentTokenResponse> {
        let response = try await self.createUserEnrollmentToken(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getCertificateMetadata(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetCertificateMetadataRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_GetCertificateMetadataResponse> {
        let response = try await self.getCertificateMetadata(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_CertificateService.SimpleServiceProtocol {
    public func issueCertificate(
        request: GRPCCore.ServerRequest<Wendycloud_V1_IssueCertificateRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_IssueCertificateResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_IssueCertificateResponse>(
            message: try await self.issueCertificate(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func refreshCertificate(
        request: GRPCCore.ServerRequest<Wendycloud_V1_RefreshCertificateRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_RefreshCertificateResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_RefreshCertificateResponse>(
            message: try await self.refreshCertificate(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func revokeCertificate(
        request: GRPCCore.ServerRequest<Wendycloud_V1_RevokeCertificateRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_RevokeCertificateResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_RevokeCertificateResponse>(
            message: try await self.revokeCertificate(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getCertificate(
        request: GRPCCore.ServerRequest<Wendycloud_V1_GetCertificateRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Certificate> {
        return GRPCCore.ServerResponse<Wendycloud_V1_Certificate>(
            message: try await self.getCertificate(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func listCertificates(
        request: GRPCCore.ServerRequest<Wendycloud_V1_ListCertificatesRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListCertificatesResponse> {
        return GRPCCore.StreamingServerResponse<Wendycloud_V1_ListCertificatesResponse>(
            metadata: [:],
            producer: { writer in
                try await self.listCertificates(
                    request: request.message,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    public func getCaBundle(
        request: GRPCCore.ServerRequest<Wendycloud_V1_GetCaBundleRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_GetCaBundleResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_GetCaBundleResponse>(
            message: try await self.getCaBundle(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func createAssetEnrollmentToken(
        request: GRPCCore.ServerRequest<Wendycloud_V1_CreateAssetEnrollmentTokenRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_CreateAssetEnrollmentTokenResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_CreateAssetEnrollmentTokenResponse>(
            message: try await self.createAssetEnrollmentToken(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func createUserEnrollmentToken(
        request: GRPCCore.ServerRequest<Wendycloud_V1_CreateUserEnrollmentTokenRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_CreateUserEnrollmentTokenResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_CreateUserEnrollmentTokenResponse>(
            message: try await self.createUserEnrollmentToken(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getCertificateMetadata(
        request: GRPCCore.ServerRequest<Wendycloud_V1_GetCertificateMetadataRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_GetCertificateMetadataResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_GetCertificateMetadataResponse>(
            message: try await self.getCertificateMetadata(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: wendycloud.v1.CertificateService (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_CertificateService {
    /// Generated client protocol for the "wendycloud.v1.CertificateService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Service for issuing, refreshing, revoking, and querying X.509 certificates
    /// > for assets within an organization. Backed by Google Cloud Certificate
    /// > Authority Service (CAS).
    public protocol ClientProtocol: Sendable {
        /// Call the "IssueCertificate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Issue a new X.509 certificate for an asset using a CSR (PEM PKCS#10).
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_IssueCertificateRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_IssueCertificateRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_IssueCertificateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func issueCertificate<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_IssueCertificateRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_IssueCertificateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_IssueCertificateResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_IssueCertificateResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RefreshCertificate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Refresh/rotate the certificate by submitting a new CSR for the same asset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_RefreshCertificateRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_RefreshCertificateRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_RefreshCertificateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func refreshCertificate<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_RefreshCertificateRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_RefreshCertificateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_RefreshCertificateResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_RefreshCertificateResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RevokeCertificate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Revoke an issued certificate.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_RevokeCertificateRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_RevokeCertificateRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_RevokeCertificateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func revokeCertificate<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_RevokeCertificateRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_RevokeCertificateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_RevokeCertificateResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_RevokeCertificateResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetCertificate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get current status/details of a certificate.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetCertificateRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetCertificateRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Certificate` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getCertificate<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetCertificateRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetCertificateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Certificate>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Certificate>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListCertificates" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List certificates for an asset (history and current) using server streaming
        /// > and offset/limit pagination (matches OrganizationService).
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListCertificatesRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListCertificatesRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListCertificatesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listCertificates<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListCertificatesRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListCertificatesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListCertificatesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Wendycloud_V1_ListCertificatesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetCaBundle" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Retrieve the CA trust bundle used to validate issued certificates.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetCaBundleRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetCaBundleRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_GetCaBundleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getCaBundle<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetCaBundleRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetCaBundleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_GetCaBundleResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_GetCaBundleResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateAssetEnrollmentToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > CLI-only: Create a short-lived enrollment token to give to an asset's `wendy-agent`
        /// > `wendy-agent` will use this token to ask for `IssueCertificateRequest` RPCs
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateAssetEnrollmentTokenRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_CreateAssetEnrollmentTokenRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_CreateAssetEnrollmentTokenResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createAssetEnrollmentToken<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_CreateAssetEnrollmentTokenRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_CreateAssetEnrollmentTokenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_CreateAssetEnrollmentTokenResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_CreateAssetEnrollmentTokenResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateUserEnrollmentToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Dashboard-only: Create a short-lived enrollment token for a user (for companion SDK or Wendy CLI).
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateUserEnrollmentTokenRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_CreateUserEnrollmentTokenRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_CreateUserEnrollmentTokenResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createUserEnrollmentToken<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_CreateUserEnrollmentTokenRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_CreateUserEnrollmentTokenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_CreateUserEnrollmentTokenResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_CreateUserEnrollmentTokenResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetCertificateMetadata" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get certificate metadata (organization, asset, or user) from the client's mTLS certificate
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetCertificateMetadataRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetCertificateMetadataRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_GetCertificateMetadataResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getCertificateMetadata<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetCertificateMetadataRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetCertificateMetadataRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_GetCertificateMetadataResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_GetCertificateMetadataResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "wendycloud.v1.CertificateService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Service for issuing, refreshing, revoking, and querying X.509 certificates
    /// > for assets within an organization. Backed by Google Cloud Certificate
    /// > Authority Service (CAS).
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "IssueCertificate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Issue a new X.509 certificate for an asset using a CSR (PEM PKCS#10).
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_IssueCertificateRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_IssueCertificateRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_IssueCertificateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func issueCertificate<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_IssueCertificateRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_IssueCertificateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_IssueCertificateResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_IssueCertificateResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_CertificateService.Method.IssueCertificate.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RefreshCertificate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Refresh/rotate the certificate by submitting a new CSR for the same asset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_RefreshCertificateRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_RefreshCertificateRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_RefreshCertificateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func refreshCertificate<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_RefreshCertificateRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_RefreshCertificateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_RefreshCertificateResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_RefreshCertificateResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_CertificateService.Method.RefreshCertificate.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RevokeCertificate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Revoke an issued certificate.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_RevokeCertificateRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_RevokeCertificateRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_RevokeCertificateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func revokeCertificate<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_RevokeCertificateRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_RevokeCertificateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_RevokeCertificateResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_RevokeCertificateResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_CertificateService.Method.RevokeCertificate.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetCertificate" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get current status/details of a certificate.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetCertificateRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetCertificateRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Certificate` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getCertificate<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetCertificateRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetCertificateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Certificate>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Certificate>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_CertificateService.Method.GetCertificate.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListCertificates" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List certificates for an asset (history and current) using server streaming
        /// > and offset/limit pagination (matches OrganizationService).
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListCertificatesRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListCertificatesRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListCertificatesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listCertificates<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListCertificatesRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListCertificatesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListCertificatesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Wendycloud_V1_ListCertificatesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.serverStreaming(
                request: request,
                descriptor: Wendycloud_V1_CertificateService.Method.ListCertificates.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetCaBundle" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Retrieve the CA trust bundle used to validate issued certificates.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetCaBundleRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetCaBundleRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_GetCaBundleResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getCaBundle<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetCaBundleRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetCaBundleRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_GetCaBundleResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_GetCaBundleResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_CertificateService.Method.GetCaBundle.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateAssetEnrollmentToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > CLI-only: Create a short-lived enrollment token to give to an asset's `wendy-agent`
        /// > `wendy-agent` will use this token to ask for `IssueCertificateRequest` RPCs
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateAssetEnrollmentTokenRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_CreateAssetEnrollmentTokenRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_CreateAssetEnrollmentTokenResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createAssetEnrollmentToken<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_CreateAssetEnrollmentTokenRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_CreateAssetEnrollmentTokenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_CreateAssetEnrollmentTokenResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_CreateAssetEnrollmentTokenResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_CertificateService.Method.CreateAssetEnrollmentToken.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateUserEnrollmentToken" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Dashboard-only: Create a short-lived enrollment token for a user (for companion SDK or Wendy CLI).
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateUserEnrollmentTokenRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_CreateUserEnrollmentTokenRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_CreateUserEnrollmentTokenResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createUserEnrollmentToken<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_CreateUserEnrollmentTokenRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_CreateUserEnrollmentTokenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_CreateUserEnrollmentTokenResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_CreateUserEnrollmentTokenResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_CertificateService.Method.CreateUserEnrollmentToken.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetCertificateMetadata" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get certificate metadata (organization, asset, or user) from the client's mTLS certificate
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetCertificateMetadataRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetCertificateMetadataRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_GetCertificateMetadataResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getCertificateMetadata<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetCertificateMetadataRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetCertificateMetadataRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_GetCertificateMetadataResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_GetCertificateMetadataResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_CertificateService.Method.GetCertificateMetadata.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_CertificateService.ClientProtocol {
    /// Call the "IssueCertificate" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Issue a new X.509 certificate for an asset using a CSR (PEM PKCS#10).
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_IssueCertificateRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func issueCertificate<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_IssueCertificateRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_IssueCertificateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.issueCertificate(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_IssueCertificateRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_IssueCertificateResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RefreshCertificate" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Refresh/rotate the certificate by submitting a new CSR for the same asset.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_RefreshCertificateRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func refreshCertificate<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_RefreshCertificateRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_RefreshCertificateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.refreshCertificate(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_RefreshCertificateRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_RefreshCertificateResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RevokeCertificate" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Revoke an issued certificate.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_RevokeCertificateRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func revokeCertificate<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_RevokeCertificateRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_RevokeCertificateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.revokeCertificate(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_RevokeCertificateRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_RevokeCertificateResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCertificate" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get current status/details of a certificate.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_GetCertificateRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getCertificate<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_GetCertificateRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Certificate>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getCertificate(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_GetCertificateRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_Certificate>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListCertificates" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > List certificates for an asset (history and current) using server streaming
    /// > and offset/limit pagination (matches OrganizationService).
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_ListCertificatesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listCertificates<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_ListCertificatesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Wendycloud_V1_ListCertificatesResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.listCertificates(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListCertificatesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListCertificatesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCaBundle" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Retrieve the CA trust bundle used to validate issued certificates.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_GetCaBundleRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getCaBundle<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_GetCaBundleRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_GetCaBundleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getCaBundle(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_GetCaBundleRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_GetCaBundleResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateAssetEnrollmentToken" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > CLI-only: Create a short-lived enrollment token to give to an asset's `wendy-agent`
    /// > `wendy-agent` will use this token to ask for `IssueCertificateRequest` RPCs
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_CreateAssetEnrollmentTokenRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createAssetEnrollmentToken<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_CreateAssetEnrollmentTokenRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_CreateAssetEnrollmentTokenResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createAssetEnrollmentToken(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_CreateAssetEnrollmentTokenRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_CreateAssetEnrollmentTokenResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateUserEnrollmentToken" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Dashboard-only: Create a short-lived enrollment token for a user (for companion SDK or Wendy CLI).
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_CreateUserEnrollmentTokenRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createUserEnrollmentToken<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_CreateUserEnrollmentTokenRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_CreateUserEnrollmentTokenResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createUserEnrollmentToken(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_CreateUserEnrollmentTokenRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_CreateUserEnrollmentTokenResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCertificateMetadata" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get certificate metadata (organization, asset, or user) from the client's mTLS certificate
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_GetCertificateMetadataRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getCertificateMetadata<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_GetCertificateMetadataRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_GetCertificateMetadataResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getCertificateMetadata(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_GetCertificateMetadataRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_GetCertificateMetadataResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_CertificateService.ClientProtocol {
    /// Call the "IssueCertificate" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Issue a new X.509 certificate for an asset using a CSR (PEM PKCS#10).
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func issueCertificate<Result>(
        _ message: Wendycloud_V1_IssueCertificateRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_IssueCertificateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_IssueCertificateRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.issueCertificate(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RefreshCertificate" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Refresh/rotate the certificate by submitting a new CSR for the same asset.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func refreshCertificate<Result>(
        _ message: Wendycloud_V1_RefreshCertificateRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_RefreshCertificateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_RefreshCertificateRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.refreshCertificate(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RevokeCertificate" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Revoke an issued certificate.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func revokeCertificate<Result>(
        _ message: Wendycloud_V1_RevokeCertificateRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_RevokeCertificateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_RevokeCertificateRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.revokeCertificate(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCertificate" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get current status/details of a certificate.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getCertificate<Result>(
        _ message: Wendycloud_V1_GetCertificateRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Certificate>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_GetCertificateRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getCertificate(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListCertificates" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > List certificates for an asset (history and current) using server streaming
    /// > and offset/limit pagination (matches OrganizationService).
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listCertificates<Result>(
        _ message: Wendycloud_V1_ListCertificatesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Wendycloud_V1_ListCertificatesResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_ListCertificatesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listCertificates(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCaBundle" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Retrieve the CA trust bundle used to validate issued certificates.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getCaBundle<Result>(
        _ message: Wendycloud_V1_GetCaBundleRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_GetCaBundleResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_GetCaBundleRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getCaBundle(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateAssetEnrollmentToken" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > CLI-only: Create a short-lived enrollment token to give to an asset's `wendy-agent`
    /// > `wendy-agent` will use this token to ask for `IssueCertificateRequest` RPCs
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createAssetEnrollmentToken<Result>(
        _ message: Wendycloud_V1_CreateAssetEnrollmentTokenRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_CreateAssetEnrollmentTokenResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_CreateAssetEnrollmentTokenRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createAssetEnrollmentToken(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateUserEnrollmentToken" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Dashboard-only: Create a short-lived enrollment token for a user (for companion SDK or Wendy CLI).
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createUserEnrollmentToken<Result>(
        _ message: Wendycloud_V1_CreateUserEnrollmentTokenRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_CreateUserEnrollmentTokenResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_CreateUserEnrollmentTokenRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createUserEnrollmentToken(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetCertificateMetadata" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get certificate metadata (organization, asset, or user) from the client's mTLS certificate
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getCertificateMetadata<Result>(
        _ message: Wendycloud_V1_GetCertificateMetadataRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_GetCertificateMetadataResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_GetCertificateMetadataRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getCertificateMetadata(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}