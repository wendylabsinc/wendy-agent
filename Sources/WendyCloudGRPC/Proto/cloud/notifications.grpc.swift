// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: cloud/notifications.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - wendycloud.v1.NotificationService

/// Namespace containing generated types for the "wendycloud.v1.NotificationService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public enum Wendycloud_V1_NotificationService {
    /// Service descriptor for the "wendycloud.v1.NotificationService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.NotificationService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "CreateNotification" metadata.
        public enum CreateNotification {
            /// Request type for "CreateNotification".
            public typealias Input = Wendycloud_V1_CreateNotificationRequest
            /// Response type for "CreateNotification".
            public typealias Output = Wendycloud_V1_Notification
            /// Descriptor for "CreateNotification".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.NotificationService"),
                method: "CreateNotification"
            )
        }
        /// Namespace for "ListNotifications" metadata.
        public enum ListNotifications {
            /// Request type for "ListNotifications".
            public typealias Input = Wendycloud_V1_ListNotificationsRequest
            /// Response type for "ListNotifications".
            public typealias Output = Wendycloud_V1_ListNotificationsResponse
            /// Descriptor for "ListNotifications".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.NotificationService"),
                method: "ListNotifications"
            )
        }
        /// Namespace for "GetNotification" metadata.
        public enum GetNotification {
            /// Request type for "GetNotification".
            public typealias Input = Wendycloud_V1_GetNotificationRequest
            /// Response type for "GetNotification".
            public typealias Output = Wendycloud_V1_Notification
            /// Descriptor for "GetNotification".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.NotificationService"),
                method: "GetNotification"
            )
        }
        /// Namespace for "DeleteNotification" metadata.
        public enum DeleteNotification {
            /// Request type for "DeleteNotification".
            public typealias Input = Wendycloud_V1_DeleteNotificationRequest
            /// Response type for "DeleteNotification".
            public typealias Output = Wendycloud_V1_DeleteNotificationResponse
            /// Descriptor for "DeleteNotification".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.NotificationService"),
                method: "DeleteNotification"
            )
        }
        /// Namespace for "MarkAsRead" metadata.
        public enum MarkAsRead {
            /// Request type for "MarkAsRead".
            public typealias Input = Wendycloud_V1_MarkAsReadRequest
            /// Response type for "MarkAsRead".
            public typealias Output = Wendycloud_V1_MarkAsReadResponse
            /// Descriptor for "MarkAsRead".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.NotificationService"),
                method: "MarkAsRead"
            )
        }
        /// Namespace for "GetUnreadCount" metadata.
        public enum GetUnreadCount {
            /// Request type for "GetUnreadCount".
            public typealias Input = Wendycloud_V1_GetUnreadCountRequest
            /// Response type for "GetUnreadCount".
            public typealias Output = Wendycloud_V1_GetUnreadCountResponse
            /// Descriptor for "GetUnreadCount".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.NotificationService"),
                method: "GetUnreadCount"
            )
        }
        /// Descriptors for all methods in the "wendycloud.v1.NotificationService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateNotification.descriptor,
            ListNotifications.descriptor,
            GetNotification.descriptor,
            DeleteNotification.descriptor,
            MarkAsRead.descriptor,
            GetUnreadCount.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "wendycloud.v1.NotificationService" service.
    public static let wendycloud_v1_NotificationService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.NotificationService")
}

// MARK: wendycloud.v1.NotificationService (server)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_NotificationService {
    /// Streaming variant of the service protocol for the "wendycloud.v1.NotificationService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "CreateNotification" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_CreateNotificationRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_Notification` messages.
        func createNotification(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_CreateNotificationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Notification>

        /// Handle the "ListNotifications" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_ListNotificationsRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_ListNotificationsResponse` messages.
        func listNotifications(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListNotificationsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListNotificationsResponse>

        /// Handle the "GetNotification" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_GetNotificationRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_Notification` messages.
        func getNotification(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetNotificationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Notification>

        /// Handle the "DeleteNotification" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_DeleteNotificationRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_DeleteNotificationResponse` messages.
        func deleteNotification(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_DeleteNotificationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_DeleteNotificationResponse>

        /// Handle the "MarkAsRead" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_MarkAsReadRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_MarkAsReadResponse` messages.
        func markAsRead(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_MarkAsReadRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_MarkAsReadResponse>

        /// Handle the "GetUnreadCount" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_GetUnreadCountRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_GetUnreadCountResponse` messages.
        func getUnreadCount(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetUnreadCountRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_GetUnreadCountResponse>
    }

    /// Service protocol for the "wendycloud.v1.NotificationService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    public protocol ServiceProtocol: Wendycloud_V1_NotificationService.StreamingServiceProtocol {
        /// Handle the "CreateNotification" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateNotificationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_Notification` message.
        func createNotification(
            request: GRPCCore.ServerRequest<Wendycloud_V1_CreateNotificationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Notification>

        /// Handle the "ListNotifications" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListNotificationsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_ListNotificationsResponse` message.
        func listNotifications(
            request: GRPCCore.ServerRequest<Wendycloud_V1_ListNotificationsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_ListNotificationsResponse>

        /// Handle the "GetNotification" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetNotificationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_Notification` message.
        func getNotification(
            request: GRPCCore.ServerRequest<Wendycloud_V1_GetNotificationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Notification>

        /// Handle the "DeleteNotification" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_DeleteNotificationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_DeleteNotificationResponse` message.
        func deleteNotification(
            request: GRPCCore.ServerRequest<Wendycloud_V1_DeleteNotificationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_DeleteNotificationResponse>

        /// Handle the "MarkAsRead" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_MarkAsReadRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_MarkAsReadResponse` message.
        func markAsRead(
            request: GRPCCore.ServerRequest<Wendycloud_V1_MarkAsReadRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_MarkAsReadResponse>

        /// Handle the "GetUnreadCount" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetUnreadCountRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_GetUnreadCountResponse` message.
        func getUnreadCount(
            request: GRPCCore.ServerRequest<Wendycloud_V1_GetUnreadCountRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_GetUnreadCountResponse>
    }

    /// Simple service protocol for the "wendycloud.v1.NotificationService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    public protocol SimpleServiceProtocol: Wendycloud_V1_NotificationService.ServiceProtocol {
        /// Handle the "CreateNotification" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_CreateNotificationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_Notification` to respond with.
        func createNotification(
            request: Wendycloud_V1_CreateNotificationRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_Notification

        /// Handle the "ListNotifications" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_ListNotificationsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_ListNotificationsResponse` to respond with.
        func listNotifications(
            request: Wendycloud_V1_ListNotificationsRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_ListNotificationsResponse

        /// Handle the "GetNotification" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_GetNotificationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_Notification` to respond with.
        func getNotification(
            request: Wendycloud_V1_GetNotificationRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_Notification

        /// Handle the "DeleteNotification" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_DeleteNotificationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_DeleteNotificationResponse` to respond with.
        func deleteNotification(
            request: Wendycloud_V1_DeleteNotificationRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_DeleteNotificationResponse

        /// Handle the "MarkAsRead" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_MarkAsReadRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_MarkAsReadResponse` to respond with.
        func markAsRead(
            request: Wendycloud_V1_MarkAsReadRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_MarkAsReadResponse

        /// Handle the "GetUnreadCount" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_GetUnreadCountRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_GetUnreadCountResponse` to respond with.
        func getUnreadCount(
            request: Wendycloud_V1_GetUnreadCountRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_GetUnreadCountResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_NotificationService.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Wendycloud_V1_NotificationService.Method.CreateNotification.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_CreateNotificationRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_Notification>(),
            handler: { request, context in
                try await self.createNotification(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_NotificationService.Method.ListNotifications.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListNotificationsRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListNotificationsResponse>(),
            handler: { request, context in
                try await self.listNotifications(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_NotificationService.Method.GetNotification.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_GetNotificationRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_Notification>(),
            handler: { request, context in
                try await self.getNotification(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_NotificationService.Method.DeleteNotification.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_DeleteNotificationRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_DeleteNotificationResponse>(),
            handler: { request, context in
                try await self.deleteNotification(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_NotificationService.Method.MarkAsRead.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_MarkAsReadRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_MarkAsReadResponse>(),
            handler: { request, context in
                try await self.markAsRead(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_NotificationService.Method.GetUnreadCount.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_GetUnreadCountRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_GetUnreadCountResponse>(),
            handler: { request, context in
                try await self.getUnreadCount(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_NotificationService.ServiceProtocol {
    public func createNotification(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_CreateNotificationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Notification> {
        let response = try await self.createNotification(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func listNotifications(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListNotificationsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListNotificationsResponse> {
        let response = try await self.listNotifications(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getNotification(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetNotificationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Notification> {
        let response = try await self.getNotification(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func deleteNotification(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_DeleteNotificationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_DeleteNotificationResponse> {
        let response = try await self.deleteNotification(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func markAsRead(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_MarkAsReadRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_MarkAsReadResponse> {
        let response = try await self.markAsRead(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getUnreadCount(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetUnreadCountRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_GetUnreadCountResponse> {
        let response = try await self.getUnreadCount(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_NotificationService.SimpleServiceProtocol {
    public func createNotification(
        request: GRPCCore.ServerRequest<Wendycloud_V1_CreateNotificationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Notification> {
        return GRPCCore.ServerResponse<Wendycloud_V1_Notification>(
            message: try await self.createNotification(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func listNotifications(
        request: GRPCCore.ServerRequest<Wendycloud_V1_ListNotificationsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_ListNotificationsResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_ListNotificationsResponse>(
            message: try await self.listNotifications(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getNotification(
        request: GRPCCore.ServerRequest<Wendycloud_V1_GetNotificationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Notification> {
        return GRPCCore.ServerResponse<Wendycloud_V1_Notification>(
            message: try await self.getNotification(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func deleteNotification(
        request: GRPCCore.ServerRequest<Wendycloud_V1_DeleteNotificationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_DeleteNotificationResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_DeleteNotificationResponse>(
            message: try await self.deleteNotification(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func markAsRead(
        request: GRPCCore.ServerRequest<Wendycloud_V1_MarkAsReadRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_MarkAsReadResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_MarkAsReadResponse>(
            message: try await self.markAsRead(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getUnreadCount(
        request: GRPCCore.ServerRequest<Wendycloud_V1_GetUnreadCountRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_GetUnreadCountResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_GetUnreadCountResponse>(
            message: try await self.getUnreadCount(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: wendycloud.v1.NotificationService (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_NotificationService {
    /// Generated client protocol for the "wendycloud.v1.NotificationService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    public protocol ClientProtocol: Sendable {
        /// Call the "CreateNotification" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateNotificationRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_CreateNotificationRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Notification` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createNotification<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_CreateNotificationRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_CreateNotificationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Notification>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Notification>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListNotifications" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListNotificationsRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListNotificationsRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListNotificationsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listNotifications<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListNotificationsRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListNotificationsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListNotificationsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListNotificationsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetNotification" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetNotificationRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetNotificationRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Notification` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getNotification<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetNotificationRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetNotificationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Notification>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Notification>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteNotification" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_DeleteNotificationRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_DeleteNotificationRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_DeleteNotificationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteNotification<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_DeleteNotificationRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_DeleteNotificationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_DeleteNotificationResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_DeleteNotificationResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "MarkAsRead" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_MarkAsReadRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_MarkAsReadRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_MarkAsReadResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func markAsRead<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_MarkAsReadRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_MarkAsReadRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_MarkAsReadResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_MarkAsReadResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetUnreadCount" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetUnreadCountRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetUnreadCountRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_GetUnreadCountResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getUnreadCount<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetUnreadCountRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetUnreadCountRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_GetUnreadCountResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_GetUnreadCountResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "wendycloud.v1.NotificationService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "CreateNotification" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateNotificationRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_CreateNotificationRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Notification` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createNotification<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_CreateNotificationRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_CreateNotificationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Notification>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Notification>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_NotificationService.Method.CreateNotification.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListNotifications" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListNotificationsRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListNotificationsRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListNotificationsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listNotifications<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListNotificationsRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListNotificationsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListNotificationsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListNotificationsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_NotificationService.Method.ListNotifications.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetNotification" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetNotificationRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetNotificationRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Notification` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getNotification<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetNotificationRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetNotificationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Notification>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Notification>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_NotificationService.Method.GetNotification.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteNotification" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_DeleteNotificationRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_DeleteNotificationRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_DeleteNotificationResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteNotification<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_DeleteNotificationRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_DeleteNotificationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_DeleteNotificationResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_DeleteNotificationResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_NotificationService.Method.DeleteNotification.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "MarkAsRead" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_MarkAsReadRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_MarkAsReadRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_MarkAsReadResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func markAsRead<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_MarkAsReadRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_MarkAsReadRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_MarkAsReadResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_MarkAsReadResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_NotificationService.Method.MarkAsRead.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetUnreadCount" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetUnreadCountRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetUnreadCountRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_GetUnreadCountResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getUnreadCount<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetUnreadCountRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetUnreadCountRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_GetUnreadCountResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_GetUnreadCountResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_NotificationService.Method.GetUnreadCount.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_NotificationService.ClientProtocol {
    /// Call the "CreateNotification" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_CreateNotificationRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createNotification<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_CreateNotificationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Notification>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createNotification(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_CreateNotificationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_Notification>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListNotifications" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_ListNotificationsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listNotifications<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_ListNotificationsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListNotificationsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listNotifications(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListNotificationsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListNotificationsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetNotification" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_GetNotificationRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getNotification<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_GetNotificationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Notification>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getNotification(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_GetNotificationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_Notification>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteNotification" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_DeleteNotificationRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteNotification<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_DeleteNotificationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_DeleteNotificationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteNotification(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_DeleteNotificationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_DeleteNotificationResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "MarkAsRead" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_MarkAsReadRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func markAsRead<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_MarkAsReadRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_MarkAsReadResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.markAsRead(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_MarkAsReadRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_MarkAsReadResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUnreadCount" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_GetUnreadCountRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getUnreadCount<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_GetUnreadCountRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_GetUnreadCountResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getUnreadCount(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_GetUnreadCountRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_GetUnreadCountResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_NotificationService.ClientProtocol {
    /// Call the "CreateNotification" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createNotification<Result>(
        _ message: Wendycloud_V1_CreateNotificationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Notification>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_CreateNotificationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createNotification(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListNotifications" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listNotifications<Result>(
        _ message: Wendycloud_V1_ListNotificationsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListNotificationsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_ListNotificationsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listNotifications(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetNotification" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getNotification<Result>(
        _ message: Wendycloud_V1_GetNotificationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Notification>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_GetNotificationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getNotification(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteNotification" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteNotification<Result>(
        _ message: Wendycloud_V1_DeleteNotificationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_DeleteNotificationResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_DeleteNotificationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteNotification(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "MarkAsRead" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func markAsRead<Result>(
        _ message: Wendycloud_V1_MarkAsReadRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_MarkAsReadResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_MarkAsReadRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.markAsRead(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUnreadCount" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getUnreadCount<Result>(
        _ message: Wendycloud_V1_GetUnreadCountRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_GetUnreadCountResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_GetUnreadCountRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getUnreadCount(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}