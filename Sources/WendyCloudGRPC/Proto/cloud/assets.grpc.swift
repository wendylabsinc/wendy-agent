// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: cloud/assets.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - wendycloud.v1.AssetService

/// Namespace containing generated types for the "wendycloud.v1.AssetService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public enum Wendycloud_V1_AssetService {
    /// Service descriptor for the "wendycloud.v1.AssetService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.AssetService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "CreateAsset" metadata.
        public enum CreateAsset {
            /// Request type for "CreateAsset".
            public typealias Input = Wendycloud_V1_CreateAssetRequest
            /// Response type for "CreateAsset".
            public typealias Output = Wendycloud_V1_Asset
            /// Descriptor for "CreateAsset".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.AssetService"),
                method: "CreateAsset"
            )
        }
        /// Namespace for "GetAsset" metadata.
        public enum GetAsset {
            /// Request type for "GetAsset".
            public typealias Input = Wendycloud_V1_GetAssetRequest
            /// Response type for "GetAsset".
            public typealias Output = Wendycloud_V1_Asset
            /// Descriptor for "GetAsset".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.AssetService"),
                method: "GetAsset"
            )
        }
        /// Namespace for "UpdateAsset" metadata.
        public enum UpdateAsset {
            /// Request type for "UpdateAsset".
            public typealias Input = Wendycloud_V1_UpdateAssetRequest
            /// Response type for "UpdateAsset".
            public typealias Output = Wendycloud_V1_Asset
            /// Descriptor for "UpdateAsset".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.AssetService"),
                method: "UpdateAsset"
            )
        }
        /// Namespace for "DeleteAsset" metadata.
        public enum DeleteAsset {
            /// Request type for "DeleteAsset".
            public typealias Input = Wendycloud_V1_DeleteAssetRequest
            /// Response type for "DeleteAsset".
            public typealias Output = Wendycloud_V1_DeleteAssetResponse
            /// Descriptor for "DeleteAsset".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.AssetService"),
                method: "DeleteAsset"
            )
        }
        /// Namespace for "ListAssets" metadata.
        public enum ListAssets {
            /// Request type for "ListAssets".
            public typealias Input = Wendycloud_V1_ListAssetsRequest
            /// Response type for "ListAssets".
            public typealias Output = Wendycloud_V1_ListAssetsResponse
            /// Descriptor for "ListAssets".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.AssetService"),
                method: "ListAssets"
            )
        }
        /// Namespace for "ListAssetChildren" metadata.
        public enum ListAssetChildren {
            /// Request type for "ListAssetChildren".
            public typealias Input = Wendycloud_V1_ListAssetChildrenRequest
            /// Response type for "ListAssetChildren".
            public typealias Output = Wendycloud_V1_ListAssetChildrenResponse
            /// Descriptor for "ListAssetChildren".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.AssetService"),
                method: "ListAssetChildren"
            )
        }
        /// Namespace for "GetAssetLineage" metadata.
        public enum GetAssetLineage {
            /// Request type for "GetAssetLineage".
            public typealias Input = Wendycloud_V1_GetAssetLineageRequest
            /// Response type for "GetAssetLineage".
            public typealias Output = Wendycloud_V1_GetAssetLineageResponse
            /// Descriptor for "GetAssetLineage".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.AssetService"),
                method: "GetAssetLineage"
            )
        }
        /// Descriptors for all methods in the "wendycloud.v1.AssetService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateAsset.descriptor,
            GetAsset.descriptor,
            UpdateAsset.descriptor,
            DeleteAsset.descriptor,
            ListAssets.descriptor,
            ListAssetChildren.descriptor,
            GetAssetLineage.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "wendycloud.v1.AssetService" service.
    public static let wendycloud_v1_AssetService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.AssetService")
}

// MARK: wendycloud.v1.AssetService (server)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_AssetService {
    /// Streaming variant of the service protocol for the "wendycloud.v1.AssetService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "CreateAsset" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_CreateAssetRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_Asset` messages.
        func createAsset(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_CreateAssetRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Asset>

        /// Handle the "GetAsset" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_GetAssetRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_Asset` messages.
        func getAsset(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetAssetRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Asset>

        /// Handle the "UpdateAsset" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_UpdateAssetRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_Asset` messages.
        func updateAsset(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_UpdateAssetRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Asset>

        /// Handle the "DeleteAsset" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_DeleteAssetRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_DeleteAssetResponse` messages.
        func deleteAsset(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_DeleteAssetRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_DeleteAssetResponse>

        /// Handle the "ListAssets" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_ListAssetsRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_ListAssetsResponse` messages.
        func listAssets(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListAssetsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListAssetsResponse>

        /// Handle the "ListAssetChildren" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_ListAssetChildrenRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_ListAssetChildrenResponse` messages.
        func listAssetChildren(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListAssetChildrenRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListAssetChildrenResponse>

        /// Handle the "GetAssetLineage" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_GetAssetLineageRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_GetAssetLineageResponse` messages.
        func getAssetLineage(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetAssetLineageRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_GetAssetLineageResponse>
    }

    /// Service protocol for the "wendycloud.v1.AssetService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    public protocol ServiceProtocol: Wendycloud_V1_AssetService.StreamingServiceProtocol {
        /// Handle the "CreateAsset" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateAssetRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_Asset` message.
        func createAsset(
            request: GRPCCore.ServerRequest<Wendycloud_V1_CreateAssetRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Asset>

        /// Handle the "GetAsset" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetAssetRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_Asset` message.
        func getAsset(
            request: GRPCCore.ServerRequest<Wendycloud_V1_GetAssetRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Asset>

        /// Handle the "UpdateAsset" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_UpdateAssetRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_Asset` message.
        func updateAsset(
            request: GRPCCore.ServerRequest<Wendycloud_V1_UpdateAssetRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Asset>

        /// Handle the "DeleteAsset" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_DeleteAssetRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_DeleteAssetResponse` message.
        func deleteAsset(
            request: GRPCCore.ServerRequest<Wendycloud_V1_DeleteAssetRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_DeleteAssetResponse>

        /// Handle the "ListAssets" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListAssetsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_ListAssetsResponse` message.
        func listAssets(
            request: GRPCCore.ServerRequest<Wendycloud_V1_ListAssetsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_ListAssetsResponse>

        /// Handle the "ListAssetChildren" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListAssetChildrenRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_ListAssetChildrenResponse` message.
        func listAssetChildren(
            request: GRPCCore.ServerRequest<Wendycloud_V1_ListAssetChildrenRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_ListAssetChildrenResponse>

        /// Handle the "GetAssetLineage" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetAssetLineageRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_GetAssetLineageResponse` message.
        func getAssetLineage(
            request: GRPCCore.ServerRequest<Wendycloud_V1_GetAssetLineageRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_GetAssetLineageResponse>
    }

    /// Simple service protocol for the "wendycloud.v1.AssetService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    public protocol SimpleServiceProtocol: Wendycloud_V1_AssetService.ServiceProtocol {
        /// Handle the "CreateAsset" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_CreateAssetRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_Asset` to respond with.
        func createAsset(
            request: Wendycloud_V1_CreateAssetRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_Asset

        /// Handle the "GetAsset" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_GetAssetRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_Asset` to respond with.
        func getAsset(
            request: Wendycloud_V1_GetAssetRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_Asset

        /// Handle the "UpdateAsset" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_UpdateAssetRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_Asset` to respond with.
        func updateAsset(
            request: Wendycloud_V1_UpdateAssetRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_Asset

        /// Handle the "DeleteAsset" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_DeleteAssetRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_DeleteAssetResponse` to respond with.
        func deleteAsset(
            request: Wendycloud_V1_DeleteAssetRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_DeleteAssetResponse

        /// Handle the "ListAssets" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_ListAssetsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_ListAssetsResponse` to respond with.
        func listAssets(
            request: Wendycloud_V1_ListAssetsRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_ListAssetsResponse

        /// Handle the "ListAssetChildren" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_ListAssetChildrenRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_ListAssetChildrenResponse` to respond with.
        func listAssetChildren(
            request: Wendycloud_V1_ListAssetChildrenRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_ListAssetChildrenResponse

        /// Handle the "GetAssetLineage" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_GetAssetLineageRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_GetAssetLineageResponse` to respond with.
        func getAssetLineage(
            request: Wendycloud_V1_GetAssetLineageRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_GetAssetLineageResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_AssetService.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Wendycloud_V1_AssetService.Method.CreateAsset.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_CreateAssetRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_Asset>(),
            handler: { request, context in
                try await self.createAsset(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_AssetService.Method.GetAsset.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_GetAssetRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_Asset>(),
            handler: { request, context in
                try await self.getAsset(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_AssetService.Method.UpdateAsset.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_UpdateAssetRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_Asset>(),
            handler: { request, context in
                try await self.updateAsset(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_AssetService.Method.DeleteAsset.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_DeleteAssetRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_DeleteAssetResponse>(),
            handler: { request, context in
                try await self.deleteAsset(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_AssetService.Method.ListAssets.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListAssetsRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListAssetsResponse>(),
            handler: { request, context in
                try await self.listAssets(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_AssetService.Method.ListAssetChildren.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListAssetChildrenRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListAssetChildrenResponse>(),
            handler: { request, context in
                try await self.listAssetChildren(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_AssetService.Method.GetAssetLineage.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_GetAssetLineageRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_GetAssetLineageResponse>(),
            handler: { request, context in
                try await self.getAssetLineage(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_AssetService.ServiceProtocol {
    public func createAsset(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_CreateAssetRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Asset> {
        let response = try await self.createAsset(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getAsset(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetAssetRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Asset> {
        let response = try await self.getAsset(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func updateAsset(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_UpdateAssetRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Asset> {
        let response = try await self.updateAsset(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func deleteAsset(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_DeleteAssetRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_DeleteAssetResponse> {
        let response = try await self.deleteAsset(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func listAssets(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListAssetsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListAssetsResponse> {
        let response = try await self.listAssets(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func listAssetChildren(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListAssetChildrenRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListAssetChildrenResponse> {
        let response = try await self.listAssetChildren(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getAssetLineage(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetAssetLineageRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_GetAssetLineageResponse> {
        let response = try await self.getAssetLineage(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_AssetService.SimpleServiceProtocol {
    public func createAsset(
        request: GRPCCore.ServerRequest<Wendycloud_V1_CreateAssetRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Asset> {
        return GRPCCore.ServerResponse<Wendycloud_V1_Asset>(
            message: try await self.createAsset(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getAsset(
        request: GRPCCore.ServerRequest<Wendycloud_V1_GetAssetRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Asset> {
        return GRPCCore.ServerResponse<Wendycloud_V1_Asset>(
            message: try await self.getAsset(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func updateAsset(
        request: GRPCCore.ServerRequest<Wendycloud_V1_UpdateAssetRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Asset> {
        return GRPCCore.ServerResponse<Wendycloud_V1_Asset>(
            message: try await self.updateAsset(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func deleteAsset(
        request: GRPCCore.ServerRequest<Wendycloud_V1_DeleteAssetRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_DeleteAssetResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_DeleteAssetResponse>(
            message: try await self.deleteAsset(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func listAssets(
        request: GRPCCore.ServerRequest<Wendycloud_V1_ListAssetsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_ListAssetsResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_ListAssetsResponse>(
            message: try await self.listAssets(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func listAssetChildren(
        request: GRPCCore.ServerRequest<Wendycloud_V1_ListAssetChildrenRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_ListAssetChildrenResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_ListAssetChildrenResponse>(
            message: try await self.listAssetChildren(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getAssetLineage(
        request: GRPCCore.ServerRequest<Wendycloud_V1_GetAssetLineageRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_GetAssetLineageResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_GetAssetLineageResponse>(
            message: try await self.getAssetLineage(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: wendycloud.v1.AssetService (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_AssetService {
    /// Generated client protocol for the "wendycloud.v1.AssetService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    public protocol ClientProtocol: Sendable {
        /// Call the "CreateAsset" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateAssetRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_CreateAssetRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Asset` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createAsset<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_CreateAssetRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_CreateAssetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Asset>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Asset>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetAsset" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetAssetRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetAssetRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Asset` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getAsset<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetAssetRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetAssetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Asset>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Asset>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateAsset" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_UpdateAssetRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_UpdateAssetRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Asset` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateAsset<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_UpdateAssetRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_UpdateAssetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Asset>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Asset>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteAsset" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_DeleteAssetRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_DeleteAssetRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_DeleteAssetResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteAsset<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_DeleteAssetRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_DeleteAssetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_DeleteAssetResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_DeleteAssetResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListAssets" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListAssetsRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListAssetsRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListAssetsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listAssets<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListAssetsRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListAssetsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListAssetsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListAssetsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListAssetChildren" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListAssetChildrenRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListAssetChildrenRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListAssetChildrenResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listAssetChildren<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListAssetChildrenRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListAssetChildrenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListAssetChildrenResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListAssetChildrenResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetAssetLineage" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetAssetLineageRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetAssetLineageRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_GetAssetLineageResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getAssetLineage<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetAssetLineageRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetAssetLineageRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_GetAssetLineageResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_GetAssetLineageResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "wendycloud.v1.AssetService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "CreateAsset" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateAssetRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_CreateAssetRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Asset` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createAsset<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_CreateAssetRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_CreateAssetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Asset>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Asset>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_AssetService.Method.CreateAsset.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetAsset" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetAssetRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetAssetRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Asset` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getAsset<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetAssetRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetAssetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Asset>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Asset>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_AssetService.Method.GetAsset.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateAsset" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_UpdateAssetRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_UpdateAssetRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Asset` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateAsset<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_UpdateAssetRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_UpdateAssetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Asset>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Asset>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_AssetService.Method.UpdateAsset.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteAsset" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_DeleteAssetRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_DeleteAssetRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_DeleteAssetResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteAsset<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_DeleteAssetRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_DeleteAssetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_DeleteAssetResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_DeleteAssetResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_AssetService.Method.DeleteAsset.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListAssets" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListAssetsRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListAssetsRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListAssetsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listAssets<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListAssetsRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListAssetsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListAssetsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListAssetsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_AssetService.Method.ListAssets.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListAssetChildren" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListAssetChildrenRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListAssetChildrenRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListAssetChildrenResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listAssetChildren<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListAssetChildrenRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListAssetChildrenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListAssetChildrenResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListAssetChildrenResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_AssetService.Method.ListAssetChildren.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetAssetLineage" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetAssetLineageRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetAssetLineageRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_GetAssetLineageResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getAssetLineage<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetAssetLineageRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetAssetLineageRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_GetAssetLineageResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_GetAssetLineageResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_AssetService.Method.GetAssetLineage.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_AssetService.ClientProtocol {
    /// Call the "CreateAsset" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_CreateAssetRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createAsset<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_CreateAssetRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Asset>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createAsset(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_CreateAssetRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_Asset>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAsset" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_GetAssetRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getAsset<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_GetAssetRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Asset>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getAsset(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_GetAssetRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_Asset>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateAsset" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_UpdateAssetRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateAsset<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_UpdateAssetRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Asset>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateAsset(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_UpdateAssetRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_Asset>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteAsset" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_DeleteAssetRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteAsset<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_DeleteAssetRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_DeleteAssetResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteAsset(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_DeleteAssetRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_DeleteAssetResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListAssets" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_ListAssetsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listAssets<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_ListAssetsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListAssetsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listAssets(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListAssetsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListAssetsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListAssetChildren" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_ListAssetChildrenRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listAssetChildren<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_ListAssetChildrenRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListAssetChildrenResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listAssetChildren(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListAssetChildrenRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListAssetChildrenResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAssetLineage" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_GetAssetLineageRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getAssetLineage<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_GetAssetLineageRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_GetAssetLineageResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getAssetLineage(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_GetAssetLineageRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_GetAssetLineageResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_AssetService.ClientProtocol {
    /// Call the "CreateAsset" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createAsset<Result>(
        _ message: Wendycloud_V1_CreateAssetRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Asset>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_CreateAssetRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createAsset(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAsset" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getAsset<Result>(
        _ message: Wendycloud_V1_GetAssetRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Asset>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_GetAssetRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getAsset(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateAsset" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateAsset<Result>(
        _ message: Wendycloud_V1_UpdateAssetRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Asset>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_UpdateAssetRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateAsset(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteAsset" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteAsset<Result>(
        _ message: Wendycloud_V1_DeleteAssetRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_DeleteAssetResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_DeleteAssetRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteAsset(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListAssets" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listAssets<Result>(
        _ message: Wendycloud_V1_ListAssetsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListAssetsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_ListAssetsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listAssets(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListAssetChildren" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listAssetChildren<Result>(
        _ message: Wendycloud_V1_ListAssetChildrenRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListAssetChildrenResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_ListAssetChildrenRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listAssetChildren(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAssetLineage" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getAssetLineage<Result>(
        _ message: Wendycloud_V1_GetAssetLineageRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_GetAssetLineageResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_GetAssetLineageRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getAssetLineage(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}