// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: cloud/deployments.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - wendycloud.v1.DeploymentService

/// Namespace containing generated types for the "wendycloud.v1.DeploymentService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public enum Wendycloud_V1_DeploymentService {
    /// Service descriptor for the "wendycloud.v1.DeploymentService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.DeploymentService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "CreateDeployment" metadata.
        public enum CreateDeployment {
            /// Request type for "CreateDeployment".
            public typealias Input = Wendycloud_V1_CreateDeploymentRequest
            /// Response type for "CreateDeployment".
            public typealias Output = Wendycloud_V1_Deployment
            /// Descriptor for "CreateDeployment".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.DeploymentService"),
                method: "CreateDeployment"
            )
        }
        /// Namespace for "GetDeployment" metadata.
        public enum GetDeployment {
            /// Request type for "GetDeployment".
            public typealias Input = Wendycloud_V1_GetDeploymentRequest
            /// Response type for "GetDeployment".
            public typealias Output = Wendycloud_V1_Deployment
            /// Descriptor for "GetDeployment".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.DeploymentService"),
                method: "GetDeployment"
            )
        }
        /// Namespace for "ListDeployments" metadata.
        public enum ListDeployments {
            /// Request type for "ListDeployments".
            public typealias Input = Wendycloud_V1_ListDeploymentsRequest
            /// Response type for "ListDeployments".
            public typealias Output = Wendycloud_V1_ListDeploymentsResponse
            /// Descriptor for "ListDeployments".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.DeploymentService"),
                method: "ListDeployments"
            )
        }
        /// Namespace for "CancelDeployment" metadata.
        public enum CancelDeployment {
            /// Request type for "CancelDeployment".
            public typealias Input = Wendycloud_V1_CancelDeploymentRequest
            /// Response type for "CancelDeployment".
            public typealias Output = Wendycloud_V1_Deployment
            /// Descriptor for "CancelDeployment".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.DeploymentService"),
                method: "CancelDeployment"
            )
        }
        /// Namespace for "GetDeploymentTarget" metadata.
        public enum GetDeploymentTarget {
            /// Request type for "GetDeploymentTarget".
            public typealias Input = Wendycloud_V1_GetDeploymentTargetRequest
            /// Response type for "GetDeploymentTarget".
            public typealias Output = Wendycloud_V1_DeploymentTarget
            /// Descriptor for "GetDeploymentTarget".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.DeploymentService"),
                method: "GetDeploymentTarget"
            )
        }
        /// Namespace for "ListDeploymentTargets" metadata.
        public enum ListDeploymentTargets {
            /// Request type for "ListDeploymentTargets".
            public typealias Input = Wendycloud_V1_ListDeploymentTargetsRequest
            /// Response type for "ListDeploymentTargets".
            public typealias Output = Wendycloud_V1_ListDeploymentTargetsResponse
            /// Descriptor for "ListDeploymentTargets".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.DeploymentService"),
                method: "ListDeploymentTargets"
            )
        }
        /// Namespace for "UpdateDeploymentTarget" metadata.
        public enum UpdateDeploymentTarget {
            /// Request type for "UpdateDeploymentTarget".
            public typealias Input = Wendycloud_V1_UpdateDeploymentTargetRequest
            /// Response type for "UpdateDeploymentTarget".
            public typealias Output = Wendycloud_V1_DeploymentTarget
            /// Descriptor for "UpdateDeploymentTarget".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.DeploymentService"),
                method: "UpdateDeploymentTarget"
            )
        }
        /// Namespace for "RetryFailedDeployment" metadata.
        public enum RetryFailedDeployment {
            /// Request type for "RetryFailedDeployment".
            public typealias Input = Wendycloud_V1_RetryFailedDeploymentRequest
            /// Response type for "RetryFailedDeployment".
            public typealias Output = Wendycloud_V1_Deployment
            /// Descriptor for "RetryFailedDeployment".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.DeploymentService"),
                method: "RetryFailedDeployment"
            )
        }
        /// Descriptors for all methods in the "wendycloud.v1.DeploymentService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateDeployment.descriptor,
            GetDeployment.descriptor,
            ListDeployments.descriptor,
            CancelDeployment.descriptor,
            GetDeploymentTarget.descriptor,
            ListDeploymentTargets.descriptor,
            UpdateDeploymentTarget.descriptor,
            RetryFailedDeployment.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "wendycloud.v1.DeploymentService" service.
    public static let wendycloud_v1_DeploymentService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.DeploymentService")
}

// MARK: wendycloud.v1.DeploymentService (server)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_DeploymentService {
    /// Streaming variant of the service protocol for the "wendycloud.v1.DeploymentService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "CreateDeployment" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_CreateDeploymentRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_Deployment` messages.
        func createDeployment(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_CreateDeploymentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Deployment>

        /// Handle the "GetDeployment" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_GetDeploymentRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_Deployment` messages.
        func getDeployment(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetDeploymentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Deployment>

        /// Handle the "ListDeployments" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_ListDeploymentsRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_ListDeploymentsResponse` messages.
        func listDeployments(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListDeploymentsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListDeploymentsResponse>

        /// Handle the "CancelDeployment" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_CancelDeploymentRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_Deployment` messages.
        func cancelDeployment(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_CancelDeploymentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Deployment>

        /// Handle the "GetDeploymentTarget" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_GetDeploymentTargetRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_DeploymentTarget` messages.
        func getDeploymentTarget(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetDeploymentTargetRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_DeploymentTarget>

        /// Handle the "ListDeploymentTargets" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_ListDeploymentTargetsRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_ListDeploymentTargetsResponse` messages.
        func listDeploymentTargets(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListDeploymentTargetsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListDeploymentTargetsResponse>

        /// Handle the "UpdateDeploymentTarget" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_UpdateDeploymentTargetRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_DeploymentTarget` messages.
        func updateDeploymentTarget(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_UpdateDeploymentTargetRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_DeploymentTarget>

        /// Handle the "RetryFailedDeployment" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_RetryFailedDeploymentRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_Deployment` messages.
        func retryFailedDeployment(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_RetryFailedDeploymentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Deployment>
    }

    /// Service protocol for the "wendycloud.v1.DeploymentService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    public protocol ServiceProtocol: Wendycloud_V1_DeploymentService.StreamingServiceProtocol {
        /// Handle the "CreateDeployment" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateDeploymentRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_Deployment` message.
        func createDeployment(
            request: GRPCCore.ServerRequest<Wendycloud_V1_CreateDeploymentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Deployment>

        /// Handle the "GetDeployment" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetDeploymentRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_Deployment` message.
        func getDeployment(
            request: GRPCCore.ServerRequest<Wendycloud_V1_GetDeploymentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Deployment>

        /// Handle the "ListDeployments" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListDeploymentsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_ListDeploymentsResponse` message.
        func listDeployments(
            request: GRPCCore.ServerRequest<Wendycloud_V1_ListDeploymentsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_ListDeploymentsResponse>

        /// Handle the "CancelDeployment" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CancelDeploymentRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_Deployment` message.
        func cancelDeployment(
            request: GRPCCore.ServerRequest<Wendycloud_V1_CancelDeploymentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Deployment>

        /// Handle the "GetDeploymentTarget" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetDeploymentTargetRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_DeploymentTarget` message.
        func getDeploymentTarget(
            request: GRPCCore.ServerRequest<Wendycloud_V1_GetDeploymentTargetRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_DeploymentTarget>

        /// Handle the "ListDeploymentTargets" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListDeploymentTargetsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_ListDeploymentTargetsResponse` message.
        func listDeploymentTargets(
            request: GRPCCore.ServerRequest<Wendycloud_V1_ListDeploymentTargetsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_ListDeploymentTargetsResponse>

        /// Handle the "UpdateDeploymentTarget" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_UpdateDeploymentTargetRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_DeploymentTarget` message.
        func updateDeploymentTarget(
            request: GRPCCore.ServerRequest<Wendycloud_V1_UpdateDeploymentTargetRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_DeploymentTarget>

        /// Handle the "RetryFailedDeployment" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_RetryFailedDeploymentRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_Deployment` message.
        func retryFailedDeployment(
            request: GRPCCore.ServerRequest<Wendycloud_V1_RetryFailedDeploymentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Deployment>
    }

    /// Simple service protocol for the "wendycloud.v1.DeploymentService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    public protocol SimpleServiceProtocol: Wendycloud_V1_DeploymentService.ServiceProtocol {
        /// Handle the "CreateDeployment" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_CreateDeploymentRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_Deployment` to respond with.
        func createDeployment(
            request: Wendycloud_V1_CreateDeploymentRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_Deployment

        /// Handle the "GetDeployment" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_GetDeploymentRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_Deployment` to respond with.
        func getDeployment(
            request: Wendycloud_V1_GetDeploymentRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_Deployment

        /// Handle the "ListDeployments" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_ListDeploymentsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_ListDeploymentsResponse` to respond with.
        func listDeployments(
            request: Wendycloud_V1_ListDeploymentsRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_ListDeploymentsResponse

        /// Handle the "CancelDeployment" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_CancelDeploymentRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_Deployment` to respond with.
        func cancelDeployment(
            request: Wendycloud_V1_CancelDeploymentRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_Deployment

        /// Handle the "GetDeploymentTarget" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_GetDeploymentTargetRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_DeploymentTarget` to respond with.
        func getDeploymentTarget(
            request: Wendycloud_V1_GetDeploymentTargetRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_DeploymentTarget

        /// Handle the "ListDeploymentTargets" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_ListDeploymentTargetsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_ListDeploymentTargetsResponse` to respond with.
        func listDeploymentTargets(
            request: Wendycloud_V1_ListDeploymentTargetsRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_ListDeploymentTargetsResponse

        /// Handle the "UpdateDeploymentTarget" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_UpdateDeploymentTargetRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_DeploymentTarget` to respond with.
        func updateDeploymentTarget(
            request: Wendycloud_V1_UpdateDeploymentTargetRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_DeploymentTarget

        /// Handle the "RetryFailedDeployment" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_RetryFailedDeploymentRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_Deployment` to respond with.
        func retryFailedDeployment(
            request: Wendycloud_V1_RetryFailedDeploymentRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_Deployment
    }
}

// Default implementation of 'registerMethods(with:)'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_DeploymentService.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Wendycloud_V1_DeploymentService.Method.CreateDeployment.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_CreateDeploymentRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_Deployment>(),
            handler: { request, context in
                try await self.createDeployment(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_DeploymentService.Method.GetDeployment.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_GetDeploymentRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_Deployment>(),
            handler: { request, context in
                try await self.getDeployment(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_DeploymentService.Method.ListDeployments.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListDeploymentsRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListDeploymentsResponse>(),
            handler: { request, context in
                try await self.listDeployments(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_DeploymentService.Method.CancelDeployment.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_CancelDeploymentRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_Deployment>(),
            handler: { request, context in
                try await self.cancelDeployment(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_DeploymentService.Method.GetDeploymentTarget.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_GetDeploymentTargetRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_DeploymentTarget>(),
            handler: { request, context in
                try await self.getDeploymentTarget(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_DeploymentService.Method.ListDeploymentTargets.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListDeploymentTargetsRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListDeploymentTargetsResponse>(),
            handler: { request, context in
                try await self.listDeploymentTargets(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_DeploymentService.Method.UpdateDeploymentTarget.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_UpdateDeploymentTargetRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_DeploymentTarget>(),
            handler: { request, context in
                try await self.updateDeploymentTarget(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_DeploymentService.Method.RetryFailedDeployment.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_RetryFailedDeploymentRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_Deployment>(),
            handler: { request, context in
                try await self.retryFailedDeployment(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_DeploymentService.ServiceProtocol {
    public func createDeployment(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_CreateDeploymentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Deployment> {
        let response = try await self.createDeployment(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getDeployment(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetDeploymentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Deployment> {
        let response = try await self.getDeployment(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func listDeployments(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListDeploymentsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListDeploymentsResponse> {
        let response = try await self.listDeployments(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func cancelDeployment(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_CancelDeploymentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Deployment> {
        let response = try await self.cancelDeployment(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getDeploymentTarget(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetDeploymentTargetRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_DeploymentTarget> {
        let response = try await self.getDeploymentTarget(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func listDeploymentTargets(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListDeploymentTargetsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListDeploymentTargetsResponse> {
        let response = try await self.listDeploymentTargets(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func updateDeploymentTarget(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_UpdateDeploymentTargetRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_DeploymentTarget> {
        let response = try await self.updateDeploymentTarget(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func retryFailedDeployment(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_RetryFailedDeploymentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_Deployment> {
        let response = try await self.retryFailedDeployment(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_DeploymentService.SimpleServiceProtocol {
    public func createDeployment(
        request: GRPCCore.ServerRequest<Wendycloud_V1_CreateDeploymentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Deployment> {
        return GRPCCore.ServerResponse<Wendycloud_V1_Deployment>(
            message: try await self.createDeployment(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getDeployment(
        request: GRPCCore.ServerRequest<Wendycloud_V1_GetDeploymentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Deployment> {
        return GRPCCore.ServerResponse<Wendycloud_V1_Deployment>(
            message: try await self.getDeployment(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func listDeployments(
        request: GRPCCore.ServerRequest<Wendycloud_V1_ListDeploymentsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_ListDeploymentsResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_ListDeploymentsResponse>(
            message: try await self.listDeployments(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func cancelDeployment(
        request: GRPCCore.ServerRequest<Wendycloud_V1_CancelDeploymentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Deployment> {
        return GRPCCore.ServerResponse<Wendycloud_V1_Deployment>(
            message: try await self.cancelDeployment(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getDeploymentTarget(
        request: GRPCCore.ServerRequest<Wendycloud_V1_GetDeploymentTargetRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_DeploymentTarget> {
        return GRPCCore.ServerResponse<Wendycloud_V1_DeploymentTarget>(
            message: try await self.getDeploymentTarget(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func listDeploymentTargets(
        request: GRPCCore.ServerRequest<Wendycloud_V1_ListDeploymentTargetsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_ListDeploymentTargetsResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_ListDeploymentTargetsResponse>(
            message: try await self.listDeploymentTargets(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func updateDeploymentTarget(
        request: GRPCCore.ServerRequest<Wendycloud_V1_UpdateDeploymentTargetRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_DeploymentTarget> {
        return GRPCCore.ServerResponse<Wendycloud_V1_DeploymentTarget>(
            message: try await self.updateDeploymentTarget(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func retryFailedDeployment(
        request: GRPCCore.ServerRequest<Wendycloud_V1_RetryFailedDeploymentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_Deployment> {
        return GRPCCore.ServerResponse<Wendycloud_V1_Deployment>(
            message: try await self.retryFailedDeployment(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: wendycloud.v1.DeploymentService (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_DeploymentService {
    /// Generated client protocol for the "wendycloud.v1.DeploymentService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    public protocol ClientProtocol: Sendable {
        /// Call the "CreateDeployment" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateDeploymentRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_CreateDeploymentRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Deployment` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createDeployment<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_CreateDeploymentRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_CreateDeploymentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Deployment>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Deployment>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetDeployment" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetDeploymentRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetDeploymentRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Deployment` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getDeployment<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetDeploymentRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetDeploymentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Deployment>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Deployment>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListDeployments" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListDeploymentsRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListDeploymentsRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListDeploymentsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listDeployments<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListDeploymentsRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListDeploymentsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListDeploymentsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListDeploymentsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CancelDeployment" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CancelDeploymentRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_CancelDeploymentRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Deployment` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func cancelDeployment<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_CancelDeploymentRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_CancelDeploymentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Deployment>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Deployment>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetDeploymentTarget" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetDeploymentTargetRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetDeploymentTargetRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_DeploymentTarget` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getDeploymentTarget<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetDeploymentTargetRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetDeploymentTargetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_DeploymentTarget>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_DeploymentTarget>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListDeploymentTargets" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListDeploymentTargetsRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListDeploymentTargetsRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListDeploymentTargetsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listDeploymentTargets<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListDeploymentTargetsRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListDeploymentTargetsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListDeploymentTargetsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListDeploymentTargetsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateDeploymentTarget" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_UpdateDeploymentTargetRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_UpdateDeploymentTargetRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_DeploymentTarget` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateDeploymentTarget<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_UpdateDeploymentTargetRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_UpdateDeploymentTargetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_DeploymentTarget>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_DeploymentTarget>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RetryFailedDeployment" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_RetryFailedDeploymentRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_RetryFailedDeploymentRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Deployment` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func retryFailedDeployment<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_RetryFailedDeploymentRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_RetryFailedDeploymentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Deployment>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Deployment>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "wendycloud.v1.DeploymentService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "CreateDeployment" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateDeploymentRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_CreateDeploymentRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Deployment` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createDeployment<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_CreateDeploymentRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_CreateDeploymentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Deployment>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Deployment>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_DeploymentService.Method.CreateDeployment.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetDeployment" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetDeploymentRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetDeploymentRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Deployment` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getDeployment<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetDeploymentRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetDeploymentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Deployment>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Deployment>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_DeploymentService.Method.GetDeployment.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListDeployments" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListDeploymentsRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListDeploymentsRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListDeploymentsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listDeployments<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListDeploymentsRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListDeploymentsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListDeploymentsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListDeploymentsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_DeploymentService.Method.ListDeployments.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CancelDeployment" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CancelDeploymentRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_CancelDeploymentRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Deployment` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func cancelDeployment<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_CancelDeploymentRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_CancelDeploymentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Deployment>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Deployment>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_DeploymentService.Method.CancelDeployment.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetDeploymentTarget" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetDeploymentTargetRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetDeploymentTargetRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_DeploymentTarget` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getDeploymentTarget<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetDeploymentTargetRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetDeploymentTargetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_DeploymentTarget>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_DeploymentTarget>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_DeploymentService.Method.GetDeploymentTarget.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListDeploymentTargets" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListDeploymentTargetsRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListDeploymentTargetsRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListDeploymentTargetsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listDeploymentTargets<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListDeploymentTargetsRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListDeploymentTargetsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListDeploymentTargetsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListDeploymentTargetsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_DeploymentService.Method.ListDeploymentTargets.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateDeploymentTarget" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_UpdateDeploymentTargetRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_UpdateDeploymentTargetRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_DeploymentTarget` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateDeploymentTarget<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_UpdateDeploymentTargetRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_UpdateDeploymentTargetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_DeploymentTarget>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_DeploymentTarget>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_DeploymentService.Method.UpdateDeploymentTarget.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RetryFailedDeployment" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_RetryFailedDeploymentRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_RetryFailedDeploymentRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_Deployment` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func retryFailedDeployment<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_RetryFailedDeploymentRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_RetryFailedDeploymentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_Deployment>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Deployment>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_DeploymentService.Method.RetryFailedDeployment.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_DeploymentService.ClientProtocol {
    /// Call the "CreateDeployment" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_CreateDeploymentRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createDeployment<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_CreateDeploymentRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Deployment>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createDeployment(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_CreateDeploymentRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_Deployment>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetDeployment" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_GetDeploymentRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getDeployment<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_GetDeploymentRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Deployment>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getDeployment(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_GetDeploymentRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_Deployment>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListDeployments" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_ListDeploymentsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listDeployments<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_ListDeploymentsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListDeploymentsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listDeployments(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListDeploymentsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListDeploymentsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CancelDeployment" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_CancelDeploymentRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func cancelDeployment<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_CancelDeploymentRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Deployment>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.cancelDeployment(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_CancelDeploymentRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_Deployment>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetDeploymentTarget" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_GetDeploymentTargetRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getDeploymentTarget<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_GetDeploymentTargetRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_DeploymentTarget>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getDeploymentTarget(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_GetDeploymentTargetRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_DeploymentTarget>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListDeploymentTargets" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_ListDeploymentTargetsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listDeploymentTargets<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_ListDeploymentTargetsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListDeploymentTargetsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listDeploymentTargets(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListDeploymentTargetsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListDeploymentTargetsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateDeploymentTarget" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_UpdateDeploymentTargetRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateDeploymentTarget<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_UpdateDeploymentTargetRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_DeploymentTarget>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateDeploymentTarget(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_UpdateDeploymentTargetRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_DeploymentTarget>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RetryFailedDeployment" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_RetryFailedDeploymentRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func retryFailedDeployment<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_RetryFailedDeploymentRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Deployment>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.retryFailedDeployment(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_RetryFailedDeploymentRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_Deployment>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_DeploymentService.ClientProtocol {
    /// Call the "CreateDeployment" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createDeployment<Result>(
        _ message: Wendycloud_V1_CreateDeploymentRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Deployment>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_CreateDeploymentRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createDeployment(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetDeployment" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getDeployment<Result>(
        _ message: Wendycloud_V1_GetDeploymentRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Deployment>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_GetDeploymentRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getDeployment(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListDeployments" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listDeployments<Result>(
        _ message: Wendycloud_V1_ListDeploymentsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListDeploymentsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_ListDeploymentsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listDeployments(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CancelDeployment" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func cancelDeployment<Result>(
        _ message: Wendycloud_V1_CancelDeploymentRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Deployment>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_CancelDeploymentRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.cancelDeployment(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetDeploymentTarget" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getDeploymentTarget<Result>(
        _ message: Wendycloud_V1_GetDeploymentTargetRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_DeploymentTarget>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_GetDeploymentTargetRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getDeploymentTarget(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListDeploymentTargets" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listDeploymentTargets<Result>(
        _ message: Wendycloud_V1_ListDeploymentTargetsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListDeploymentTargetsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_ListDeploymentTargetsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listDeploymentTargets(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateDeploymentTarget" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateDeploymentTarget<Result>(
        _ message: Wendycloud_V1_UpdateDeploymentTargetRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_DeploymentTarget>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_UpdateDeploymentTargetRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateDeploymentTarget(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RetryFailedDeployment" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func retryFailedDeployment<Result>(
        _ message: Wendycloud_V1_RetryFailedDeploymentRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_Deployment>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_RetryFailedDeploymentRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.retryFailedDeployment(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}