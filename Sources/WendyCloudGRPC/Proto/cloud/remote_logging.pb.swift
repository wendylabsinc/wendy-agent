// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cloud/remote_logging.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Log severity levels aligned with common syslog/Cloud Logging values.
public enum Wendycloud_V1_LogSeverity: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case unspecified // = 0
  case debug // = 1
  case info // = 2
  case notice // = 3
  case warning // = 4
  case error // = 5
  case critical // = 6
  case alert // = 7
  case emergency // = 8
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .debug
    case 2: self = .info
    case 3: self = .notice
    case 4: self = .warning
    case 5: self = .error
    case 6: self = .critical
    case 7: self = .alert
    case 8: self = .emergency
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .debug: return 1
    case .info: return 2
    case .notice: return 3
    case .warning: return 4
    case .error: return 5
    case .critical: return 6
    case .alert: return 7
    case .emergency: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Wendycloud_V1_LogSeverity] = [
    .unspecified,
    .debug,
    .info,
    .notice,
    .warning,
    .error,
    .critical,
    .alert,
    .emergency,
  ]

}

/// A single log record. Designed to map cleanly to Google Cloud Logging's
/// LogEntry (textPayload/jsonPayload), plus trace context fields.
public struct Wendycloud_V1_LogEntry: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Event time at the source.
  public var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  public var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  public mutating func clearTimestamp() {self._timestamp = nil}

  /// Observed time at the collector/agent (optional).
  public var observedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _observedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_observedAt = newValue}
  }
  /// Returns true if `observedAt` has been explicitly set.
  public var hasObservedAt: Bool {return self._observedAt != nil}
  /// Clears the value of `observedAt`. Subsequent reads from it will return its default value.
  public mutating func clearObservedAt() {self._observedAt = nil}

  public var severity: Wendycloud_V1_LogSeverity = .unspecified

  /// W3C Trace Context fields for cross-service correlation (optional).
  public var traceID: String = String()

  /// 8-byte (16 hex chars) recommended
  public var spanID: String = String()

  public var traceSampled: Bool = false

  /// Freeform logger or source (e.g., "otel-collector", "app", "syslog").
  public var loggerName: String = String()

  /// Optional source location hints.
  public var file: String {
    get {return _file ?? String()}
    set {_file = newValue}
  }
  /// Returns true if `file` has been explicitly set.
  public var hasFile: Bool {return self._file != nil}
  /// Clears the value of `file`. Subsequent reads from it will return its default value.
  public mutating func clearFile() {self._file = nil}

  public var function: String {
    get {return _function ?? String()}
    set {_function = newValue}
  }
  /// Returns true if `function` has been explicitly set.
  public var hasFunction: Bool {return self._function != nil}
  /// Clears the value of `function`. Subsequent reads from it will return its default value.
  public mutating func clearFunction() {self._function = nil}

  public var line: Int32 {
    get {return _line ?? 0}
    set {_line = newValue}
  }
  /// Returns true if `line` has been explicitly set.
  public var hasLine: Bool {return self._line != nil}
  /// Clears the value of `line`. Subsequent reads from it will return its default value.
  public mutating func clearLine() {self._line = nil}

  /// Labels/attributes copied to Cloud Logging labels.
  public var labels: Dictionary<String,String> = [:]

  /// Optional deployment ID for associating logs with a specific deployment.
  public var deploymentID: Int32 {
    get {return _deploymentID ?? 0}
    set {_deploymentID = newValue}
  }
  /// Returns true if `deploymentID` has been explicitly set.
  public var hasDeploymentID: Bool {return self._deploymentID != nil}
  /// Clears the value of `deploymentID`. Subsequent reads from it will return its default value.
  public mutating func clearDeploymentID() {self._deploymentID = nil}

  /// Payload (choose one). text_payload maps to textPayload; json_payload to jsonPayload.
  public var payload: Wendycloud_V1_LogEntry.OneOf_Payload? = nil

  public var textPayload: String {
    get {
      if case .textPayload(let v)? = payload {return v}
      return String()
    }
    set {payload = .textPayload(newValue)}
  }

  public var jsonPayload: SwiftProtobuf.Google_Protobuf_Struct {
    get {
      if case .jsonPayload(let v)? = payload {return v}
      return SwiftProtobuf.Google_Protobuf_Struct()
    }
    set {payload = .jsonPayload(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Payload (choose one). text_payload maps to textPayload; json_payload to jsonPayload.
  public enum OneOf_Payload: Equatable, Sendable {
    case textPayload(String)
    case jsonPayload(SwiftProtobuf.Google_Protobuf_Struct)

  }

  public init() {}

  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _observedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _file: String? = nil
  fileprivate var _function: String? = nil
  fileprivate var _line: Int32? = nil
  fileprivate var _deploymentID: Int32? = nil
}

/// Batch write request for log entries originating from a specific app running
/// on an asset within an organization. All fields must be set and the
/// caller is authenticated via mTLS client certificates.
public struct Wendycloud_V1_WriteLogEntriesRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var organizationID: Int32 = 0

  public var assetID: Int32 = 0

  public var appID: String = String()

  /// Optional: identity of the collector/agent pushing logs.
  public var collector: String {
    get {return _collector ?? String()}
    set {_collector = newValue}
  }
  /// Returns true if `collector` has been explicitly set.
  public var hasCollector: Bool {return self._collector != nil}
  /// Clears the value of `collector`. Subsequent reads from it will return its default value.
  public mutating func clearCollector() {self._collector = nil}

  /// e.g., "0.98.0"
  public var collectorVersion: String {
    get {return _collectorVersion ?? String()}
    set {_collectorVersion = newValue}
  }
  /// Returns true if `collectorVersion` has been explicitly set.
  public var hasCollectorVersion: Bool {return self._collectorVersion != nil}
  /// Clears the value of `collectorVersion`. Subsequent reads from it will return its default value.
  public mutating func clearCollectorVersion() {self._collectorVersion = nil}

  /// Log entries to ingest. The server may truncate overly large batches per policy.
  public var entries: [Wendycloud_V1_LogEntry] = []

  /// Optional hint for grouping in Cloud Logging (otherwise computed server-side).
  public var logName: String {
    get {return _logName ?? String()}
    set {_logName = newValue}
  }
  /// Returns true if `logName` has been explicitly set.
  public var hasLogName: Bool {return self._logName != nil}
  /// Clears the value of `logName`. Subsequent reads from it will return its default value.
  public mutating func clearLogName() {self._logName = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _collector: String? = nil
  fileprivate var _collectorVersion: String? = nil
  fileprivate var _logName: String? = nil
}

public struct Wendycloud_V1_WriteLogEntriesResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Count of entries accepted by the server/backend.
  public var acceptedCount: Int32 = 0

  /// Details for any entries that were rejected.
  public var rejections: [Wendycloud_V1_RejectedEntry] = []

  /// Server-generated id for correlating this batch in logs/metrics.
  public var ingestionID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Wendycloud_V1_RejectedEntry: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Index within WriteLogEntriesRequest.entries that was rejected.
  public var index: Int32 = 0

  /// Short reason for rejection (e.g., validation, size limit).
  public var reason: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request to tail logs for a specific app running on an asset.
public struct Wendycloud_V1_TailLogEntriesRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var organizationID: Int32 = 0

  public var assetID: Int32 = 0

  public var appID: String = String()

  /// Optional start time for the tail window; defaults to 'now - 2m'.
  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {self._startTime = nil}

  /// Server polling interval in seconds; defaults to 2.
  public var pollIntervalSeconds: Int32 {
    get {return _pollIntervalSeconds ?? 0}
    set {_pollIntervalSeconds = newValue}
  }
  /// Returns true if `pollIntervalSeconds` has been explicitly set.
  public var hasPollIntervalSeconds: Bool {return self._pollIntervalSeconds != nil}
  /// Clears the value of `pollIntervalSeconds`. Subsequent reads from it will return its default value.
  public mutating func clearPollIntervalSeconds() {self._pollIntervalSeconds = nil}

  /// Max entries per batch; defaults to 100.
  public var pageSize: Int32 {
    get {return _pageSize ?? 0}
    set {_pageSize = newValue}
  }
  /// Returns true if `pageSize` has been explicitly set.
  public var hasPageSize: Bool {return self._pageSize != nil}
  /// Clears the value of `pageSize`. Subsequent reads from it will return its default value.
  public mutating func clearPageSize() {self._pageSize = nil}

  /// Optional explicit log name (otherwise the server uses its default).
  public var logName: String {
    get {return _logName ?? String()}
    set {_logName = newValue}
  }
  /// Returns true if `logName` has been explicitly set.
  public var hasLogName: Bool {return self._logName != nil}
  /// Clears the value of `logName`. Subsequent reads from it will return its default value.
  public mutating func clearLogName() {self._logName = nil}

  /// Optional deployment filter; when set, only entries matching this deployment_id are returned.
  public var deploymentID: Int32 {
    get {return _deploymentID ?? 0}
    set {_deploymentID = newValue}
  }
  /// Returns true if `deploymentID` has been explicitly set.
  public var hasDeploymentID: Bool {return self._deploymentID != nil}
  /// Clears the value of `deploymentID`. Subsequent reads from it will return its default value.
  public mutating func clearDeploymentID() {self._deploymentID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _pollIntervalSeconds: Int32? = nil
  fileprivate var _pageSize: Int32? = nil
  fileprivate var _logName: String? = nil
  fileprivate var _deploymentID: Int32? = nil
}

public struct Wendycloud_V1_TailLogEntriesResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var entries: [Wendycloud_V1_LogEntry] = []

  /// Watermark timestamp up to which the server attempted to read.
  public var readThrough: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _readThrough ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_readThrough = newValue}
  }
  /// Returns true if `readThrough` has been explicitly set.
  public var hasReadThrough: Bool {return self._readThrough != nil}
  /// Clears the value of `readThrough`. Subsequent reads from it will return its default value.
  public mutating func clearReadThrough() {self._readThrough = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _readThrough: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "wendycloud.v1"

extension Wendycloud_V1_LogSeverity: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0LOG_SEVERITY_UNSPECIFIED\0\u{1}LOG_SEVERITY_DEBUG\0\u{1}LOG_SEVERITY_INFO\0\u{1}LOG_SEVERITY_NOTICE\0\u{1}LOG_SEVERITY_WARNING\0\u{1}LOG_SEVERITY_ERROR\0\u{1}LOG_SEVERITY_CRITICAL\0\u{1}LOG_SEVERITY_ALERT\0\u{1}LOG_SEVERITY_EMERGENCY\0")
}

extension Wendycloud_V1_LogEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LogEntry"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}timestamp\0\u{3}observed_at\0\u{1}severity\0\u{3}trace_id\0\u{3}span_id\0\u{3}trace_sampled\0\u{3}logger_name\0\u{1}file\0\u{1}function\0\u{1}line\0\u{1}labels\0\u{3}text_payload\0\u{3}json_payload\0\u{3}deployment_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._observedAt) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.severity) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.traceID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.spanID) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.traceSampled) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.loggerName) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self._file) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self._function) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self._line) }()
      case 11: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels) }()
      case 12: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .textPayload(v)
        }
      }()
      case 13: try {
        var v: SwiftProtobuf.Google_Protobuf_Struct?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .jsonPayload(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .jsonPayload(v)
        }
      }()
      case 14: try { try decoder.decodeSingularInt32Field(value: &self._deploymentID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._observedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.severity != .unspecified {
      try visitor.visitSingularEnumField(value: self.severity, fieldNumber: 3)
    }
    if !self.traceID.isEmpty {
      try visitor.visitSingularStringField(value: self.traceID, fieldNumber: 4)
    }
    if !self.spanID.isEmpty {
      try visitor.visitSingularStringField(value: self.spanID, fieldNumber: 5)
    }
    if self.traceSampled != false {
      try visitor.visitSingularBoolField(value: self.traceSampled, fieldNumber: 6)
    }
    if !self.loggerName.isEmpty {
      try visitor.visitSingularStringField(value: self.loggerName, fieldNumber: 7)
    }
    try { if let v = self._file {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._function {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._line {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
    } }()
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 11)
    }
    switch self.payload {
    case .textPayload?: try {
      guard case .textPayload(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 12)
    }()
    case .jsonPayload?: try {
      guard case .jsonPayload(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case nil: break
    }
    try { if let v = self._deploymentID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 14)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Wendycloud_V1_LogEntry, rhs: Wendycloud_V1_LogEntry) -> Bool {
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs._observedAt != rhs._observedAt {return false}
    if lhs.severity != rhs.severity {return false}
    if lhs.traceID != rhs.traceID {return false}
    if lhs.spanID != rhs.spanID {return false}
    if lhs.traceSampled != rhs.traceSampled {return false}
    if lhs.loggerName != rhs.loggerName {return false}
    if lhs._file != rhs._file {return false}
    if lhs._function != rhs._function {return false}
    if lhs._line != rhs._line {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs._deploymentID != rhs._deploymentID {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Wendycloud_V1_WriteLogEntriesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WriteLogEntriesRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}organization_id\0\u{3}asset_id\0\u{3}app_id\0\u{1}collector\0\u{3}collector_version\0\u{1}entries\0\u{3}log_name\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.organizationID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.assetID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.appID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._collector) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._collectorVersion) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._logName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.organizationID != 0 {
      try visitor.visitSingularInt32Field(value: self.organizationID, fieldNumber: 1)
    }
    if self.assetID != 0 {
      try visitor.visitSingularInt32Field(value: self.assetID, fieldNumber: 2)
    }
    if !self.appID.isEmpty {
      try visitor.visitSingularStringField(value: self.appID, fieldNumber: 3)
    }
    try { if let v = self._collector {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._collectorVersion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 6)
    }
    try { if let v = self._logName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Wendycloud_V1_WriteLogEntriesRequest, rhs: Wendycloud_V1_WriteLogEntriesRequest) -> Bool {
    if lhs.organizationID != rhs.organizationID {return false}
    if lhs.assetID != rhs.assetID {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs._collector != rhs._collector {return false}
    if lhs._collectorVersion != rhs._collectorVersion {return false}
    if lhs.entries != rhs.entries {return false}
    if lhs._logName != rhs._logName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Wendycloud_V1_WriteLogEntriesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WriteLogEntriesResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}accepted_count\0\u{1}rejections\0\u{3}ingestion_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.acceptedCount) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.rejections) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.ingestionID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.acceptedCount != 0 {
      try visitor.visitSingularInt32Field(value: self.acceptedCount, fieldNumber: 1)
    }
    if !self.rejections.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rejections, fieldNumber: 2)
    }
    if !self.ingestionID.isEmpty {
      try visitor.visitSingularStringField(value: self.ingestionID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Wendycloud_V1_WriteLogEntriesResponse, rhs: Wendycloud_V1_WriteLogEntriesResponse) -> Bool {
    if lhs.acceptedCount != rhs.acceptedCount {return false}
    if lhs.rejections != rhs.rejections {return false}
    if lhs.ingestionID != rhs.ingestionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Wendycloud_V1_RejectedEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RejectedEntry"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}index\0\u{1}reason\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.index) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.reason) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.index != 0 {
      try visitor.visitSingularInt32Field(value: self.index, fieldNumber: 1)
    }
    if !self.reason.isEmpty {
      try visitor.visitSingularStringField(value: self.reason, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Wendycloud_V1_RejectedEntry, rhs: Wendycloud_V1_RejectedEntry) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.reason != rhs.reason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Wendycloud_V1_TailLogEntriesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TailLogEntriesRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}organization_id\0\u{3}asset_id\0\u{3}app_id\0\u{3}start_time\0\u{3}poll_interval_seconds\0\u{3}page_size\0\u{3}log_name\0\u{3}deployment_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.organizationID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.assetID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.appID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self._pollIntervalSeconds) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self._pageSize) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._logName) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self._deploymentID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.organizationID != 0 {
      try visitor.visitSingularInt32Field(value: self.organizationID, fieldNumber: 1)
    }
    if self.assetID != 0 {
      try visitor.visitSingularInt32Field(value: self.assetID, fieldNumber: 2)
    }
    if !self.appID.isEmpty {
      try visitor.visitSingularStringField(value: self.appID, fieldNumber: 3)
    }
    try { if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._pollIntervalSeconds {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._pageSize {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._logName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._deploymentID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Wendycloud_V1_TailLogEntriesRequest, rhs: Wendycloud_V1_TailLogEntriesRequest) -> Bool {
    if lhs.organizationID != rhs.organizationID {return false}
    if lhs.assetID != rhs.assetID {return false}
    if lhs.appID != rhs.appID {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs._pollIntervalSeconds != rhs._pollIntervalSeconds {return false}
    if lhs._pageSize != rhs._pageSize {return false}
    if lhs._logName != rhs._logName {return false}
    if lhs._deploymentID != rhs._deploymentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Wendycloud_V1_TailLogEntriesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TailLogEntriesResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}entries\0\u{3}read_through\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._readThrough) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try { if let v = self._readThrough {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Wendycloud_V1_TailLogEntriesResponse, rhs: Wendycloud_V1_TailLogEntriesResponse) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs._readThrough != rhs._readThrough {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
