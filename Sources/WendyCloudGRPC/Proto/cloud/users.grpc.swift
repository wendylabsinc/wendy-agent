// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: cloud/users.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - wendycloud.v1.UserService

/// Namespace containing generated types for the "wendycloud.v1.UserService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public enum Wendycloud_V1_UserService {
    /// Service descriptor for the "wendycloud.v1.UserService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.UserService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "CreateUser" metadata.
        public enum CreateUser {
            /// Request type for "CreateUser".
            public typealias Input = Wendycloud_V1_CreateUserRequest
            /// Response type for "CreateUser".
            public typealias Output = Wendycloud_V1_User
            /// Descriptor for "CreateUser".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.UserService"),
                method: "CreateUser"
            )
        }
        /// Namespace for "GetUser" metadata.
        public enum GetUser {
            /// Request type for "GetUser".
            public typealias Input = Wendycloud_V1_GetUserRequest
            /// Response type for "GetUser".
            public typealias Output = Wendycloud_V1_User
            /// Descriptor for "GetUser".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.UserService"),
                method: "GetUser"
            )
        }
        /// Namespace for "UpdateUser" metadata.
        public enum UpdateUser {
            /// Request type for "UpdateUser".
            public typealias Input = Wendycloud_V1_UpdateUserRequest
            /// Response type for "UpdateUser".
            public typealias Output = Wendycloud_V1_User
            /// Descriptor for "UpdateUser".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.UserService"),
                method: "UpdateUser"
            )
        }
        /// Namespace for "ListUsers" metadata.
        public enum ListUsers {
            /// Request type for "ListUsers".
            public typealias Input = Wendycloud_V1_ListUsersRequest
            /// Response type for "ListUsers".
            public typealias Output = Wendycloud_V1_ListUsersResponse
            /// Descriptor for "ListUsers".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.UserService"),
                method: "ListUsers"
            )
        }
        /// Descriptors for all methods in the "wendycloud.v1.UserService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateUser.descriptor,
            GetUser.descriptor,
            UpdateUser.descriptor,
            ListUsers.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "wendycloud.v1.UserService" service.
    public static let wendycloud_v1_UserService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.UserService")
}

// MARK: wendycloud.v1.UserService (server)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_UserService {
    /// Streaming variant of the service protocol for the "wendycloud.v1.UserService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "CreateUser" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_CreateUserRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_User` messages.
        func createUser(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_CreateUserRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_User>

        /// Handle the "GetUser" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_GetUserRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_User` messages.
        func getUser(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetUserRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_User>

        /// Handle the "UpdateUser" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_UpdateUserRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_User` messages.
        func updateUser(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_UpdateUserRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_User>

        /// Handle the "ListUsers" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_ListUsersRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_ListUsersResponse` messages.
        func listUsers(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListUsersRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListUsersResponse>
    }

    /// Service protocol for the "wendycloud.v1.UserService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    public protocol ServiceProtocol: Wendycloud_V1_UserService.StreamingServiceProtocol {
        /// Handle the "CreateUser" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateUserRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_User` message.
        func createUser(
            request: GRPCCore.ServerRequest<Wendycloud_V1_CreateUserRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_User>

        /// Handle the "GetUser" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetUserRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_User` message.
        func getUser(
            request: GRPCCore.ServerRequest<Wendycloud_V1_GetUserRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_User>

        /// Handle the "UpdateUser" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_UpdateUserRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_User` message.
        func updateUser(
            request: GRPCCore.ServerRequest<Wendycloud_V1_UpdateUserRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_User>

        /// Handle the "ListUsers" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListUsersRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_ListUsersResponse` message.
        func listUsers(
            request: GRPCCore.ServerRequest<Wendycloud_V1_ListUsersRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_ListUsersResponse>
    }

    /// Simple service protocol for the "wendycloud.v1.UserService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    public protocol SimpleServiceProtocol: Wendycloud_V1_UserService.ServiceProtocol {
        /// Handle the "CreateUser" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_CreateUserRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_User` to respond with.
        func createUser(
            request: Wendycloud_V1_CreateUserRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_User

        /// Handle the "GetUser" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_GetUserRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_User` to respond with.
        func getUser(
            request: Wendycloud_V1_GetUserRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_User

        /// Handle the "UpdateUser" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_UpdateUserRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_User` to respond with.
        func updateUser(
            request: Wendycloud_V1_UpdateUserRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_User

        /// Handle the "ListUsers" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_ListUsersRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_ListUsersResponse` to respond with.
        func listUsers(
            request: Wendycloud_V1_ListUsersRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_ListUsersResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_UserService.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Wendycloud_V1_UserService.Method.CreateUser.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_CreateUserRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_User>(),
            handler: { request, context in
                try await self.createUser(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_UserService.Method.GetUser.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_GetUserRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_User>(),
            handler: { request, context in
                try await self.getUser(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_UserService.Method.UpdateUser.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_UpdateUserRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_User>(),
            handler: { request, context in
                try await self.updateUser(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_UserService.Method.ListUsers.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListUsersRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListUsersResponse>(),
            handler: { request, context in
                try await self.listUsers(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_UserService.ServiceProtocol {
    public func createUser(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_CreateUserRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_User> {
        let response = try await self.createUser(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getUser(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetUserRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_User> {
        let response = try await self.getUser(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func updateUser(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_UpdateUserRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_User> {
        let response = try await self.updateUser(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func listUsers(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListUsersRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListUsersResponse> {
        let response = try await self.listUsers(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_UserService.SimpleServiceProtocol {
    public func createUser(
        request: GRPCCore.ServerRequest<Wendycloud_V1_CreateUserRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_User> {
        return GRPCCore.ServerResponse<Wendycloud_V1_User>(
            message: try await self.createUser(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getUser(
        request: GRPCCore.ServerRequest<Wendycloud_V1_GetUserRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_User> {
        return GRPCCore.ServerResponse<Wendycloud_V1_User>(
            message: try await self.getUser(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func updateUser(
        request: GRPCCore.ServerRequest<Wendycloud_V1_UpdateUserRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_User> {
        return GRPCCore.ServerResponse<Wendycloud_V1_User>(
            message: try await self.updateUser(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func listUsers(
        request: GRPCCore.ServerRequest<Wendycloud_V1_ListUsersRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_ListUsersResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_ListUsersResponse>(
            message: try await self.listUsers(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: wendycloud.v1.UserService (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_UserService {
    /// Generated client protocol for the "wendycloud.v1.UserService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    public protocol ClientProtocol: Sendable {
        /// Call the "CreateUser" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateUserRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_CreateUserRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_User` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createUser<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_CreateUserRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_CreateUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_User>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_User>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetUser" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetUserRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetUserRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_User` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getUser<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetUserRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_User>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_User>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateUser" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_UpdateUserRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_UpdateUserRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_User` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateUser<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_UpdateUserRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_UpdateUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_User>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_User>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListUsers" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListUsersRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListUsersRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListUsersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listUsers<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListUsersRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListUsersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListUsersResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListUsersResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "wendycloud.v1.UserService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "CreateUser" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateUserRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_CreateUserRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_User` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createUser<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_CreateUserRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_CreateUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_User>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_User>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_UserService.Method.CreateUser.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetUser" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetUserRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetUserRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_User` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getUser<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetUserRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_User>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_User>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_UserService.Method.GetUser.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateUser" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_UpdateUserRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_UpdateUserRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_User` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateUser<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_UpdateUserRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_UpdateUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_User>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_User>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_UserService.Method.UpdateUser.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListUsers" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListUsersRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListUsersRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListUsersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listUsers<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListUsersRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListUsersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListUsersResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListUsersResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_UserService.Method.ListUsers.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_UserService.ClientProtocol {
    /// Call the "CreateUser" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_CreateUserRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createUser<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_CreateUserRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_User>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createUser(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_CreateUserRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_User>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUser" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_GetUserRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getUser<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_GetUserRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_User>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getUser(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_GetUserRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_User>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateUser" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_UpdateUserRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateUser<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_UpdateUserRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_User>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateUser(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_UpdateUserRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_User>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListUsers" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_ListUsersRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listUsers<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_ListUsersRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListUsersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listUsers(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListUsersRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListUsersResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_UserService.ClientProtocol {
    /// Call the "CreateUser" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createUser<Result>(
        _ message: Wendycloud_V1_CreateUserRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_User>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_CreateUserRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createUser(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUser" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getUser<Result>(
        _ message: Wendycloud_V1_GetUserRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_User>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_GetUserRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getUser(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateUser" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateUser<Result>(
        _ message: Wendycloud_V1_UpdateUserRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_User>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_UpdateUserRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateUser(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListUsers" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listUsers<Result>(
        _ message: Wendycloud_V1_ListUsersRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListUsersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_ListUsersRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listUsers(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}