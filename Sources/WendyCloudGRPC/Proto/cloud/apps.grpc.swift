// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: cloud/apps.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - wendycloud.v1.AppService

/// Namespace containing generated types for the "wendycloud.v1.AppService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public enum Wendycloud_V1_AppService {
    /// Service descriptor for the "wendycloud.v1.AppService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.AppService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "CreateApp" metadata.
        public enum CreateApp {
            /// Request type for "CreateApp".
            public typealias Input = Wendycloud_V1_CreateAppRequest
            /// Response type for "CreateApp".
            public typealias Output = Wendycloud_V1_App
            /// Descriptor for "CreateApp".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.AppService"),
                method: "CreateApp"
            )
        }
        /// Namespace for "GetApp" metadata.
        public enum GetApp {
            /// Request type for "GetApp".
            public typealias Input = Wendycloud_V1_GetAppRequest
            /// Response type for "GetApp".
            public typealias Output = Wendycloud_V1_App
            /// Descriptor for "GetApp".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.AppService"),
                method: "GetApp"
            )
        }
        /// Namespace for "UpdateApp" metadata.
        public enum UpdateApp {
            /// Request type for "UpdateApp".
            public typealias Input = Wendycloud_V1_UpdateAppRequest
            /// Response type for "UpdateApp".
            public typealias Output = Wendycloud_V1_App
            /// Descriptor for "UpdateApp".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.AppService"),
                method: "UpdateApp"
            )
        }
        /// Namespace for "DeleteApp" metadata.
        public enum DeleteApp {
            /// Request type for "DeleteApp".
            public typealias Input = Wendycloud_V1_DeleteAppRequest
            /// Response type for "DeleteApp".
            public typealias Output = Wendycloud_V1_DeleteAppResponse
            /// Descriptor for "DeleteApp".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.AppService"),
                method: "DeleteApp"
            )
        }
        /// Namespace for "ListApps" metadata.
        public enum ListApps {
            /// Request type for "ListApps".
            public typealias Input = Wendycloud_V1_ListAppsRequest
            /// Response type for "ListApps".
            public typealias Output = Wendycloud_V1_ListAppsResponse
            /// Descriptor for "ListApps".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.AppService"),
                method: "ListApps"
            )
        }
        /// Namespace for "CreateAppVersion" metadata.
        public enum CreateAppVersion {
            /// Request type for "CreateAppVersion".
            public typealias Input = Wendycloud_V1_CreateAppVersionRequest
            /// Response type for "CreateAppVersion".
            public typealias Output = Wendycloud_V1_AppVersion
            /// Descriptor for "CreateAppVersion".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.AppService"),
                method: "CreateAppVersion"
            )
        }
        /// Namespace for "GetAppVersion" metadata.
        public enum GetAppVersion {
            /// Request type for "GetAppVersion".
            public typealias Input = Wendycloud_V1_GetAppVersionRequest
            /// Response type for "GetAppVersion".
            public typealias Output = Wendycloud_V1_AppVersion
            /// Descriptor for "GetAppVersion".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.AppService"),
                method: "GetAppVersion"
            )
        }
        /// Namespace for "ListAppVersions" metadata.
        public enum ListAppVersions {
            /// Request type for "ListAppVersions".
            public typealias Input = Wendycloud_V1_ListAppVersionsRequest
            /// Response type for "ListAppVersions".
            public typealias Output = Wendycloud_V1_ListAppVersionsResponse
            /// Descriptor for "ListAppVersions".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.AppService"),
                method: "ListAppVersions"
            )
        }
        /// Namespace for "CreateAssetContainer" metadata.
        public enum CreateAssetContainer {
            /// Request type for "CreateAssetContainer".
            public typealias Input = Wendycloud_V1_CreateAssetContainerRequest
            /// Response type for "CreateAssetContainer".
            public typealias Output = Wendycloud_V1_AssetContainer
            /// Descriptor for "CreateAssetContainer".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.AppService"),
                method: "CreateAssetContainer"
            )
        }
        /// Namespace for "GetAssetContainer" metadata.
        public enum GetAssetContainer {
            /// Request type for "GetAssetContainer".
            public typealias Input = Wendycloud_V1_GetAssetContainerRequest
            /// Response type for "GetAssetContainer".
            public typealias Output = Wendycloud_V1_AssetContainer
            /// Descriptor for "GetAssetContainer".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.AppService"),
                method: "GetAssetContainer"
            )
        }
        /// Namespace for "UpdateAssetContainer" metadata.
        public enum UpdateAssetContainer {
            /// Request type for "UpdateAssetContainer".
            public typealias Input = Wendycloud_V1_UpdateAssetContainerRequest
            /// Response type for "UpdateAssetContainer".
            public typealias Output = Wendycloud_V1_AssetContainer
            /// Descriptor for "UpdateAssetContainer".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.AppService"),
                method: "UpdateAssetContainer"
            )
        }
        /// Namespace for "ListAssetContainers" metadata.
        public enum ListAssetContainers {
            /// Request type for "ListAssetContainers".
            public typealias Input = Wendycloud_V1_ListAssetContainersRequest
            /// Response type for "ListAssetContainers".
            public typealias Output = Wendycloud_V1_ListAssetContainersResponse
            /// Descriptor for "ListAssetContainers".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.AppService"),
                method: "ListAssetContainers"
            )
        }
        /// Namespace for "ListAssetContainersByApp" metadata.
        public enum ListAssetContainersByApp {
            /// Request type for "ListAssetContainersByApp".
            public typealias Input = Wendycloud_V1_ListAssetContainersByAppRequest
            /// Response type for "ListAssetContainersByApp".
            public typealias Output = Wendycloud_V1_ListAssetContainersByAppResponse
            /// Descriptor for "ListAssetContainersByApp".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.AppService"),
                method: "ListAssetContainersByApp"
            )
        }
        /// Descriptors for all methods in the "wendycloud.v1.AppService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateApp.descriptor,
            GetApp.descriptor,
            UpdateApp.descriptor,
            DeleteApp.descriptor,
            ListApps.descriptor,
            CreateAppVersion.descriptor,
            GetAppVersion.descriptor,
            ListAppVersions.descriptor,
            CreateAssetContainer.descriptor,
            GetAssetContainer.descriptor,
            UpdateAssetContainer.descriptor,
            ListAssetContainers.descriptor,
            ListAssetContainersByApp.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "wendycloud.v1.AppService" service.
    public static let wendycloud_v1_AppService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendycloud.v1.AppService")
}

// MARK: wendycloud.v1.AppService (server)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_AppService {
    /// Streaming variant of the service protocol for the "wendycloud.v1.AppService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "CreateApp" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_CreateAppRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_App` messages.
        func createApp(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_CreateAppRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_App>

        /// Handle the "GetApp" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_GetAppRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_App` messages.
        func getApp(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetAppRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_App>

        /// Handle the "UpdateApp" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_UpdateAppRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_App` messages.
        func updateApp(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_UpdateAppRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_App>

        /// Handle the "DeleteApp" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_DeleteAppRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_DeleteAppResponse` messages.
        func deleteApp(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_DeleteAppRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_DeleteAppResponse>

        /// Handle the "ListApps" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_ListAppsRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_ListAppsResponse` messages.
        func listApps(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListAppsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListAppsResponse>

        /// Handle the "CreateAppVersion" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_CreateAppVersionRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_AppVersion` messages.
        func createAppVersion(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_CreateAppVersionRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_AppVersion>

        /// Handle the "GetAppVersion" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_GetAppVersionRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_AppVersion` messages.
        func getAppVersion(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetAppVersionRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_AppVersion>

        /// Handle the "ListAppVersions" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_ListAppVersionsRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_ListAppVersionsResponse` messages.
        func listAppVersions(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListAppVersionsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListAppVersionsResponse>

        /// Handle the "CreateAssetContainer" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_CreateAssetContainerRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_AssetContainer` messages.
        func createAssetContainer(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_CreateAssetContainerRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_AssetContainer>

        /// Handle the "GetAssetContainer" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_GetAssetContainerRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_AssetContainer` messages.
        func getAssetContainer(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetAssetContainerRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_AssetContainer>

        /// Handle the "UpdateAssetContainer" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_UpdateAssetContainerRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_AssetContainer` messages.
        func updateAssetContainer(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_UpdateAssetContainerRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_AssetContainer>

        /// Handle the "ListAssetContainers" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_ListAssetContainersRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_ListAssetContainersResponse` messages.
        func listAssetContainers(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListAssetContainersRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListAssetContainersResponse>

        /// Handle the "ListAssetContainersByApp" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendycloud_V1_ListAssetContainersByAppRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendycloud_V1_ListAssetContainersByAppResponse` messages.
        func listAssetContainersByApp(
            request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListAssetContainersByAppRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListAssetContainersByAppResponse>
    }

    /// Service protocol for the "wendycloud.v1.AppService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    public protocol ServiceProtocol: Wendycloud_V1_AppService.StreamingServiceProtocol {
        /// Handle the "CreateApp" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateAppRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_App` message.
        func createApp(
            request: GRPCCore.ServerRequest<Wendycloud_V1_CreateAppRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_App>

        /// Handle the "GetApp" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetAppRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_App` message.
        func getApp(
            request: GRPCCore.ServerRequest<Wendycloud_V1_GetAppRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_App>

        /// Handle the "UpdateApp" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_UpdateAppRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_App` message.
        func updateApp(
            request: GRPCCore.ServerRequest<Wendycloud_V1_UpdateAppRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_App>

        /// Handle the "DeleteApp" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_DeleteAppRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_DeleteAppResponse` message.
        func deleteApp(
            request: GRPCCore.ServerRequest<Wendycloud_V1_DeleteAppRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_DeleteAppResponse>

        /// Handle the "ListApps" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListAppsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_ListAppsResponse` message.
        func listApps(
            request: GRPCCore.ServerRequest<Wendycloud_V1_ListAppsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_ListAppsResponse>

        /// Handle the "CreateAppVersion" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateAppVersionRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_AppVersion` message.
        func createAppVersion(
            request: GRPCCore.ServerRequest<Wendycloud_V1_CreateAppVersionRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_AppVersion>

        /// Handle the "GetAppVersion" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetAppVersionRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_AppVersion` message.
        func getAppVersion(
            request: GRPCCore.ServerRequest<Wendycloud_V1_GetAppVersionRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_AppVersion>

        /// Handle the "ListAppVersions" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListAppVersionsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_ListAppVersionsResponse` message.
        func listAppVersions(
            request: GRPCCore.ServerRequest<Wendycloud_V1_ListAppVersionsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_ListAppVersionsResponse>

        /// Handle the "CreateAssetContainer" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateAssetContainerRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_AssetContainer` message.
        func createAssetContainer(
            request: GRPCCore.ServerRequest<Wendycloud_V1_CreateAssetContainerRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_AssetContainer>

        /// Handle the "GetAssetContainer" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetAssetContainerRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_AssetContainer` message.
        func getAssetContainer(
            request: GRPCCore.ServerRequest<Wendycloud_V1_GetAssetContainerRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_AssetContainer>

        /// Handle the "UpdateAssetContainer" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_UpdateAssetContainerRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_AssetContainer` message.
        func updateAssetContainer(
            request: GRPCCore.ServerRequest<Wendycloud_V1_UpdateAssetContainerRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_AssetContainer>

        /// Handle the "ListAssetContainers" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListAssetContainersRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_ListAssetContainersResponse` message.
        func listAssetContainers(
            request: GRPCCore.ServerRequest<Wendycloud_V1_ListAssetContainersRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_ListAssetContainersResponse>

        /// Handle the "ListAssetContainersByApp" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListAssetContainersByAppRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendycloud_V1_ListAssetContainersByAppResponse` message.
        func listAssetContainersByApp(
            request: GRPCCore.ServerRequest<Wendycloud_V1_ListAssetContainersByAppRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_ListAssetContainersByAppResponse>
    }

    /// Simple service protocol for the "wendycloud.v1.AppService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    public protocol SimpleServiceProtocol: Wendycloud_V1_AppService.ServiceProtocol {
        /// Handle the "CreateApp" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_CreateAppRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_App` to respond with.
        func createApp(
            request: Wendycloud_V1_CreateAppRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_App

        /// Handle the "GetApp" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_GetAppRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_App` to respond with.
        func getApp(
            request: Wendycloud_V1_GetAppRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_App

        /// Handle the "UpdateApp" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_UpdateAppRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_App` to respond with.
        func updateApp(
            request: Wendycloud_V1_UpdateAppRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_App

        /// Handle the "DeleteApp" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_DeleteAppRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_DeleteAppResponse` to respond with.
        func deleteApp(
            request: Wendycloud_V1_DeleteAppRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_DeleteAppResponse

        /// Handle the "ListApps" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_ListAppsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_ListAppsResponse` to respond with.
        func listApps(
            request: Wendycloud_V1_ListAppsRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_ListAppsResponse

        /// Handle the "CreateAppVersion" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_CreateAppVersionRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_AppVersion` to respond with.
        func createAppVersion(
            request: Wendycloud_V1_CreateAppVersionRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_AppVersion

        /// Handle the "GetAppVersion" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_GetAppVersionRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_AppVersion` to respond with.
        func getAppVersion(
            request: Wendycloud_V1_GetAppVersionRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_AppVersion

        /// Handle the "ListAppVersions" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_ListAppVersionsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_ListAppVersionsResponse` to respond with.
        func listAppVersions(
            request: Wendycloud_V1_ListAppVersionsRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_ListAppVersionsResponse

        /// Handle the "CreateAssetContainer" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_CreateAssetContainerRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_AssetContainer` to respond with.
        func createAssetContainer(
            request: Wendycloud_V1_CreateAssetContainerRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_AssetContainer

        /// Handle the "GetAssetContainer" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_GetAssetContainerRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_AssetContainer` to respond with.
        func getAssetContainer(
            request: Wendycloud_V1_GetAssetContainerRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_AssetContainer

        /// Handle the "UpdateAssetContainer" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_UpdateAssetContainerRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_AssetContainer` to respond with.
        func updateAssetContainer(
            request: Wendycloud_V1_UpdateAssetContainerRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_AssetContainer

        /// Handle the "ListAssetContainers" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_ListAssetContainersRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_ListAssetContainersResponse` to respond with.
        func listAssetContainers(
            request: Wendycloud_V1_ListAssetContainersRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_ListAssetContainersResponse

        /// Handle the "ListAssetContainersByApp" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendycloud_V1_ListAssetContainersByAppRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendycloud_V1_ListAssetContainersByAppResponse` to respond with.
        func listAssetContainersByApp(
            request: Wendycloud_V1_ListAssetContainersByAppRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendycloud_V1_ListAssetContainersByAppResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_AppService.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Wendycloud_V1_AppService.Method.CreateApp.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_CreateAppRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_App>(),
            handler: { request, context in
                try await self.createApp(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_AppService.Method.GetApp.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_GetAppRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_App>(),
            handler: { request, context in
                try await self.getApp(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_AppService.Method.UpdateApp.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_UpdateAppRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_App>(),
            handler: { request, context in
                try await self.updateApp(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_AppService.Method.DeleteApp.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_DeleteAppRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_DeleteAppResponse>(),
            handler: { request, context in
                try await self.deleteApp(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_AppService.Method.ListApps.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListAppsRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListAppsResponse>(),
            handler: { request, context in
                try await self.listApps(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_AppService.Method.CreateAppVersion.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_CreateAppVersionRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_AppVersion>(),
            handler: { request, context in
                try await self.createAppVersion(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_AppService.Method.GetAppVersion.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_GetAppVersionRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_AppVersion>(),
            handler: { request, context in
                try await self.getAppVersion(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_AppService.Method.ListAppVersions.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListAppVersionsRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListAppVersionsResponse>(),
            handler: { request, context in
                try await self.listAppVersions(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_AppService.Method.CreateAssetContainer.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_CreateAssetContainerRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_AssetContainer>(),
            handler: { request, context in
                try await self.createAssetContainer(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_AppService.Method.GetAssetContainer.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_GetAssetContainerRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_AssetContainer>(),
            handler: { request, context in
                try await self.getAssetContainer(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_AppService.Method.UpdateAssetContainer.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_UpdateAssetContainerRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_AssetContainer>(),
            handler: { request, context in
                try await self.updateAssetContainer(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_AppService.Method.ListAssetContainers.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListAssetContainersRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListAssetContainersResponse>(),
            handler: { request, context in
                try await self.listAssetContainers(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendycloud_V1_AppService.Method.ListAssetContainersByApp.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListAssetContainersByAppRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListAssetContainersByAppResponse>(),
            handler: { request, context in
                try await self.listAssetContainersByApp(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_AppService.ServiceProtocol {
    public func createApp(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_CreateAppRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_App> {
        let response = try await self.createApp(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getApp(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetAppRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_App> {
        let response = try await self.getApp(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func updateApp(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_UpdateAppRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_App> {
        let response = try await self.updateApp(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func deleteApp(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_DeleteAppRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_DeleteAppResponse> {
        let response = try await self.deleteApp(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func listApps(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListAppsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListAppsResponse> {
        let response = try await self.listApps(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func createAppVersion(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_CreateAppVersionRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_AppVersion> {
        let response = try await self.createAppVersion(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getAppVersion(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetAppVersionRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_AppVersion> {
        let response = try await self.getAppVersion(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func listAppVersions(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListAppVersionsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListAppVersionsResponse> {
        let response = try await self.listAppVersions(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func createAssetContainer(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_CreateAssetContainerRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_AssetContainer> {
        let response = try await self.createAssetContainer(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getAssetContainer(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_GetAssetContainerRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_AssetContainer> {
        let response = try await self.getAssetContainer(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func updateAssetContainer(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_UpdateAssetContainerRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_AssetContainer> {
        let response = try await self.updateAssetContainer(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func listAssetContainers(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListAssetContainersRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListAssetContainersResponse> {
        let response = try await self.listAssetContainers(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func listAssetContainersByApp(
        request: GRPCCore.StreamingServerRequest<Wendycloud_V1_ListAssetContainersByAppRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendycloud_V1_ListAssetContainersByAppResponse> {
        let response = try await self.listAssetContainersByApp(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_AppService.SimpleServiceProtocol {
    public func createApp(
        request: GRPCCore.ServerRequest<Wendycloud_V1_CreateAppRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_App> {
        return GRPCCore.ServerResponse<Wendycloud_V1_App>(
            message: try await self.createApp(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getApp(
        request: GRPCCore.ServerRequest<Wendycloud_V1_GetAppRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_App> {
        return GRPCCore.ServerResponse<Wendycloud_V1_App>(
            message: try await self.getApp(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func updateApp(
        request: GRPCCore.ServerRequest<Wendycloud_V1_UpdateAppRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_App> {
        return GRPCCore.ServerResponse<Wendycloud_V1_App>(
            message: try await self.updateApp(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func deleteApp(
        request: GRPCCore.ServerRequest<Wendycloud_V1_DeleteAppRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_DeleteAppResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_DeleteAppResponse>(
            message: try await self.deleteApp(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func listApps(
        request: GRPCCore.ServerRequest<Wendycloud_V1_ListAppsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_ListAppsResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_ListAppsResponse>(
            message: try await self.listApps(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func createAppVersion(
        request: GRPCCore.ServerRequest<Wendycloud_V1_CreateAppVersionRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_AppVersion> {
        return GRPCCore.ServerResponse<Wendycloud_V1_AppVersion>(
            message: try await self.createAppVersion(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getAppVersion(
        request: GRPCCore.ServerRequest<Wendycloud_V1_GetAppVersionRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_AppVersion> {
        return GRPCCore.ServerResponse<Wendycloud_V1_AppVersion>(
            message: try await self.getAppVersion(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func listAppVersions(
        request: GRPCCore.ServerRequest<Wendycloud_V1_ListAppVersionsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_ListAppVersionsResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_ListAppVersionsResponse>(
            message: try await self.listAppVersions(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func createAssetContainer(
        request: GRPCCore.ServerRequest<Wendycloud_V1_CreateAssetContainerRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_AssetContainer> {
        return GRPCCore.ServerResponse<Wendycloud_V1_AssetContainer>(
            message: try await self.createAssetContainer(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getAssetContainer(
        request: GRPCCore.ServerRequest<Wendycloud_V1_GetAssetContainerRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_AssetContainer> {
        return GRPCCore.ServerResponse<Wendycloud_V1_AssetContainer>(
            message: try await self.getAssetContainer(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func updateAssetContainer(
        request: GRPCCore.ServerRequest<Wendycloud_V1_UpdateAssetContainerRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_AssetContainer> {
        return GRPCCore.ServerResponse<Wendycloud_V1_AssetContainer>(
            message: try await self.updateAssetContainer(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func listAssetContainers(
        request: GRPCCore.ServerRequest<Wendycloud_V1_ListAssetContainersRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_ListAssetContainersResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_ListAssetContainersResponse>(
            message: try await self.listAssetContainers(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func listAssetContainersByApp(
        request: GRPCCore.ServerRequest<Wendycloud_V1_ListAssetContainersByAppRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendycloud_V1_ListAssetContainersByAppResponse> {
        return GRPCCore.ServerResponse<Wendycloud_V1_ListAssetContainersByAppResponse>(
            message: try await self.listAssetContainersByApp(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: wendycloud.v1.AppService (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_AppService {
    /// Generated client protocol for the "wendycloud.v1.AppService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    public protocol ClientProtocol: Sendable {
        /// Call the "CreateApp" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateAppRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_CreateAppRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_App` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createApp<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_CreateAppRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_CreateAppRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_App>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_App>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetApp" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetAppRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetAppRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_App` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getApp<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetAppRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetAppRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_App>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_App>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateApp" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_UpdateAppRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_UpdateAppRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_App` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateApp<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_UpdateAppRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_UpdateAppRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_App>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_App>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteApp" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_DeleteAppRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_DeleteAppRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_DeleteAppResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteApp<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_DeleteAppRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_DeleteAppRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_DeleteAppResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_DeleteAppResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListApps" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListAppsRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListAppsRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListAppsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listApps<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListAppsRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListAppsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListAppsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListAppsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateAppVersion" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateAppVersionRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_CreateAppVersionRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_AppVersion` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createAppVersion<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_CreateAppVersionRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_CreateAppVersionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_AppVersion>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_AppVersion>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetAppVersion" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetAppVersionRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetAppVersionRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_AppVersion` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getAppVersion<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetAppVersionRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetAppVersionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_AppVersion>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_AppVersion>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListAppVersions" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListAppVersionsRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListAppVersionsRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListAppVersionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listAppVersions<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListAppVersionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListAppVersionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListAppVersionsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListAppVersionsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateAssetContainer" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateAssetContainerRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_CreateAssetContainerRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_AssetContainer` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createAssetContainer<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_CreateAssetContainerRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_CreateAssetContainerRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_AssetContainer>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_AssetContainer>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetAssetContainer" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetAssetContainerRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetAssetContainerRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_AssetContainer` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getAssetContainer<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetAssetContainerRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetAssetContainerRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_AssetContainer>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_AssetContainer>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateAssetContainer" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_UpdateAssetContainerRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_UpdateAssetContainerRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_AssetContainer` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateAssetContainer<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_UpdateAssetContainerRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_UpdateAssetContainerRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_AssetContainer>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_AssetContainer>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListAssetContainers" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListAssetContainersRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListAssetContainersRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListAssetContainersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listAssetContainers<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListAssetContainersRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListAssetContainersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListAssetContainersResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListAssetContainersResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListAssetContainersByApp" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListAssetContainersByAppRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListAssetContainersByAppRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListAssetContainersByAppResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listAssetContainersByApp<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListAssetContainersByAppRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListAssetContainersByAppRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListAssetContainersByAppResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListAssetContainersByAppResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "wendycloud.v1.AppService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "CreateApp" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateAppRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_CreateAppRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_App` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createApp<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_CreateAppRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_CreateAppRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_App>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_App>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_AppService.Method.CreateApp.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetApp" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetAppRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetAppRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_App` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getApp<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetAppRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetAppRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_App>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_App>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_AppService.Method.GetApp.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateApp" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_UpdateAppRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_UpdateAppRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_App` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateApp<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_UpdateAppRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_UpdateAppRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_App>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_App>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_AppService.Method.UpdateApp.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteApp" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_DeleteAppRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_DeleteAppRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_DeleteAppResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteApp<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_DeleteAppRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_DeleteAppRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_DeleteAppResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_DeleteAppResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_AppService.Method.DeleteApp.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListApps" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListAppsRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListAppsRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListAppsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listApps<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListAppsRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListAppsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListAppsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListAppsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_AppService.Method.ListApps.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateAppVersion" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateAppVersionRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_CreateAppVersionRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_AppVersion` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createAppVersion<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_CreateAppVersionRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_CreateAppVersionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_AppVersion>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_AppVersion>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_AppService.Method.CreateAppVersion.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetAppVersion" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetAppVersionRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetAppVersionRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_AppVersion` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getAppVersion<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetAppVersionRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetAppVersionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_AppVersion>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_AppVersion>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_AppService.Method.GetAppVersion.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListAppVersions" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListAppVersionsRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListAppVersionsRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListAppVersionsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listAppVersions<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListAppVersionsRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListAppVersionsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListAppVersionsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListAppVersionsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_AppService.Method.ListAppVersions.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateAssetContainer" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_CreateAssetContainerRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_CreateAssetContainerRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_AssetContainer` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createAssetContainer<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_CreateAssetContainerRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_CreateAssetContainerRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_AssetContainer>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_AssetContainer>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_AppService.Method.CreateAssetContainer.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetAssetContainer" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_GetAssetContainerRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_GetAssetContainerRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_AssetContainer` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getAssetContainer<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_GetAssetContainerRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_GetAssetContainerRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_AssetContainer>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_AssetContainer>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_AppService.Method.GetAssetContainer.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateAssetContainer" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_UpdateAssetContainerRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_UpdateAssetContainerRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_AssetContainer` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateAssetContainer<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_UpdateAssetContainerRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_UpdateAssetContainerRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_AssetContainer>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_AssetContainer>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_AppService.Method.UpdateAssetContainer.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListAssetContainers" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListAssetContainersRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListAssetContainersRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListAssetContainersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listAssetContainers<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListAssetContainersRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListAssetContainersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListAssetContainersResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListAssetContainersResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_AppService.Method.ListAssetContainers.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListAssetContainersByApp" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendycloud_V1_ListAssetContainersByAppRequest` message.
        ///   - serializer: A serializer for `Wendycloud_V1_ListAssetContainersByAppRequest` messages.
        ///   - deserializer: A deserializer for `Wendycloud_V1_ListAssetContainersByAppResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listAssetContainersByApp<Result>(
            request: GRPCCore.ClientRequest<Wendycloud_V1_ListAssetContainersByAppRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendycloud_V1_ListAssetContainersByAppRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendycloud_V1_ListAssetContainersByAppResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListAssetContainersByAppResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendycloud_V1_AppService.Method.ListAssetContainersByApp.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_AppService.ClientProtocol {
    /// Call the "CreateApp" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_CreateAppRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createApp<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_CreateAppRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_App>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createApp(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_CreateAppRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_App>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetApp" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_GetAppRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getApp<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_GetAppRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_App>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getApp(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_GetAppRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_App>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateApp" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_UpdateAppRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateApp<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_UpdateAppRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_App>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateApp(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_UpdateAppRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_App>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteApp" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_DeleteAppRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteApp<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_DeleteAppRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_DeleteAppResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteApp(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_DeleteAppRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_DeleteAppResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListApps" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_ListAppsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listApps<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_ListAppsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListAppsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listApps(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListAppsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListAppsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateAppVersion" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_CreateAppVersionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createAppVersion<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_CreateAppVersionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_AppVersion>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createAppVersion(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_CreateAppVersionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_AppVersion>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAppVersion" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_GetAppVersionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getAppVersion<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_GetAppVersionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_AppVersion>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getAppVersion(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_GetAppVersionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_AppVersion>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListAppVersions" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_ListAppVersionsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listAppVersions<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_ListAppVersionsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListAppVersionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listAppVersions(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListAppVersionsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListAppVersionsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateAssetContainer" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_CreateAssetContainerRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createAssetContainer<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_CreateAssetContainerRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_AssetContainer>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createAssetContainer(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_CreateAssetContainerRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_AssetContainer>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAssetContainer" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_GetAssetContainerRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getAssetContainer<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_GetAssetContainerRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_AssetContainer>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getAssetContainer(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_GetAssetContainerRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_AssetContainer>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateAssetContainer" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_UpdateAssetContainerRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateAssetContainer<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_UpdateAssetContainerRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_AssetContainer>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateAssetContainer(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_UpdateAssetContainerRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_AssetContainer>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListAssetContainers" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_ListAssetContainersRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listAssetContainers<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_ListAssetContainersRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListAssetContainersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listAssetContainers(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListAssetContainersRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListAssetContainersResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListAssetContainersByApp" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendycloud_V1_ListAssetContainersByAppRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listAssetContainersByApp<Result>(
        request: GRPCCore.ClientRequest<Wendycloud_V1_ListAssetContainersByAppRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListAssetContainersByAppResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listAssetContainersByApp(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendycloud_V1_ListAssetContainersByAppRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendycloud_V1_ListAssetContainersByAppResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendycloud_V1_AppService.ClientProtocol {
    /// Call the "CreateApp" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createApp<Result>(
        _ message: Wendycloud_V1_CreateAppRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_App>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_CreateAppRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createApp(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetApp" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getApp<Result>(
        _ message: Wendycloud_V1_GetAppRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_App>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_GetAppRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getApp(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateApp" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateApp<Result>(
        _ message: Wendycloud_V1_UpdateAppRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_App>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_UpdateAppRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateApp(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteApp" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteApp<Result>(
        _ message: Wendycloud_V1_DeleteAppRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_DeleteAppResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_DeleteAppRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteApp(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListApps" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listApps<Result>(
        _ message: Wendycloud_V1_ListAppsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListAppsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_ListAppsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listApps(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateAppVersion" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createAppVersion<Result>(
        _ message: Wendycloud_V1_CreateAppVersionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_AppVersion>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_CreateAppVersionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createAppVersion(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAppVersion" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getAppVersion<Result>(
        _ message: Wendycloud_V1_GetAppVersionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_AppVersion>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_GetAppVersionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getAppVersion(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListAppVersions" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listAppVersions<Result>(
        _ message: Wendycloud_V1_ListAppVersionsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListAppVersionsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_ListAppVersionsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listAppVersions(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateAssetContainer" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createAssetContainer<Result>(
        _ message: Wendycloud_V1_CreateAssetContainerRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_AssetContainer>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_CreateAssetContainerRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createAssetContainer(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAssetContainer" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getAssetContainer<Result>(
        _ message: Wendycloud_V1_GetAssetContainerRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_AssetContainer>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_GetAssetContainerRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getAssetContainer(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateAssetContainer" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateAssetContainer<Result>(
        _ message: Wendycloud_V1_UpdateAssetContainerRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_AssetContainer>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_UpdateAssetContainerRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateAssetContainer(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListAssetContainers" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listAssetContainers<Result>(
        _ message: Wendycloud_V1_ListAssetContainersRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListAssetContainersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_ListAssetContainersRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listAssetContainers(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListAssetContainersByApp" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listAssetContainersByApp<Result>(
        _ message: Wendycloud_V1_ListAssetContainersByAppRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendycloud_V1_ListAssetContainersByAppResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendycloud_V1_ListAssetContainersByAppRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listAssetContainersByApp(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}