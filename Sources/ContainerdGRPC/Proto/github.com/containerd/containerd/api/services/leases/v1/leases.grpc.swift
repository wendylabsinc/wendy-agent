///
///Copyright The containerd Authors.
///
///Licensed under the Apache License, Version 2.0 (the "License");
///you may not use this file except in compliance with the License.
///You may obtain a copy of the License at
///
///http://www.apache.org/licenses/LICENSE-2.0
///
///Unless required by applicable law or agreed to in writing, software
///distributed under the License is distributed on an "AS IS" BASIS,
///WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
///See the License for the specific language governing permissions and
///limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: github.com/containerd/containerd/api/services/leases/v1/leases.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - containerd.services.leases.v1.Leases

/// Namespace containing generated types for the "containerd.services.leases.v1.Leases" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public enum Containerd_Services_Leases_V1_Leases {
    /// Service descriptor for the "containerd.services.leases.v1.Leases" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.leases.v1.Leases")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "Create" metadata.
        public enum Create {
            /// Request type for "Create".
            public typealias Input = Containerd_Services_Leases_V1_CreateRequest
            /// Response type for "Create".
            public typealias Output = Containerd_Services_Leases_V1_CreateResponse
            /// Descriptor for "Create".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.leases.v1.Leases"),
                method: "Create"
            )
        }
        /// Namespace for "Delete" metadata.
        public enum Delete {
            /// Request type for "Delete".
            public typealias Input = Containerd_Services_Leases_V1_DeleteRequest
            /// Response type for "Delete".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "Delete".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.leases.v1.Leases"),
                method: "Delete"
            )
        }
        /// Namespace for "List" metadata.
        public enum List {
            /// Request type for "List".
            public typealias Input = Containerd_Services_Leases_V1_ListRequest
            /// Response type for "List".
            public typealias Output = Containerd_Services_Leases_V1_ListResponse
            /// Descriptor for "List".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.leases.v1.Leases"),
                method: "List"
            )
        }
        /// Namespace for "AddResource" metadata.
        public enum AddResource {
            /// Request type for "AddResource".
            public typealias Input = Containerd_Services_Leases_V1_AddResourceRequest
            /// Response type for "AddResource".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "AddResource".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.leases.v1.Leases"),
                method: "AddResource"
            )
        }
        /// Namespace for "DeleteResource" metadata.
        public enum DeleteResource {
            /// Request type for "DeleteResource".
            public typealias Input = Containerd_Services_Leases_V1_DeleteResourceRequest
            /// Response type for "DeleteResource".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "DeleteResource".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.leases.v1.Leases"),
                method: "DeleteResource"
            )
        }
        /// Namespace for "ListResources" metadata.
        public enum ListResources {
            /// Request type for "ListResources".
            public typealias Input = Containerd_Services_Leases_V1_ListResourcesRequest
            /// Response type for "ListResources".
            public typealias Output = Containerd_Services_Leases_V1_ListResourcesResponse
            /// Descriptor for "ListResources".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.leases.v1.Leases"),
                method: "ListResources"
            )
        }
        /// Descriptors for all methods in the "containerd.services.leases.v1.Leases" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            Create.descriptor,
            Delete.descriptor,
            List.descriptor,
            AddResource.descriptor,
            DeleteResource.descriptor,
            ListResources.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "containerd.services.leases.v1.Leases" service.
    public static let containerd_services_leases_v1_Leases = GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.leases.v1.Leases")
}

// MARK: containerd.services.leases.v1.Leases (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Containerd_Services_Leases_V1_Leases {
    /// Generated client protocol for the "containerd.services.leases.v1.Leases" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Leases service manages resources leases within the metadata store.
    public protocol ClientProtocol: Sendable {
        /// Call the "Create" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create creates a new lease for managing changes to metadata. A lease
        /// > can be used to protect objects from being removed.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Leases_V1_CreateRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Leases_V1_CreateRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Leases_V1_CreateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func create<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Leases_V1_CreateRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Leases_V1_CreateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Leases_V1_CreateResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Leases_V1_CreateResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Delete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete deletes the lease and makes any unreferenced objects created
        /// > during the lease eligible for garbage collection if not referenced
        /// > or retained by other resources during the lease.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Leases_V1_DeleteRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Leases_V1_DeleteRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func delete<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Leases_V1_DeleteRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Leases_V1_DeleteRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "List" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List lists all active leases, returning the full list of
        /// > leases and optionally including the referenced resources.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Leases_V1_ListRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Leases_V1_ListRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Leases_V1_ListResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func list<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Leases_V1_ListRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Leases_V1_ListRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Leases_V1_ListResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Leases_V1_ListResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "AddResource" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > AddResource references the resource by the provided lease.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Leases_V1_AddResourceRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Leases_V1_AddResourceRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func addResource<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Leases_V1_AddResourceRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Leases_V1_AddResourceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteResource" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeleteResource dereferences the resource by the provided lease.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Leases_V1_DeleteResourceRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Leases_V1_DeleteResourceRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteResource<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Leases_V1_DeleteResourceRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Leases_V1_DeleteResourceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListResources" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListResources lists all the resources referenced by the lease.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Leases_V1_ListResourcesRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Leases_V1_ListResourcesRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Leases_V1_ListResourcesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listResources<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Leases_V1_ListResourcesRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Leases_V1_ListResourcesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Leases_V1_ListResourcesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Leases_V1_ListResourcesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "containerd.services.leases.v1.Leases" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Leases service manages resources leases within the metadata store.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "Create" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create creates a new lease for managing changes to metadata. A lease
        /// > can be used to protect objects from being removed.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Leases_V1_CreateRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Leases_V1_CreateRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Leases_V1_CreateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func create<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Leases_V1_CreateRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Leases_V1_CreateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Leases_V1_CreateResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Leases_V1_CreateResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Leases_V1_Leases.Method.Create.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Delete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete deletes the lease and makes any unreferenced objects created
        /// > during the lease eligible for garbage collection if not referenced
        /// > or retained by other resources during the lease.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Leases_V1_DeleteRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Leases_V1_DeleteRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func delete<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Leases_V1_DeleteRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Leases_V1_DeleteRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Leases_V1_Leases.Method.Delete.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "List" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List lists all active leases, returning the full list of
        /// > leases and optionally including the referenced resources.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Leases_V1_ListRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Leases_V1_ListRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Leases_V1_ListResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func list<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Leases_V1_ListRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Leases_V1_ListRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Leases_V1_ListResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Leases_V1_ListResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Leases_V1_Leases.Method.List.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "AddResource" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > AddResource references the resource by the provided lease.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Leases_V1_AddResourceRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Leases_V1_AddResourceRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func addResource<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Leases_V1_AddResourceRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Leases_V1_AddResourceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Leases_V1_Leases.Method.AddResource.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteResource" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > DeleteResource dereferences the resource by the provided lease.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Leases_V1_DeleteResourceRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Leases_V1_DeleteResourceRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteResource<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Leases_V1_DeleteResourceRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Leases_V1_DeleteResourceRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Leases_V1_Leases.Method.DeleteResource.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListResources" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListResources lists all the resources referenced by the lease.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Leases_V1_ListResourcesRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Leases_V1_ListResourcesRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Leases_V1_ListResourcesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listResources<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Leases_V1_ListResourcesRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Leases_V1_ListResourcesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Leases_V1_ListResourcesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Leases_V1_ListResourcesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Leases_V1_Leases.Method.ListResources.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Containerd_Services_Leases_V1_Leases.ClientProtocol {
    /// Call the "Create" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create creates a new lease for managing changes to metadata. A lease
    /// > can be used to protect objects from being removed.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Leases_V1_CreateRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func create<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Leases_V1_CreateRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Leases_V1_CreateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.create(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Leases_V1_CreateRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Leases_V1_CreateResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Delete" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete deletes the lease and makes any unreferenced objects created
    /// > during the lease eligible for garbage collection if not referenced
    /// > or retained by other resources during the lease.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Leases_V1_DeleteRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func delete<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Leases_V1_DeleteRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.delete(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Leases_V1_DeleteRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "List" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > List lists all active leases, returning the full list of
    /// > leases and optionally including the referenced resources.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Leases_V1_ListRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func list<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Leases_V1_ListRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Leases_V1_ListResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.list(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Leases_V1_ListRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Leases_V1_ListResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AddResource" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > AddResource references the resource by the provided lease.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Leases_V1_AddResourceRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func addResource<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Leases_V1_AddResourceRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.addResource(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Leases_V1_AddResourceRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteResource" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeleteResource dereferences the resource by the provided lease.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Leases_V1_DeleteResourceRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteResource<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Leases_V1_DeleteResourceRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteResource(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Leases_V1_DeleteResourceRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListResources" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListResources lists all the resources referenced by the lease.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Leases_V1_ListResourcesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listResources<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Leases_V1_ListResourcesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Leases_V1_ListResourcesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listResources(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Leases_V1_ListResourcesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Leases_V1_ListResourcesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Containerd_Services_Leases_V1_Leases.ClientProtocol {
    /// Call the "Create" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create creates a new lease for managing changes to metadata. A lease
    /// > can be used to protect objects from being removed.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func create<Result>(
        _ message: Containerd_Services_Leases_V1_CreateRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Leases_V1_CreateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Leases_V1_CreateRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.create(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Delete" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete deletes the lease and makes any unreferenced objects created
    /// > during the lease eligible for garbage collection if not referenced
    /// > or retained by other resources during the lease.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func delete<Result>(
        _ message: Containerd_Services_Leases_V1_DeleteRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Leases_V1_DeleteRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.delete(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "List" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > List lists all active leases, returning the full list of
    /// > leases and optionally including the referenced resources.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func list<Result>(
        _ message: Containerd_Services_Leases_V1_ListRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Leases_V1_ListResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Leases_V1_ListRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.list(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AddResource" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > AddResource references the resource by the provided lease.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func addResource<Result>(
        _ message: Containerd_Services_Leases_V1_AddResourceRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Leases_V1_AddResourceRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.addResource(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteResource" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DeleteResource dereferences the resource by the provided lease.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteResource<Result>(
        _ message: Containerd_Services_Leases_V1_DeleteResourceRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Leases_V1_DeleteResourceRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteResource(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListResources" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListResources lists all the resources referenced by the lease.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listResources<Result>(
        _ message: Containerd_Services_Leases_V1_ListResourcesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Leases_V1_ListResourcesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Leases_V1_ListResourcesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listResources(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}