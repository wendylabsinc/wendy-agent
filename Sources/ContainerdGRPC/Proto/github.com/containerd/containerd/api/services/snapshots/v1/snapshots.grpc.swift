//
//Copyright The containerd Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: github.com/containerd/containerd/api/services/snapshots/v1/snapshots.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - containerd.services.snapshots.v1.Snapshots

/// Namespace containing generated types for the "containerd.services.snapshots.v1.Snapshots" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public enum Containerd_Services_Snapshots_V1_Snapshots {
    /// Service descriptor for the "containerd.services.snapshots.v1.Snapshots" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.snapshots.v1.Snapshots")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "Prepare" metadata.
        public enum Prepare {
            /// Request type for "Prepare".
            public typealias Input = Containerd_Services_Snapshots_V1_PrepareSnapshotRequest
            /// Response type for "Prepare".
            public typealias Output = Containerd_Services_Snapshots_V1_PrepareSnapshotResponse
            /// Descriptor for "Prepare".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.snapshots.v1.Snapshots"),
                method: "Prepare"
            )
        }
        /// Namespace for "View" metadata.
        public enum View {
            /// Request type for "View".
            public typealias Input = Containerd_Services_Snapshots_V1_ViewSnapshotRequest
            /// Response type for "View".
            public typealias Output = Containerd_Services_Snapshots_V1_ViewSnapshotResponse
            /// Descriptor for "View".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.snapshots.v1.Snapshots"),
                method: "View"
            )
        }
        /// Namespace for "Mounts" metadata.
        public enum Mounts {
            /// Request type for "Mounts".
            public typealias Input = Containerd_Services_Snapshots_V1_MountsRequest
            /// Response type for "Mounts".
            public typealias Output = Containerd_Services_Snapshots_V1_MountsResponse
            /// Descriptor for "Mounts".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.snapshots.v1.Snapshots"),
                method: "Mounts"
            )
        }
        /// Namespace for "Commit" metadata.
        public enum Commit {
            /// Request type for "Commit".
            public typealias Input = Containerd_Services_Snapshots_V1_CommitSnapshotRequest
            /// Response type for "Commit".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "Commit".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.snapshots.v1.Snapshots"),
                method: "Commit"
            )
        }
        /// Namespace for "Remove" metadata.
        public enum Remove {
            /// Request type for "Remove".
            public typealias Input = Containerd_Services_Snapshots_V1_RemoveSnapshotRequest
            /// Response type for "Remove".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "Remove".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.snapshots.v1.Snapshots"),
                method: "Remove"
            )
        }
        /// Namespace for "Stat" metadata.
        public enum Stat {
            /// Request type for "Stat".
            public typealias Input = Containerd_Services_Snapshots_V1_StatSnapshotRequest
            /// Response type for "Stat".
            public typealias Output = Containerd_Services_Snapshots_V1_StatSnapshotResponse
            /// Descriptor for "Stat".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.snapshots.v1.Snapshots"),
                method: "Stat"
            )
        }
        /// Namespace for "Update" metadata.
        public enum Update {
            /// Request type for "Update".
            public typealias Input = Containerd_Services_Snapshots_V1_UpdateSnapshotRequest
            /// Response type for "Update".
            public typealias Output = Containerd_Services_Snapshots_V1_UpdateSnapshotResponse
            /// Descriptor for "Update".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.snapshots.v1.Snapshots"),
                method: "Update"
            )
        }
        /// Namespace for "List" metadata.
        public enum List {
            /// Request type for "List".
            public typealias Input = Containerd_Services_Snapshots_V1_ListSnapshotsRequest
            /// Response type for "List".
            public typealias Output = Containerd_Services_Snapshots_V1_ListSnapshotsResponse
            /// Descriptor for "List".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.snapshots.v1.Snapshots"),
                method: "List"
            )
        }
        /// Namespace for "Usage" metadata.
        public enum Usage {
            /// Request type for "Usage".
            public typealias Input = Containerd_Services_Snapshots_V1_UsageRequest
            /// Response type for "Usage".
            public typealias Output = Containerd_Services_Snapshots_V1_UsageResponse
            /// Descriptor for "Usage".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.snapshots.v1.Snapshots"),
                method: "Usage"
            )
        }
        /// Namespace for "Cleanup" metadata.
        public enum Cleanup {
            /// Request type for "Cleanup".
            public typealias Input = Containerd_Services_Snapshots_V1_CleanupRequest
            /// Response type for "Cleanup".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "Cleanup".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.snapshots.v1.Snapshots"),
                method: "Cleanup"
            )
        }
        /// Descriptors for all methods in the "containerd.services.snapshots.v1.Snapshots" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            Prepare.descriptor,
            View.descriptor,
            Mounts.descriptor,
            Commit.descriptor,
            Remove.descriptor,
            Stat.descriptor,
            Update.descriptor,
            List.descriptor,
            Usage.descriptor,
            Cleanup.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "containerd.services.snapshots.v1.Snapshots" service.
    public static let containerd_services_snapshots_v1_Snapshots = GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.snapshots.v1.Snapshots")
}

// MARK: containerd.services.snapshots.v1.Snapshots (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Containerd_Services_Snapshots_V1_Snapshots {
    /// Generated client protocol for the "containerd.services.snapshots.v1.Snapshots" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Snapshot service manages snapshots
    public protocol ClientProtocol: Sendable {
        /// Call the "Prepare" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_PrepareSnapshotRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Snapshots_V1_PrepareSnapshotRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Snapshots_V1_PrepareSnapshotResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func prepare<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_PrepareSnapshotRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Snapshots_V1_PrepareSnapshotRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Snapshots_V1_PrepareSnapshotResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Snapshots_V1_PrepareSnapshotResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "View" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_ViewSnapshotRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Snapshots_V1_ViewSnapshotRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Snapshots_V1_ViewSnapshotResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func view<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_ViewSnapshotRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Snapshots_V1_ViewSnapshotRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Snapshots_V1_ViewSnapshotResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Snapshots_V1_ViewSnapshotResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Mounts" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_MountsRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Snapshots_V1_MountsRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Snapshots_V1_MountsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func mounts<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_MountsRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Snapshots_V1_MountsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Snapshots_V1_MountsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Snapshots_V1_MountsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Commit" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_CommitSnapshotRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Snapshots_V1_CommitSnapshotRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func commit<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_CommitSnapshotRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Snapshots_V1_CommitSnapshotRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Remove" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_RemoveSnapshotRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Snapshots_V1_RemoveSnapshotRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func remove<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_RemoveSnapshotRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Snapshots_V1_RemoveSnapshotRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Stat" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_StatSnapshotRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Snapshots_V1_StatSnapshotRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Snapshots_V1_StatSnapshotResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func stat<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_StatSnapshotRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Snapshots_V1_StatSnapshotRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Snapshots_V1_StatSnapshotResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Snapshots_V1_StatSnapshotResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_UpdateSnapshotRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Snapshots_V1_UpdateSnapshotRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Snapshots_V1_UpdateSnapshotResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func update<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_UpdateSnapshotRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Snapshots_V1_UpdateSnapshotRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Snapshots_V1_UpdateSnapshotResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Snapshots_V1_UpdateSnapshotResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "List" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_ListSnapshotsRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Snapshots_V1_ListSnapshotsRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Snapshots_V1_ListSnapshotsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func list<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_ListSnapshotsRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Snapshots_V1_ListSnapshotsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Snapshots_V1_ListSnapshotsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Containerd_Services_Snapshots_V1_ListSnapshotsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Usage" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_UsageRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Snapshots_V1_UsageRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Snapshots_V1_UsageResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func usage<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_UsageRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Snapshots_V1_UsageRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Snapshots_V1_UsageResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Snapshots_V1_UsageResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Cleanup" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_CleanupRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Snapshots_V1_CleanupRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func cleanup<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_CleanupRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Snapshots_V1_CleanupRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "containerd.services.snapshots.v1.Snapshots" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Snapshot service manages snapshots
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "Prepare" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_PrepareSnapshotRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Snapshots_V1_PrepareSnapshotRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Snapshots_V1_PrepareSnapshotResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func prepare<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_PrepareSnapshotRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Snapshots_V1_PrepareSnapshotRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Snapshots_V1_PrepareSnapshotResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Snapshots_V1_PrepareSnapshotResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Snapshots_V1_Snapshots.Method.Prepare.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "View" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_ViewSnapshotRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Snapshots_V1_ViewSnapshotRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Snapshots_V1_ViewSnapshotResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func view<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_ViewSnapshotRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Snapshots_V1_ViewSnapshotRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Snapshots_V1_ViewSnapshotResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Snapshots_V1_ViewSnapshotResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Snapshots_V1_Snapshots.Method.View.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Mounts" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_MountsRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Snapshots_V1_MountsRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Snapshots_V1_MountsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func mounts<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_MountsRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Snapshots_V1_MountsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Snapshots_V1_MountsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Snapshots_V1_MountsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Snapshots_V1_Snapshots.Method.Mounts.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Commit" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_CommitSnapshotRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Snapshots_V1_CommitSnapshotRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func commit<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_CommitSnapshotRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Snapshots_V1_CommitSnapshotRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Snapshots_V1_Snapshots.Method.Commit.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Remove" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_RemoveSnapshotRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Snapshots_V1_RemoveSnapshotRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func remove<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_RemoveSnapshotRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Snapshots_V1_RemoveSnapshotRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Snapshots_V1_Snapshots.Method.Remove.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Stat" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_StatSnapshotRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Snapshots_V1_StatSnapshotRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Snapshots_V1_StatSnapshotResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func stat<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_StatSnapshotRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Snapshots_V1_StatSnapshotRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Snapshots_V1_StatSnapshotResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Snapshots_V1_StatSnapshotResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Snapshots_V1_Snapshots.Method.Stat.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_UpdateSnapshotRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Snapshots_V1_UpdateSnapshotRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Snapshots_V1_UpdateSnapshotResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func update<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_UpdateSnapshotRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Snapshots_V1_UpdateSnapshotRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Snapshots_V1_UpdateSnapshotResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Snapshots_V1_UpdateSnapshotResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Snapshots_V1_Snapshots.Method.Update.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "List" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_ListSnapshotsRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Snapshots_V1_ListSnapshotsRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Snapshots_V1_ListSnapshotsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func list<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_ListSnapshotsRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Snapshots_V1_ListSnapshotsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Snapshots_V1_ListSnapshotsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Containerd_Services_Snapshots_V1_ListSnapshotsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.serverStreaming(
                request: request,
                descriptor: Containerd_Services_Snapshots_V1_Snapshots.Method.List.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Usage" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_UsageRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Snapshots_V1_UsageRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Snapshots_V1_UsageResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func usage<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_UsageRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Snapshots_V1_UsageRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Snapshots_V1_UsageResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Snapshots_V1_UsageResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Snapshots_V1_Snapshots.Method.Usage.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Cleanup" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_CleanupRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Snapshots_V1_CleanupRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func cleanup<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_CleanupRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Snapshots_V1_CleanupRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Snapshots_V1_Snapshots.Method.Cleanup.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Containerd_Services_Snapshots_V1_Snapshots.ClientProtocol {
    /// Call the "Prepare" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_PrepareSnapshotRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func prepare<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_PrepareSnapshotRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Snapshots_V1_PrepareSnapshotResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.prepare(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Snapshots_V1_PrepareSnapshotRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Snapshots_V1_PrepareSnapshotResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "View" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_ViewSnapshotRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func view<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_ViewSnapshotRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Snapshots_V1_ViewSnapshotResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.view(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Snapshots_V1_ViewSnapshotRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Snapshots_V1_ViewSnapshotResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Mounts" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_MountsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func mounts<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_MountsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Snapshots_V1_MountsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.mounts(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Snapshots_V1_MountsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Snapshots_V1_MountsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Commit" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_CommitSnapshotRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func commit<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_CommitSnapshotRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.commit(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Snapshots_V1_CommitSnapshotRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Remove" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_RemoveSnapshotRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func remove<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_RemoveSnapshotRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.remove(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Snapshots_V1_RemoveSnapshotRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Stat" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_StatSnapshotRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func stat<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_StatSnapshotRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Snapshots_V1_StatSnapshotResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.stat(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Snapshots_V1_StatSnapshotRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Snapshots_V1_StatSnapshotResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Update" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_UpdateSnapshotRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func update<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_UpdateSnapshotRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Snapshots_V1_UpdateSnapshotResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.update(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Snapshots_V1_UpdateSnapshotRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Snapshots_V1_UpdateSnapshotResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "List" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_ListSnapshotsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func list<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_ListSnapshotsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Containerd_Services_Snapshots_V1_ListSnapshotsResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.list(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Snapshots_V1_ListSnapshotsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Snapshots_V1_ListSnapshotsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Usage" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_UsageRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func usage<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_UsageRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Snapshots_V1_UsageResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.usage(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Snapshots_V1_UsageRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Snapshots_V1_UsageResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Cleanup" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Snapshots_V1_CleanupRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func cleanup<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_CleanupRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.cleanup(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Snapshots_V1_CleanupRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Containerd_Services_Snapshots_V1_Snapshots.ClientProtocol {
    /// Call the "Prepare" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func prepare<Result>(
        _ message: Containerd_Services_Snapshots_V1_PrepareSnapshotRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Snapshots_V1_PrepareSnapshotResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_PrepareSnapshotRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.prepare(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "View" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func view<Result>(
        _ message: Containerd_Services_Snapshots_V1_ViewSnapshotRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Snapshots_V1_ViewSnapshotResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_ViewSnapshotRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.view(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Mounts" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func mounts<Result>(
        _ message: Containerd_Services_Snapshots_V1_MountsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Snapshots_V1_MountsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_MountsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.mounts(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Commit" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func commit<Result>(
        _ message: Containerd_Services_Snapshots_V1_CommitSnapshotRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_CommitSnapshotRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.commit(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Remove" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func remove<Result>(
        _ message: Containerd_Services_Snapshots_V1_RemoveSnapshotRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_RemoveSnapshotRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.remove(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Stat" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func stat<Result>(
        _ message: Containerd_Services_Snapshots_V1_StatSnapshotRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Snapshots_V1_StatSnapshotResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_StatSnapshotRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.stat(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Update" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func update<Result>(
        _ message: Containerd_Services_Snapshots_V1_UpdateSnapshotRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Snapshots_V1_UpdateSnapshotResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_UpdateSnapshotRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.update(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "List" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func list<Result>(
        _ message: Containerd_Services_Snapshots_V1_ListSnapshotsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Containerd_Services_Snapshots_V1_ListSnapshotsResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_ListSnapshotsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.list(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Usage" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func usage<Result>(
        _ message: Containerd_Services_Snapshots_V1_UsageRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Snapshots_V1_UsageResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_UsageRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.usage(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Cleanup" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func cleanup<Result>(
        _ message: Containerd_Services_Snapshots_V1_CleanupRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Snapshots_V1_CleanupRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.cleanup(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}