//
//Copyright The containerd Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: github.com/containerd/containerd/api/services/sandbox/v1/sandbox.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - containerd.services.sandbox.v1.Store

/// Namespace containing generated types for the "containerd.services.sandbox.v1.Store" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public enum Containerd_Services_Sandbox_V1_Store {
    /// Service descriptor for the "containerd.services.sandbox.v1.Store" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.sandbox.v1.Store")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "Create" metadata.
        public enum Create {
            /// Request type for "Create".
            public typealias Input = Containerd_Services_Sandbox_V1_StoreCreateRequest
            /// Response type for "Create".
            public typealias Output = Containerd_Services_Sandbox_V1_StoreCreateResponse
            /// Descriptor for "Create".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.sandbox.v1.Store"),
                method: "Create"
            )
        }
        /// Namespace for "Update" metadata.
        public enum Update {
            /// Request type for "Update".
            public typealias Input = Containerd_Services_Sandbox_V1_StoreUpdateRequest
            /// Response type for "Update".
            public typealias Output = Containerd_Services_Sandbox_V1_StoreUpdateResponse
            /// Descriptor for "Update".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.sandbox.v1.Store"),
                method: "Update"
            )
        }
        /// Namespace for "Delete" metadata.
        public enum Delete {
            /// Request type for "Delete".
            public typealias Input = Containerd_Services_Sandbox_V1_StoreDeleteRequest
            /// Response type for "Delete".
            public typealias Output = Containerd_Services_Sandbox_V1_StoreDeleteResponse
            /// Descriptor for "Delete".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.sandbox.v1.Store"),
                method: "Delete"
            )
        }
        /// Namespace for "List" metadata.
        public enum List {
            /// Request type for "List".
            public typealias Input = Containerd_Services_Sandbox_V1_StoreListRequest
            /// Response type for "List".
            public typealias Output = Containerd_Services_Sandbox_V1_StoreListResponse
            /// Descriptor for "List".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.sandbox.v1.Store"),
                method: "List"
            )
        }
        /// Namespace for "Get" metadata.
        public enum Get {
            /// Request type for "Get".
            public typealias Input = Containerd_Services_Sandbox_V1_StoreGetRequest
            /// Response type for "Get".
            public typealias Output = Containerd_Services_Sandbox_V1_StoreGetResponse
            /// Descriptor for "Get".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.sandbox.v1.Store"),
                method: "Get"
            )
        }
        /// Descriptors for all methods in the "containerd.services.sandbox.v1.Store" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            Create.descriptor,
            Update.descriptor,
            Delete.descriptor,
            List.descriptor,
            Get.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "containerd.services.sandbox.v1.Store" service.
    public static let containerd_services_sandbox_v1_Store = GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.sandbox.v1.Store")
}

// MARK: containerd.services.sandbox.v1.Store (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Containerd_Services_Sandbox_V1_Store {
    /// Generated client protocol for the "containerd.services.sandbox.v1.Store" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Store provides a metadata storage interface for sandboxes. Similarly to `Containers`,
    /// > sandbox object includes info required to start a new instance, but no runtime state.
    /// > When running a new sandbox instance, store objects are used as base type to create from.
    public protocol ClientProtocol: Sendable {
        /// Call the "Create" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_StoreCreateRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_StoreCreateRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_StoreCreateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func create<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_StoreCreateRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_StoreCreateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_StoreCreateResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_StoreCreateResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_StoreUpdateRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_StoreUpdateRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_StoreUpdateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func update<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_StoreUpdateRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_StoreUpdateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_StoreUpdateResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_StoreUpdateResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Delete" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_StoreDeleteRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_StoreDeleteRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_StoreDeleteResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func delete<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_StoreDeleteRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_StoreDeleteRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_StoreDeleteResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_StoreDeleteResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "List" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_StoreListRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_StoreListRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_StoreListResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func list<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_StoreListRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_StoreListRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_StoreListResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_StoreListResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Get" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_StoreGetRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_StoreGetRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_StoreGetResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func get<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_StoreGetRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_StoreGetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_StoreGetResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_StoreGetResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "containerd.services.sandbox.v1.Store" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Store provides a metadata storage interface for sandboxes. Similarly to `Containers`,
    /// > sandbox object includes info required to start a new instance, but no runtime state.
    /// > When running a new sandbox instance, store objects are used as base type to create from.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "Create" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_StoreCreateRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_StoreCreateRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_StoreCreateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func create<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_StoreCreateRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_StoreCreateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_StoreCreateResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_StoreCreateResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Sandbox_V1_Store.Method.Create.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_StoreUpdateRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_StoreUpdateRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_StoreUpdateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func update<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_StoreUpdateRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_StoreUpdateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_StoreUpdateResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_StoreUpdateResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Sandbox_V1_Store.Method.Update.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Delete" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_StoreDeleteRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_StoreDeleteRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_StoreDeleteResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func delete<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_StoreDeleteRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_StoreDeleteRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_StoreDeleteResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_StoreDeleteResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Sandbox_V1_Store.Method.Delete.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "List" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_StoreListRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_StoreListRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_StoreListResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func list<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_StoreListRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_StoreListRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_StoreListResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_StoreListResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Sandbox_V1_Store.Method.List.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Get" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_StoreGetRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_StoreGetRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_StoreGetResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func get<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_StoreGetRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_StoreGetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_StoreGetResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_StoreGetResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Sandbox_V1_Store.Method.Get.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Containerd_Services_Sandbox_V1_Store.ClientProtocol {
    /// Call the "Create" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_StoreCreateRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func create<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_StoreCreateRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_StoreCreateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.create(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Sandbox_V1_StoreCreateRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Sandbox_V1_StoreCreateResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Update" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_StoreUpdateRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func update<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_StoreUpdateRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_StoreUpdateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.update(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Sandbox_V1_StoreUpdateRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Sandbox_V1_StoreUpdateResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Delete" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_StoreDeleteRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func delete<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_StoreDeleteRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_StoreDeleteResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.delete(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Sandbox_V1_StoreDeleteRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Sandbox_V1_StoreDeleteResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "List" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_StoreListRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func list<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_StoreListRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_StoreListResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.list(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Sandbox_V1_StoreListRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Sandbox_V1_StoreListResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Get" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_StoreGetRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func get<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_StoreGetRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_StoreGetResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.get(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Sandbox_V1_StoreGetRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Sandbox_V1_StoreGetResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Containerd_Services_Sandbox_V1_Store.ClientProtocol {
    /// Call the "Create" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func create<Result>(
        _ message: Containerd_Services_Sandbox_V1_StoreCreateRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_StoreCreateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_StoreCreateRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.create(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Update" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func update<Result>(
        _ message: Containerd_Services_Sandbox_V1_StoreUpdateRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_StoreUpdateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_StoreUpdateRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.update(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Delete" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func delete<Result>(
        _ message: Containerd_Services_Sandbox_V1_StoreDeleteRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_StoreDeleteResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_StoreDeleteRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.delete(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "List" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func list<Result>(
        _ message: Containerd_Services_Sandbox_V1_StoreListRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_StoreListResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_StoreListRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.list(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Get" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func get<Result>(
        _ message: Containerd_Services_Sandbox_V1_StoreGetRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_StoreGetResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_StoreGetRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.get(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}

// MARK: - containerd.services.sandbox.v1.Controller

/// Namespace containing generated types for the "containerd.services.sandbox.v1.Controller" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public enum Containerd_Services_Sandbox_V1_Controller {
    /// Service descriptor for the "containerd.services.sandbox.v1.Controller" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.sandbox.v1.Controller")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "Create" metadata.
        public enum Create {
            /// Request type for "Create".
            public typealias Input = Containerd_Services_Sandbox_V1_ControllerCreateRequest
            /// Response type for "Create".
            public typealias Output = Containerd_Services_Sandbox_V1_ControllerCreateResponse
            /// Descriptor for "Create".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.sandbox.v1.Controller"),
                method: "Create"
            )
        }
        /// Namespace for "Start" metadata.
        public enum Start {
            /// Request type for "Start".
            public typealias Input = Containerd_Services_Sandbox_V1_ControllerStartRequest
            /// Response type for "Start".
            public typealias Output = Containerd_Services_Sandbox_V1_ControllerStartResponse
            /// Descriptor for "Start".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.sandbox.v1.Controller"),
                method: "Start"
            )
        }
        /// Namespace for "Platform" metadata.
        public enum Platform {
            /// Request type for "Platform".
            public typealias Input = Containerd_Services_Sandbox_V1_ControllerPlatformRequest
            /// Response type for "Platform".
            public typealias Output = Containerd_Services_Sandbox_V1_ControllerPlatformResponse
            /// Descriptor for "Platform".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.sandbox.v1.Controller"),
                method: "Platform"
            )
        }
        /// Namespace for "Stop" metadata.
        public enum Stop {
            /// Request type for "Stop".
            public typealias Input = Containerd_Services_Sandbox_V1_ControllerStopRequest
            /// Response type for "Stop".
            public typealias Output = Containerd_Services_Sandbox_V1_ControllerStopResponse
            /// Descriptor for "Stop".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.sandbox.v1.Controller"),
                method: "Stop"
            )
        }
        /// Namespace for "Wait" metadata.
        public enum Wait {
            /// Request type for "Wait".
            public typealias Input = Containerd_Services_Sandbox_V1_ControllerWaitRequest
            /// Response type for "Wait".
            public typealias Output = Containerd_Services_Sandbox_V1_ControllerWaitResponse
            /// Descriptor for "Wait".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.sandbox.v1.Controller"),
                method: "Wait"
            )
        }
        /// Namespace for "Status" metadata.
        public enum Status {
            /// Request type for "Status".
            public typealias Input = Containerd_Services_Sandbox_V1_ControllerStatusRequest
            /// Response type for "Status".
            public typealias Output = Containerd_Services_Sandbox_V1_ControllerStatusResponse
            /// Descriptor for "Status".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.sandbox.v1.Controller"),
                method: "Status"
            )
        }
        /// Namespace for "Shutdown" metadata.
        public enum Shutdown {
            /// Request type for "Shutdown".
            public typealias Input = Containerd_Services_Sandbox_V1_ControllerShutdownRequest
            /// Response type for "Shutdown".
            public typealias Output = Containerd_Services_Sandbox_V1_ControllerShutdownResponse
            /// Descriptor for "Shutdown".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.sandbox.v1.Controller"),
                method: "Shutdown"
            )
        }
        /// Namespace for "Metrics" metadata.
        public enum Metrics {
            /// Request type for "Metrics".
            public typealias Input = Containerd_Services_Sandbox_V1_ControllerMetricsRequest
            /// Response type for "Metrics".
            public typealias Output = Containerd_Services_Sandbox_V1_ControllerMetricsResponse
            /// Descriptor for "Metrics".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.sandbox.v1.Controller"),
                method: "Metrics"
            )
        }
        /// Namespace for "Update" metadata.
        public enum Update {
            /// Request type for "Update".
            public typealias Input = Containerd_Services_Sandbox_V1_ControllerUpdateRequest
            /// Response type for "Update".
            public typealias Output = Containerd_Services_Sandbox_V1_ControllerUpdateResponse
            /// Descriptor for "Update".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.sandbox.v1.Controller"),
                method: "Update"
            )
        }
        /// Descriptors for all methods in the "containerd.services.sandbox.v1.Controller" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            Create.descriptor,
            Start.descriptor,
            Platform.descriptor,
            Stop.descriptor,
            Wait.descriptor,
            Status.descriptor,
            Shutdown.descriptor,
            Metrics.descriptor,
            Update.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "containerd.services.sandbox.v1.Controller" service.
    public static let containerd_services_sandbox_v1_Controller = GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.sandbox.v1.Controller")
}

// MARK: containerd.services.sandbox.v1.Controller (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Containerd_Services_Sandbox_V1_Controller {
    /// Generated client protocol for the "containerd.services.sandbox.v1.Controller" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Controller is an interface to manage runtime sandbox instances.
    public protocol ClientProtocol: Sendable {
        /// Call the "Create" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerCreateRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_ControllerCreateRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_ControllerCreateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func create<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerCreateRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_ControllerCreateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_ControllerCreateResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerCreateResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Start" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerStartRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_ControllerStartRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_ControllerStartResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func start<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerStartRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_ControllerStartRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_ControllerStartResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerStartResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Platform" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerPlatformRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_ControllerPlatformRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_ControllerPlatformResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func platform<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerPlatformRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_ControllerPlatformRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_ControllerPlatformResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerPlatformResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Stop" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerStopRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_ControllerStopRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_ControllerStopResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func stop<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerStopRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_ControllerStopRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_ControllerStopResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerStopResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Wait" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerWaitRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_ControllerWaitRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_ControllerWaitResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func wait<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerWaitRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_ControllerWaitRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_ControllerWaitResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerWaitResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Status" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerStatusRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_ControllerStatusRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_ControllerStatusResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func status<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerStatusRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_ControllerStatusRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_ControllerStatusResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerStatusResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Shutdown" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerShutdownRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_ControllerShutdownRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_ControllerShutdownResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func shutdown<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerShutdownRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_ControllerShutdownRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_ControllerShutdownResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerShutdownResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Metrics" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerMetricsRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_ControllerMetricsRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_ControllerMetricsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func metrics<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerMetricsRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_ControllerMetricsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_ControllerMetricsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerMetricsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerUpdateRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_ControllerUpdateRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_ControllerUpdateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func update<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerUpdateRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_ControllerUpdateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_ControllerUpdateResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerUpdateResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "containerd.services.sandbox.v1.Controller" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Controller is an interface to manage runtime sandbox instances.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "Create" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerCreateRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_ControllerCreateRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_ControllerCreateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func create<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerCreateRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_ControllerCreateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_ControllerCreateResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerCreateResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Sandbox_V1_Controller.Method.Create.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Start" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerStartRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_ControllerStartRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_ControllerStartResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func start<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerStartRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_ControllerStartRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_ControllerStartResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerStartResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Sandbox_V1_Controller.Method.Start.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Platform" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerPlatformRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_ControllerPlatformRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_ControllerPlatformResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func platform<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerPlatformRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_ControllerPlatformRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_ControllerPlatformResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerPlatformResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Sandbox_V1_Controller.Method.Platform.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Stop" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerStopRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_ControllerStopRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_ControllerStopResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func stop<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerStopRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_ControllerStopRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_ControllerStopResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerStopResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Sandbox_V1_Controller.Method.Stop.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Wait" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerWaitRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_ControllerWaitRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_ControllerWaitResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func wait<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerWaitRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_ControllerWaitRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_ControllerWaitResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerWaitResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Sandbox_V1_Controller.Method.Wait.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Status" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerStatusRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_ControllerStatusRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_ControllerStatusResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func status<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerStatusRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_ControllerStatusRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_ControllerStatusResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerStatusResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Sandbox_V1_Controller.Method.Status.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Shutdown" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerShutdownRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_ControllerShutdownRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_ControllerShutdownResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func shutdown<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerShutdownRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_ControllerShutdownRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_ControllerShutdownResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerShutdownResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Sandbox_V1_Controller.Method.Shutdown.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Metrics" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerMetricsRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_ControllerMetricsRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_ControllerMetricsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func metrics<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerMetricsRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_ControllerMetricsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_ControllerMetricsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerMetricsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Sandbox_V1_Controller.Method.Metrics.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerUpdateRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Sandbox_V1_ControllerUpdateRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Sandbox_V1_ControllerUpdateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func update<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerUpdateRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Sandbox_V1_ControllerUpdateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Sandbox_V1_ControllerUpdateResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerUpdateResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Sandbox_V1_Controller.Method.Update.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Containerd_Services_Sandbox_V1_Controller.ClientProtocol {
    /// Call the "Create" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerCreateRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func create<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerCreateRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerCreateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.create(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Sandbox_V1_ControllerCreateRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Sandbox_V1_ControllerCreateResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Start" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerStartRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func start<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerStartRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerStartResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.start(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Sandbox_V1_ControllerStartRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Sandbox_V1_ControllerStartResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Platform" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerPlatformRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func platform<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerPlatformRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerPlatformResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.platform(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Sandbox_V1_ControllerPlatformRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Sandbox_V1_ControllerPlatformResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Stop" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerStopRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func stop<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerStopRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerStopResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.stop(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Sandbox_V1_ControllerStopRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Sandbox_V1_ControllerStopResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Wait" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerWaitRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func wait<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerWaitRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerWaitResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.wait(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Sandbox_V1_ControllerWaitRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Sandbox_V1_ControllerWaitResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Status" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerStatusRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func status<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerStatusRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerStatusResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.status(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Sandbox_V1_ControllerStatusRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Sandbox_V1_ControllerStatusResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Shutdown" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerShutdownRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func shutdown<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerShutdownRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerShutdownResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.shutdown(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Sandbox_V1_ControllerShutdownRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Sandbox_V1_ControllerShutdownResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Metrics" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerMetricsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func metrics<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerMetricsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerMetricsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.metrics(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Sandbox_V1_ControllerMetricsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Sandbox_V1_ControllerMetricsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Update" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Sandbox_V1_ControllerUpdateRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func update<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerUpdateRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerUpdateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.update(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Sandbox_V1_ControllerUpdateRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Sandbox_V1_ControllerUpdateResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Containerd_Services_Sandbox_V1_Controller.ClientProtocol {
    /// Call the "Create" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func create<Result>(
        _ message: Containerd_Services_Sandbox_V1_ControllerCreateRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerCreateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerCreateRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.create(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Start" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func start<Result>(
        _ message: Containerd_Services_Sandbox_V1_ControllerStartRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerStartResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerStartRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.start(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Platform" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func platform<Result>(
        _ message: Containerd_Services_Sandbox_V1_ControllerPlatformRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerPlatformResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerPlatformRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.platform(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Stop" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func stop<Result>(
        _ message: Containerd_Services_Sandbox_V1_ControllerStopRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerStopResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerStopRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.stop(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Wait" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func wait<Result>(
        _ message: Containerd_Services_Sandbox_V1_ControllerWaitRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerWaitResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerWaitRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.wait(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Status" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func status<Result>(
        _ message: Containerd_Services_Sandbox_V1_ControllerStatusRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerStatusResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerStatusRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.status(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Shutdown" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func shutdown<Result>(
        _ message: Containerd_Services_Sandbox_V1_ControllerShutdownRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerShutdownResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerShutdownRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.shutdown(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Metrics" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func metrics<Result>(
        _ message: Containerd_Services_Sandbox_V1_ControllerMetricsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerMetricsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerMetricsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.metrics(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Update" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func update<Result>(
        _ message: Containerd_Services_Sandbox_V1_ControllerUpdateRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Sandbox_V1_ControllerUpdateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Sandbox_V1_ControllerUpdateRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.update(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}