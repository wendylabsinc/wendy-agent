//
//Copyright The containerd Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: github.com/containerd/containerd/api/services/transfer/v1/transfer.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - containerd.services.transfer.v1.Transfer

/// Namespace containing generated types for the "containerd.services.transfer.v1.Transfer" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public enum Containerd_Services_Transfer_V1_Transfer {
    /// Service descriptor for the "containerd.services.transfer.v1.Transfer" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.transfer.v1.Transfer")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "Transfer" metadata.
        public enum Transfer {
            /// Request type for "Transfer".
            public typealias Input = Containerd_Services_Transfer_V1_TransferRequest
            /// Response type for "Transfer".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "Transfer".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.transfer.v1.Transfer"),
                method: "Transfer"
            )
        }
        /// Descriptors for all methods in the "containerd.services.transfer.v1.Transfer" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            Transfer.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "containerd.services.transfer.v1.Transfer" service.
    public static let containerd_services_transfer_v1_Transfer = GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.transfer.v1.Transfer")
}

// MARK: containerd.services.transfer.v1.Transfer (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Containerd_Services_Transfer_V1_Transfer {
    /// Generated client protocol for the "containerd.services.transfer.v1.Transfer" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    public protocol ClientProtocol: Sendable {
        /// Call the "Transfer" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Transfer_V1_TransferRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Transfer_V1_TransferRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func transfer<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Transfer_V1_TransferRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Transfer_V1_TransferRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "containerd.services.transfer.v1.Transfer" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "Transfer" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Transfer_V1_TransferRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Transfer_V1_TransferRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func transfer<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Transfer_V1_TransferRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Transfer_V1_TransferRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Transfer_V1_Transfer.Method.Transfer.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Containerd_Services_Transfer_V1_Transfer.ClientProtocol {
    /// Call the "Transfer" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Transfer_V1_TransferRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func transfer<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Transfer_V1_TransferRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.transfer(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Transfer_V1_TransferRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Containerd_Services_Transfer_V1_Transfer.ClientProtocol {
    /// Call the "Transfer" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func transfer<Result>(
        _ message: Containerd_Services_Transfer_V1_TransferRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Transfer_V1_TransferRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.transfer(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}