// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: github.com/containerd/containerd/api/services/diff/v1/diff.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//
//Copyright The containerd Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Containerd_Services_Diff_V1_ApplyRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Diff is the descriptor of the diff to be extracted
  public var diff: Containerd_Types_Descriptor {
    get {return _diff ?? Containerd_Types_Descriptor()}
    set {_diff = newValue}
  }
  /// Returns true if `diff` has been explicitly set.
  public var hasDiff: Bool {return self._diff != nil}
  /// Clears the value of `diff`. Subsequent reads from it will return its default value.
  public mutating func clearDiff() {self._diff = nil}

  public var mounts: [Containerd_Types_Mount] = []

  public var payloads: Dictionary<String,SwiftProtobuf.Google_Protobuf_Any> = [:]

  /// SyncFs is to synchronize the underlying filesystem containing files.
  public var syncFs: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _diff: Containerd_Types_Descriptor? = nil
}

public struct Containerd_Services_Diff_V1_ApplyResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Applied is the descriptor for the object which was applied.
  /// If the input was a compressed blob then the result will be
  /// the descriptor for the uncompressed blob.
  public var applied: Containerd_Types_Descriptor {
    get {return _applied ?? Containerd_Types_Descriptor()}
    set {_applied = newValue}
  }
  /// Returns true if `applied` has been explicitly set.
  public var hasApplied: Bool {return self._applied != nil}
  /// Clears the value of `applied`. Subsequent reads from it will return its default value.
  public mutating func clearApplied() {self._applied = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _applied: Containerd_Types_Descriptor? = nil
}

public struct Containerd_Services_Diff_V1_DiffRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Left are the mounts which represent the older copy
  /// in which is the base of the computed changes.
  public var left: [Containerd_Types_Mount] = []

  /// Right are the mounts which represents the newer copy
  /// in which changes from the left were made into.
  public var right: [Containerd_Types_Mount] = []

  /// MediaType is the media type descriptor for the created diff
  /// object
  public var mediaType: String = String()

  /// Ref identifies the pre-commit content store object. This
  /// reference can be used to get the status from the content store.
  public var ref: String = String()

  /// Labels are the labels to apply to the generated content
  /// on content store commit.
  public var labels: Dictionary<String,String> = [:]

  /// SourceDateEpoch specifies the timestamp used to provide control for reproducibility.
  /// See also https://reproducible-builds.org/docs/source-date-epoch/ .
  ///
  /// Since containerd v2.0, the whiteout timestamps are set to zero (1970-01-01),
  /// not to the source date epoch.
  public var sourceDateEpoch: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _sourceDateEpoch ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_sourceDateEpoch = newValue}
  }
  /// Returns true if `sourceDateEpoch` has been explicitly set.
  public var hasSourceDateEpoch: Bool {return self._sourceDateEpoch != nil}
  /// Clears the value of `sourceDateEpoch`. Subsequent reads from it will return its default value.
  public mutating func clearSourceDateEpoch() {self._sourceDateEpoch = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sourceDateEpoch: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Containerd_Services_Diff_V1_DiffResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Diff is the descriptor of the diff which can be applied
  public var diff: Containerd_Types_Descriptor {
    get {return _diff ?? Containerd_Types_Descriptor()}
    set {_diff = newValue}
  }
  /// Returns true if `diff` has been explicitly set.
  public var hasDiff: Bool {return self._diff != nil}
  /// Clears the value of `diff`. Subsequent reads from it will return its default value.
  public mutating func clearDiff() {self._diff = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _diff: Containerd_Types_Descriptor? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "containerd.services.diff.v1"

extension Containerd_Services_Diff_V1_ApplyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ApplyRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}diff\0\u{1}mounts\0\u{1}payloads\0\u{3}sync_fs\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._diff) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.mounts) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Any>.self, value: &self.payloads) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.syncFs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._diff {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.mounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.mounts, fieldNumber: 2)
    }
    if !self.payloads.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Any>.self, value: self.payloads, fieldNumber: 3)
    }
    if self.syncFs != false {
      try visitor.visitSingularBoolField(value: self.syncFs, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Diff_V1_ApplyRequest, rhs: Containerd_Services_Diff_V1_ApplyRequest) -> Bool {
    if lhs._diff != rhs._diff {return false}
    if lhs.mounts != rhs.mounts {return false}
    if lhs.payloads != rhs.payloads {return false}
    if lhs.syncFs != rhs.syncFs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Diff_V1_ApplyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ApplyResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}applied\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._applied) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._applied {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Diff_V1_ApplyResponse, rhs: Containerd_Services_Diff_V1_ApplyResponse) -> Bool {
    if lhs._applied != rhs._applied {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Diff_V1_DiffRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DiffRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}left\0\u{1}right\0\u{3}media_type\0\u{1}ref\0\u{1}labels\0\u{3}source_date_epoch\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.left) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.right) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.mediaType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.ref) }()
      case 5: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._sourceDateEpoch) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.left.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.left, fieldNumber: 1)
    }
    if !self.right.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.right, fieldNumber: 2)
    }
    if !self.mediaType.isEmpty {
      try visitor.visitSingularStringField(value: self.mediaType, fieldNumber: 3)
    }
    if !self.ref.isEmpty {
      try visitor.visitSingularStringField(value: self.ref, fieldNumber: 4)
    }
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 5)
    }
    try { if let v = self._sourceDateEpoch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Diff_V1_DiffRequest, rhs: Containerd_Services_Diff_V1_DiffRequest) -> Bool {
    if lhs.left != rhs.left {return false}
    if lhs.right != rhs.right {return false}
    if lhs.mediaType != rhs.mediaType {return false}
    if lhs.ref != rhs.ref {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs._sourceDateEpoch != rhs._sourceDateEpoch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Diff_V1_DiffResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DiffResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\u{3}diff\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeSingularMessageField(value: &self._diff) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._diff {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Diff_V1_DiffResponse, rhs: Containerd_Services_Diff_V1_DiffResponse) -> Bool {
    if lhs._diff != rhs._diff {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
