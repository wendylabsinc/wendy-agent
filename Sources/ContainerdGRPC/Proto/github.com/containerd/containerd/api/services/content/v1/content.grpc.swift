//
//Copyright The containerd Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: github.com/containerd/containerd/api/services/content/v1/content.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - containerd.services.content.v1.Content

/// Namespace containing generated types for the "containerd.services.content.v1.Content" service.
public enum Containerd_Services_Content_V1_Content {
    /// Service descriptor for the "containerd.services.content.v1.Content" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.content.v1.Content")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "Info" metadata.
        public enum Info {
            /// Request type for "Info".
            public typealias Input = Containerd_Services_Content_V1_InfoRequest
            /// Response type for "Info".
            public typealias Output = Containerd_Services_Content_V1_InfoResponse
            /// Descriptor for "Info".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.content.v1.Content"),
                method: "Info"
            )
        }
        /// Namespace for "Update" metadata.
        public enum Update {
            /// Request type for "Update".
            public typealias Input = Containerd_Services_Content_V1_UpdateRequest
            /// Response type for "Update".
            public typealias Output = Containerd_Services_Content_V1_UpdateResponse
            /// Descriptor for "Update".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.content.v1.Content"),
                method: "Update"
            )
        }
        /// Namespace for "List" metadata.
        public enum List {
            /// Request type for "List".
            public typealias Input = Containerd_Services_Content_V1_ListContentRequest
            /// Response type for "List".
            public typealias Output = Containerd_Services_Content_V1_ListContentResponse
            /// Descriptor for "List".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.content.v1.Content"),
                method: "List"
            )
        }
        /// Namespace for "Delete" metadata.
        public enum Delete {
            /// Request type for "Delete".
            public typealias Input = Containerd_Services_Content_V1_DeleteContentRequest
            /// Response type for "Delete".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "Delete".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.content.v1.Content"),
                method: "Delete"
            )
        }
        /// Namespace for "Read" metadata.
        public enum Read {
            /// Request type for "Read".
            public typealias Input = Containerd_Services_Content_V1_ReadContentRequest
            /// Response type for "Read".
            public typealias Output = Containerd_Services_Content_V1_ReadContentResponse
            /// Descriptor for "Read".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.content.v1.Content"),
                method: "Read"
            )
        }
        /// Namespace for "Status" metadata.
        public enum Status {
            /// Request type for "Status".
            public typealias Input = Containerd_Services_Content_V1_StatusRequest
            /// Response type for "Status".
            public typealias Output = Containerd_Services_Content_V1_StatusResponse
            /// Descriptor for "Status".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.content.v1.Content"),
                method: "Status"
            )
        }
        /// Namespace for "ListStatuses" metadata.
        public enum ListStatuses {
            /// Request type for "ListStatuses".
            public typealias Input = Containerd_Services_Content_V1_ListStatusesRequest
            /// Response type for "ListStatuses".
            public typealias Output = Containerd_Services_Content_V1_ListStatusesResponse
            /// Descriptor for "ListStatuses".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.content.v1.Content"),
                method: "ListStatuses"
            )
        }
        /// Namespace for "Write" metadata.
        public enum Write {
            /// Request type for "Write".
            public typealias Input = Containerd_Services_Content_V1_WriteContentRequest
            /// Response type for "Write".
            public typealias Output = Containerd_Services_Content_V1_WriteContentResponse
            /// Descriptor for "Write".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.content.v1.Content"),
                method: "Write"
            )
        }
        /// Namespace for "Abort" metadata.
        public enum Abort {
            /// Request type for "Abort".
            public typealias Input = Containerd_Services_Content_V1_AbortRequest
            /// Response type for "Abort".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "Abort".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.content.v1.Content"),
                method: "Abort"
            )
        }
        /// Descriptors for all methods in the "containerd.services.content.v1.Content" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            Info.descriptor,
            Update.descriptor,
            List.descriptor,
            Delete.descriptor,
            Read.descriptor,
            Status.descriptor,
            ListStatuses.descriptor,
            Write.descriptor,
            Abort.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "containerd.services.content.v1.Content" service.
    public static let containerd_services_content_v1_Content = GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.content.v1.Content")
}

// MARK: containerd.services.content.v1.Content (server)

extension Containerd_Services_Content_V1_Content {
    /// Streaming variant of the service protocol for the "containerd.services.content.v1.Content" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Content provides access to a content addressable storage system.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "Info" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Info returns information about a committed object.
        /// > 
        /// > This call can be used for getting the size of content and checking for
        /// > existence.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Content_V1_InfoRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Content_V1_InfoResponse` messages.
        func info(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Content_V1_InfoRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Content_V1_InfoResponse>

        /// Handle the "Update" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Update updates content metadata.
        /// > 
        /// > This call can be used to manage the mutable content labels. The
        /// > immutable metadata such as digest, size, and committed at cannot
        /// > be updated.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Content_V1_UpdateRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Content_V1_UpdateResponse` messages.
        func update(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Content_V1_UpdateRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Content_V1_UpdateResponse>

        /// Handle the "List" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List streams the entire set of content as Info objects and closes the
        /// > stream.
        /// > 
        /// > Typically, this will yield a large response, chunked into messages.
        /// > Clients should make provisions to ensure they can handle the entire data
        /// > set.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Content_V1_ListContentRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Content_V1_ListContentResponse` messages.
        func list(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Content_V1_ListContentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Content_V1_ListContentResponse>

        /// Handle the "Delete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete will delete the referenced object.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Content_V1_DeleteContentRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `SwiftProtobuf.Google_Protobuf_Empty` messages.
        func delete(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Content_V1_DeleteContentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty>

        /// Handle the "Read" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Read allows one to read an object based on the offset into the content.
        /// > 
        /// > The requested data may be returned in one or more messages.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Content_V1_ReadContentRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Content_V1_ReadContentResponse` messages.
        func read(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Content_V1_ReadContentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Content_V1_ReadContentResponse>

        /// Handle the "Status" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Status returns the status for a single reference.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Content_V1_StatusRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Content_V1_StatusResponse` messages.
        func status(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Content_V1_StatusRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Content_V1_StatusResponse>

        /// Handle the "ListStatuses" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListStatuses returns the status of ongoing object ingestions, started via
        /// > Write.
        /// > 
        /// > Only those matching the regular expression will be provided in the
        /// > response. If the provided regular expression is empty, all ingestions
        /// > will be provided.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Content_V1_ListStatusesRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Content_V1_ListStatusesResponse` messages.
        func listStatuses(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Content_V1_ListStatusesRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Content_V1_ListStatusesResponse>

        /// Handle the "Write" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Write begins or resumes writes to a resource identified by a unique ref.
        /// > Only one active stream may exist at a time for each ref.
        /// > 
        /// > Once a write stream has started, it may only write to a single ref, thus
        /// > once a stream is started, the ref may be omitted on subsequent writes.
        /// > 
        /// > For any write transaction represented by a ref, only a single write may
        /// > be made to a given offset. If overlapping writes occur, it is an error.
        /// > Writes should be sequential and implementations may throw an error if
        /// > this is required.
        /// > 
        /// > If expected_digest is set and already part of the content store, the
        /// > write will fail.
        /// > 
        /// > When completed, the commit flag should be set to true. If expected size
        /// > or digest is set, the content will be validated against those values.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Content_V1_WriteContentRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Content_V1_WriteContentResponse` messages.
        func write(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Content_V1_WriteContentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Content_V1_WriteContentResponse>

        /// Handle the "Abort" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Abort cancels the ongoing write named in the request. Any resources
        /// > associated with the write will be collected.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Content_V1_AbortRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `SwiftProtobuf.Google_Protobuf_Empty` messages.
        func abort(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Content_V1_AbortRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty>
    }

    /// Service protocol for the "containerd.services.content.v1.Content" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Content provides access to a content addressable storage system.
    public protocol ServiceProtocol: Containerd_Services_Content_V1_Content.StreamingServiceProtocol {
        /// Handle the "Info" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Info returns information about a committed object.
        /// > 
        /// > This call can be used for getting the size of content and checking for
        /// > existence.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Content_V1_InfoRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Containerd_Services_Content_V1_InfoResponse` message.
        func info(
            request: GRPCCore.ServerRequest<Containerd_Services_Content_V1_InfoRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Content_V1_InfoResponse>

        /// Handle the "Update" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Update updates content metadata.
        /// > 
        /// > This call can be used to manage the mutable content labels. The
        /// > immutable metadata such as digest, size, and committed at cannot
        /// > be updated.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Content_V1_UpdateRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Containerd_Services_Content_V1_UpdateResponse` message.
        func update(
            request: GRPCCore.ServerRequest<Containerd_Services_Content_V1_UpdateRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Content_V1_UpdateResponse>

        /// Handle the "List" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List streams the entire set of content as Info objects and closes the
        /// > stream.
        /// > 
        /// > Typically, this will yield a large response, chunked into messages.
        /// > Clients should make provisions to ensure they can handle the entire data
        /// > set.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Content_V1_ListContentRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Content_V1_ListContentResponse` messages.
        func list(
            request: GRPCCore.ServerRequest<Containerd_Services_Content_V1_ListContentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Content_V1_ListContentResponse>

        /// Handle the "Delete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete will delete the referenced object.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Content_V1_DeleteContentRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
        func delete(
            request: GRPCCore.ServerRequest<Containerd_Services_Content_V1_DeleteContentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>

        /// Handle the "Read" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Read allows one to read an object based on the offset into the content.
        /// > 
        /// > The requested data may be returned in one or more messages.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Content_V1_ReadContentRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Content_V1_ReadContentResponse` messages.
        func read(
            request: GRPCCore.ServerRequest<Containerd_Services_Content_V1_ReadContentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Content_V1_ReadContentResponse>

        /// Handle the "Status" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Status returns the status for a single reference.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Content_V1_StatusRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Containerd_Services_Content_V1_StatusResponse` message.
        func status(
            request: GRPCCore.ServerRequest<Containerd_Services_Content_V1_StatusRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Content_V1_StatusResponse>

        /// Handle the "ListStatuses" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListStatuses returns the status of ongoing object ingestions, started via
        /// > Write.
        /// > 
        /// > Only those matching the regular expression will be provided in the
        /// > response. If the provided regular expression is empty, all ingestions
        /// > will be provided.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Content_V1_ListStatusesRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Containerd_Services_Content_V1_ListStatusesResponse` message.
        func listStatuses(
            request: GRPCCore.ServerRequest<Containerd_Services_Content_V1_ListStatusesRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Content_V1_ListStatusesResponse>

        /// Handle the "Write" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Write begins or resumes writes to a resource identified by a unique ref.
        /// > Only one active stream may exist at a time for each ref.
        /// > 
        /// > Once a write stream has started, it may only write to a single ref, thus
        /// > once a stream is started, the ref may be omitted on subsequent writes.
        /// > 
        /// > For any write transaction represented by a ref, only a single write may
        /// > be made to a given offset. If overlapping writes occur, it is an error.
        /// > Writes should be sequential and implementations may throw an error if
        /// > this is required.
        /// > 
        /// > If expected_digest is set and already part of the content store, the
        /// > write will fail.
        /// > 
        /// > When completed, the commit flag should be set to true. If expected size
        /// > or digest is set, the content will be validated against those values.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Content_V1_WriteContentRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Content_V1_WriteContentResponse` messages.
        func write(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Content_V1_WriteContentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Content_V1_WriteContentResponse>

        /// Handle the "Abort" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Abort cancels the ongoing write named in the request. Any resources
        /// > associated with the write will be collected.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Content_V1_AbortRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
        func abort(
            request: GRPCCore.ServerRequest<Containerd_Services_Content_V1_AbortRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>
    }

    /// Simple service protocol for the "containerd.services.content.v1.Content" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Content provides access to a content addressable storage system.
    public protocol SimpleServiceProtocol: Containerd_Services_Content_V1_Content.ServiceProtocol {
        /// Handle the "Info" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Info returns information about a committed object.
        /// > 
        /// > This call can be used for getting the size of content and checking for
        /// > existence.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Content_V1_InfoRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Containerd_Services_Content_V1_InfoResponse` to respond with.
        func info(
            request: Containerd_Services_Content_V1_InfoRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Containerd_Services_Content_V1_InfoResponse

        /// Handle the "Update" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Update updates content metadata.
        /// > 
        /// > This call can be used to manage the mutable content labels. The
        /// > immutable metadata such as digest, size, and committed at cannot
        /// > be updated.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Content_V1_UpdateRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Containerd_Services_Content_V1_UpdateResponse` to respond with.
        func update(
            request: Containerd_Services_Content_V1_UpdateRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Containerd_Services_Content_V1_UpdateResponse

        /// Handle the "List" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List streams the entire set of content as Info objects and closes the
        /// > stream.
        /// > 
        /// > Typically, this will yield a large response, chunked into messages.
        /// > Clients should make provisions to ensure they can handle the entire data
        /// > set.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Content_V1_ListContentRequest` message.
        ///   - response: A response stream of `Containerd_Services_Content_V1_ListContentResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func list(
            request: Containerd_Services_Content_V1_ListContentRequest,
            response: GRPCCore.RPCWriter<Containerd_Services_Content_V1_ListContentResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "Delete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete will delete the referenced object.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Content_V1_DeleteContentRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `SwiftProtobuf.Google_Protobuf_Empty` to respond with.
        func delete(
            request: Containerd_Services_Content_V1_DeleteContentRequest,
            context: GRPCCore.ServerContext
        ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

        /// Handle the "Read" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Read allows one to read an object based on the offset into the content.
        /// > 
        /// > The requested data may be returned in one or more messages.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Content_V1_ReadContentRequest` message.
        ///   - response: A response stream of `Containerd_Services_Content_V1_ReadContentResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func read(
            request: Containerd_Services_Content_V1_ReadContentRequest,
            response: GRPCCore.RPCWriter<Containerd_Services_Content_V1_ReadContentResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "Status" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Status returns the status for a single reference.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Content_V1_StatusRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Containerd_Services_Content_V1_StatusResponse` to respond with.
        func status(
            request: Containerd_Services_Content_V1_StatusRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Containerd_Services_Content_V1_StatusResponse

        /// Handle the "ListStatuses" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListStatuses returns the status of ongoing object ingestions, started via
        /// > Write.
        /// > 
        /// > Only those matching the regular expression will be provided in the
        /// > response. If the provided regular expression is empty, all ingestions
        /// > will be provided.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Content_V1_ListStatusesRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Containerd_Services_Content_V1_ListStatusesResponse` to respond with.
        func listStatuses(
            request: Containerd_Services_Content_V1_ListStatusesRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Containerd_Services_Content_V1_ListStatusesResponse

        /// Handle the "Write" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Write begins or resumes writes to a resource identified by a unique ref.
        /// > Only one active stream may exist at a time for each ref.
        /// > 
        /// > Once a write stream has started, it may only write to a single ref, thus
        /// > once a stream is started, the ref may be omitted on subsequent writes.
        /// > 
        /// > For any write transaction represented by a ref, only a single write may
        /// > be made to a given offset. If overlapping writes occur, it is an error.
        /// > Writes should be sequential and implementations may throw an error if
        /// > this is required.
        /// > 
        /// > If expected_digest is set and already part of the content store, the
        /// > write will fail.
        /// > 
        /// > When completed, the commit flag should be set to true. If expected size
        /// > or digest is set, the content will be validated against those values.
        ///
        /// - Parameters:
        ///   - request: A stream of `Containerd_Services_Content_V1_WriteContentRequest` messages.
        ///   - response: A response stream of `Containerd_Services_Content_V1_WriteContentResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func write(
            request: GRPCCore.RPCAsyncSequence<Containerd_Services_Content_V1_WriteContentRequest, any Swift.Error>,
            response: GRPCCore.RPCWriter<Containerd_Services_Content_V1_WriteContentResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "Abort" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Abort cancels the ongoing write named in the request. Any resources
        /// > associated with the write will be collected.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Content_V1_AbortRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `SwiftProtobuf.Google_Protobuf_Empty` to respond with.
        func abort(
            request: Containerd_Services_Content_V1_AbortRequest,
            context: GRPCCore.ServerContext
        ) async throws -> SwiftProtobuf.Google_Protobuf_Empty
    }
}

// Default implementation of 'registerMethods(with:)'.
extension Containerd_Services_Content_V1_Content.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Containerd_Services_Content_V1_Content.Method.Info.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Content_V1_InfoRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Content_V1_InfoResponse>(),
            handler: { request, context in
                try await self.info(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Content_V1_Content.Method.Update.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Content_V1_UpdateRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Content_V1_UpdateResponse>(),
            handler: { request, context in
                try await self.update(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Content_V1_Content.Method.List.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Content_V1_ListContentRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Content_V1_ListContentResponse>(),
            handler: { request, context in
                try await self.list(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Content_V1_Content.Method.Delete.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Content_V1_DeleteContentRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            handler: { request, context in
                try await self.delete(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Content_V1_Content.Method.Read.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Content_V1_ReadContentRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Content_V1_ReadContentResponse>(),
            handler: { request, context in
                try await self.read(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Content_V1_Content.Method.Status.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Content_V1_StatusRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Content_V1_StatusResponse>(),
            handler: { request, context in
                try await self.status(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Content_V1_Content.Method.ListStatuses.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Content_V1_ListStatusesRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Content_V1_ListStatusesResponse>(),
            handler: { request, context in
                try await self.listStatuses(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Content_V1_Content.Method.Write.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Content_V1_WriteContentRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Content_V1_WriteContentResponse>(),
            handler: { request, context in
                try await self.write(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Content_V1_Content.Method.Abort.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Content_V1_AbortRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            handler: { request, context in
                try await self.abort(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension Containerd_Services_Content_V1_Content.ServiceProtocol {
    public func info(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Content_V1_InfoRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Content_V1_InfoResponse> {
        let response = try await self.info(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func update(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Content_V1_UpdateRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Content_V1_UpdateResponse> {
        let response = try await self.update(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func list(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Content_V1_ListContentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Content_V1_ListContentResponse> {
        let response = try await self.list(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return response
    }

    public func delete(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Content_V1_DeleteContentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        let response = try await self.delete(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func read(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Content_V1_ReadContentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Content_V1_ReadContentResponse> {
        let response = try await self.read(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return response
    }

    public func status(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Content_V1_StatusRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Content_V1_StatusResponse> {
        let response = try await self.status(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func listStatuses(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Content_V1_ListStatusesRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Content_V1_ListStatusesResponse> {
        let response = try await self.listStatuses(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func abort(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Content_V1_AbortRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        let response = try await self.abort(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension Containerd_Services_Content_V1_Content.SimpleServiceProtocol {
    public func info(
        request: GRPCCore.ServerRequest<Containerd_Services_Content_V1_InfoRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Content_V1_InfoResponse> {
        return GRPCCore.ServerResponse<Containerd_Services_Content_V1_InfoResponse>(
            message: try await self.info(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func update(
        request: GRPCCore.ServerRequest<Containerd_Services_Content_V1_UpdateRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Content_V1_UpdateResponse> {
        return GRPCCore.ServerResponse<Containerd_Services_Content_V1_UpdateResponse>(
            message: try await self.update(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func list(
        request: GRPCCore.ServerRequest<Containerd_Services_Content_V1_ListContentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Content_V1_ListContentResponse> {
        return GRPCCore.StreamingServerResponse<Containerd_Services_Content_V1_ListContentResponse>(
            metadata: [:],
            producer: { writer in
                try await self.list(
                    request: request.message,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    public func delete(
        request: GRPCCore.ServerRequest<Containerd_Services_Content_V1_DeleteContentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        return GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>(
            message: try await self.delete(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func read(
        request: GRPCCore.ServerRequest<Containerd_Services_Content_V1_ReadContentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Content_V1_ReadContentResponse> {
        return GRPCCore.StreamingServerResponse<Containerd_Services_Content_V1_ReadContentResponse>(
            metadata: [:],
            producer: { writer in
                try await self.read(
                    request: request.message,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    public func status(
        request: GRPCCore.ServerRequest<Containerd_Services_Content_V1_StatusRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Content_V1_StatusResponse> {
        return GRPCCore.ServerResponse<Containerd_Services_Content_V1_StatusResponse>(
            message: try await self.status(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func listStatuses(
        request: GRPCCore.ServerRequest<Containerd_Services_Content_V1_ListStatusesRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Content_V1_ListStatusesResponse> {
        return GRPCCore.ServerResponse<Containerd_Services_Content_V1_ListStatusesResponse>(
            message: try await self.listStatuses(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func write(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Content_V1_WriteContentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Content_V1_WriteContentResponse> {
        return GRPCCore.StreamingServerResponse<Containerd_Services_Content_V1_WriteContentResponse>(
            metadata: [:],
            producer: { writer in
                try await self.write(
                    request: request.messages,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    public func abort(
        request: GRPCCore.ServerRequest<Containerd_Services_Content_V1_AbortRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        return GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>(
            message: try await self.abort(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: containerd.services.content.v1.Content (client)

extension Containerd_Services_Content_V1_Content {
    /// Generated client protocol for the "containerd.services.content.v1.Content" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Content provides access to a content addressable storage system.
    public protocol ClientProtocol: Sendable {
        /// Call the "Info" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Info returns information about a committed object.
        /// > 
        /// > This call can be used for getting the size of content and checking for
        /// > existence.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Content_V1_InfoRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Content_V1_InfoRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Content_V1_InfoResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func info<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Content_V1_InfoRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Content_V1_InfoRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Content_V1_InfoResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Content_V1_InfoResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Update" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Update updates content metadata.
        /// > 
        /// > This call can be used to manage the mutable content labels. The
        /// > immutable metadata such as digest, size, and committed at cannot
        /// > be updated.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Content_V1_UpdateRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Content_V1_UpdateRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Content_V1_UpdateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func update<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Content_V1_UpdateRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Content_V1_UpdateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Content_V1_UpdateResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Content_V1_UpdateResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "List" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List streams the entire set of content as Info objects and closes the
        /// > stream.
        /// > 
        /// > Typically, this will yield a large response, chunked into messages.
        /// > Clients should make provisions to ensure they can handle the entire data
        /// > set.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Content_V1_ListContentRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Content_V1_ListContentRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Content_V1_ListContentResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func list<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Content_V1_ListContentRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Content_V1_ListContentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Content_V1_ListContentResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Containerd_Services_Content_V1_ListContentResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Delete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete will delete the referenced object.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Content_V1_DeleteContentRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Content_V1_DeleteContentRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func delete<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Content_V1_DeleteContentRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Content_V1_DeleteContentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Read" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Read allows one to read an object based on the offset into the content.
        /// > 
        /// > The requested data may be returned in one or more messages.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Content_V1_ReadContentRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Content_V1_ReadContentRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Content_V1_ReadContentResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func read<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Content_V1_ReadContentRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Content_V1_ReadContentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Content_V1_ReadContentResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Containerd_Services_Content_V1_ReadContentResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Status" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Status returns the status for a single reference.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Content_V1_StatusRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Content_V1_StatusRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Content_V1_StatusResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func status<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Content_V1_StatusRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Content_V1_StatusRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Content_V1_StatusResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Content_V1_StatusResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListStatuses" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListStatuses returns the status of ongoing object ingestions, started via
        /// > Write.
        /// > 
        /// > Only those matching the regular expression will be provided in the
        /// > response. If the provided regular expression is empty, all ingestions
        /// > will be provided.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Content_V1_ListStatusesRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Content_V1_ListStatusesRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Content_V1_ListStatusesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listStatuses<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Content_V1_ListStatusesRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Content_V1_ListStatusesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Content_V1_ListStatusesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Content_V1_ListStatusesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Write" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Write begins or resumes writes to a resource identified by a unique ref.
        /// > Only one active stream may exist at a time for each ref.
        /// > 
        /// > Once a write stream has started, it may only write to a single ref, thus
        /// > once a stream is started, the ref may be omitted on subsequent writes.
        /// > 
        /// > For any write transaction represented by a ref, only a single write may
        /// > be made to a given offset. If overlapping writes occur, it is an error.
        /// > Writes should be sequential and implementations may throw an error if
        /// > this is required.
        /// > 
        /// > If expected_digest is set and already part of the content store, the
        /// > write will fail.
        /// > 
        /// > When completed, the commit flag should be set to true. If expected size
        /// > or digest is set, the content will be validated against those values.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Containerd_Services_Content_V1_WriteContentRequest` messages.
        ///   - serializer: A serializer for `Containerd_Services_Content_V1_WriteContentRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Content_V1_WriteContentResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func write<Result>(
            request: GRPCCore.StreamingClientRequest<Containerd_Services_Content_V1_WriteContentRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Content_V1_WriteContentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Content_V1_WriteContentResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Containerd_Services_Content_V1_WriteContentResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Abort" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Abort cancels the ongoing write named in the request. Any resources
        /// > associated with the write will be collected.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Content_V1_AbortRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Content_V1_AbortRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func abort<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Content_V1_AbortRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Content_V1_AbortRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "containerd.services.content.v1.Content" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Content provides access to a content addressable storage system.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "Info" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Info returns information about a committed object.
        /// > 
        /// > This call can be used for getting the size of content and checking for
        /// > existence.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Content_V1_InfoRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Content_V1_InfoRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Content_V1_InfoResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func info<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Content_V1_InfoRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Content_V1_InfoRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Content_V1_InfoResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Content_V1_InfoResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Content_V1_Content.Method.Info.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Update" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Update updates content metadata.
        /// > 
        /// > This call can be used to manage the mutable content labels. The
        /// > immutable metadata such as digest, size, and committed at cannot
        /// > be updated.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Content_V1_UpdateRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Content_V1_UpdateRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Content_V1_UpdateResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func update<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Content_V1_UpdateRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Content_V1_UpdateRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Content_V1_UpdateResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Content_V1_UpdateResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Content_V1_Content.Method.Update.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "List" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List streams the entire set of content as Info objects and closes the
        /// > stream.
        /// > 
        /// > Typically, this will yield a large response, chunked into messages.
        /// > Clients should make provisions to ensure they can handle the entire data
        /// > set.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Content_V1_ListContentRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Content_V1_ListContentRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Content_V1_ListContentResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func list<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Content_V1_ListContentRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Content_V1_ListContentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Content_V1_ListContentResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Containerd_Services_Content_V1_ListContentResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.serverStreaming(
                request: request,
                descriptor: Containerd_Services_Content_V1_Content.Method.List.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Delete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete will delete the referenced object.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Content_V1_DeleteContentRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Content_V1_DeleteContentRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func delete<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Content_V1_DeleteContentRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Content_V1_DeleteContentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Content_V1_Content.Method.Delete.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Read" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Read allows one to read an object based on the offset into the content.
        /// > 
        /// > The requested data may be returned in one or more messages.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Content_V1_ReadContentRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Content_V1_ReadContentRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Content_V1_ReadContentResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func read<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Content_V1_ReadContentRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Content_V1_ReadContentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Content_V1_ReadContentResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Containerd_Services_Content_V1_ReadContentResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.serverStreaming(
                request: request,
                descriptor: Containerd_Services_Content_V1_Content.Method.Read.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Status" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Status returns the status for a single reference.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Content_V1_StatusRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Content_V1_StatusRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Content_V1_StatusResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func status<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Content_V1_StatusRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Content_V1_StatusRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Content_V1_StatusResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Content_V1_StatusResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Content_V1_Content.Method.Status.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListStatuses" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > ListStatuses returns the status of ongoing object ingestions, started via
        /// > Write.
        /// > 
        /// > Only those matching the regular expression will be provided in the
        /// > response. If the provided regular expression is empty, all ingestions
        /// > will be provided.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Content_V1_ListStatusesRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Content_V1_ListStatusesRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Content_V1_ListStatusesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listStatuses<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Content_V1_ListStatusesRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Content_V1_ListStatusesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Content_V1_ListStatusesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Content_V1_ListStatusesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Content_V1_Content.Method.ListStatuses.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Write" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Write begins or resumes writes to a resource identified by a unique ref.
        /// > Only one active stream may exist at a time for each ref.
        /// > 
        /// > Once a write stream has started, it may only write to a single ref, thus
        /// > once a stream is started, the ref may be omitted on subsequent writes.
        /// > 
        /// > For any write transaction represented by a ref, only a single write may
        /// > be made to a given offset. If overlapping writes occur, it is an error.
        /// > Writes should be sequential and implementations may throw an error if
        /// > this is required.
        /// > 
        /// > If expected_digest is set and already part of the content store, the
        /// > write will fail.
        /// > 
        /// > When completed, the commit flag should be set to true. If expected size
        /// > or digest is set, the content will be validated against those values.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Containerd_Services_Content_V1_WriteContentRequest` messages.
        ///   - serializer: A serializer for `Containerd_Services_Content_V1_WriteContentRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Content_V1_WriteContentResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func write<Result>(
            request: GRPCCore.StreamingClientRequest<Containerd_Services_Content_V1_WriteContentRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Content_V1_WriteContentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Content_V1_WriteContentResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Containerd_Services_Content_V1_WriteContentResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Containerd_Services_Content_V1_Content.Method.Write.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Abort" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Abort cancels the ongoing write named in the request. Any resources
        /// > associated with the write will be collected.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Content_V1_AbortRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Content_V1_AbortRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func abort<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Content_V1_AbortRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Content_V1_AbortRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Content_V1_Content.Method.Abort.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Containerd_Services_Content_V1_Content.ClientProtocol {
    /// Call the "Info" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Info returns information about a committed object.
    /// > 
    /// > This call can be used for getting the size of content and checking for
    /// > existence.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Content_V1_InfoRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func info<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Content_V1_InfoRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Content_V1_InfoResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.info(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Content_V1_InfoRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Content_V1_InfoResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Update" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Update updates content metadata.
    /// > 
    /// > This call can be used to manage the mutable content labels. The
    /// > immutable metadata such as digest, size, and committed at cannot
    /// > be updated.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Content_V1_UpdateRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func update<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Content_V1_UpdateRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Content_V1_UpdateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.update(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Content_V1_UpdateRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Content_V1_UpdateResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "List" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > List streams the entire set of content as Info objects and closes the
    /// > stream.
    /// > 
    /// > Typically, this will yield a large response, chunked into messages.
    /// > Clients should make provisions to ensure they can handle the entire data
    /// > set.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Content_V1_ListContentRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func list<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Content_V1_ListContentRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Containerd_Services_Content_V1_ListContentResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.list(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Content_V1_ListContentRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Content_V1_ListContentResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Delete" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete will delete the referenced object.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Content_V1_DeleteContentRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func delete<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Content_V1_DeleteContentRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.delete(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Content_V1_DeleteContentRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Read" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Read allows one to read an object based on the offset into the content.
    /// > 
    /// > The requested data may be returned in one or more messages.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Content_V1_ReadContentRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func read<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Content_V1_ReadContentRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Containerd_Services_Content_V1_ReadContentResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.read(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Content_V1_ReadContentRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Content_V1_ReadContentResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Status" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Status returns the status for a single reference.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Content_V1_StatusRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func status<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Content_V1_StatusRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Content_V1_StatusResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.status(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Content_V1_StatusRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Content_V1_StatusResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListStatuses" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListStatuses returns the status of ongoing object ingestions, started via
    /// > Write.
    /// > 
    /// > Only those matching the regular expression will be provided in the
    /// > response. If the provided regular expression is empty, all ingestions
    /// > will be provided.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Content_V1_ListStatusesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listStatuses<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Content_V1_ListStatusesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Content_V1_ListStatusesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listStatuses(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Content_V1_ListStatusesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Content_V1_ListStatusesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Write" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Write begins or resumes writes to a resource identified by a unique ref.
    /// > Only one active stream may exist at a time for each ref.
    /// > 
    /// > Once a write stream has started, it may only write to a single ref, thus
    /// > once a stream is started, the ref may be omitted on subsequent writes.
    /// > 
    /// > For any write transaction represented by a ref, only a single write may
    /// > be made to a given offset. If overlapping writes occur, it is an error.
    /// > Writes should be sequential and implementations may throw an error if
    /// > this is required.
    /// > 
    /// > If expected_digest is set and already part of the content store, the
    /// > write will fail.
    /// > 
    /// > When completed, the commit flag should be set to true. If expected size
    /// > or digest is set, the content will be validated against those values.
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Containerd_Services_Content_V1_WriteContentRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func write<Result>(
        request: GRPCCore.StreamingClientRequest<Containerd_Services_Content_V1_WriteContentRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Containerd_Services_Content_V1_WriteContentResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.write(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Content_V1_WriteContentRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Content_V1_WriteContentResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Abort" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Abort cancels the ongoing write named in the request. Any resources
    /// > associated with the write will be collected.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Content_V1_AbortRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func abort<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Content_V1_AbortRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.abort(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Content_V1_AbortRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Containerd_Services_Content_V1_Content.ClientProtocol {
    /// Call the "Info" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Info returns information about a committed object.
    /// > 
    /// > This call can be used for getting the size of content and checking for
    /// > existence.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func info<Result>(
        _ message: Containerd_Services_Content_V1_InfoRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Content_V1_InfoResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Content_V1_InfoRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.info(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Update" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Update updates content metadata.
    /// > 
    /// > This call can be used to manage the mutable content labels. The
    /// > immutable metadata such as digest, size, and committed at cannot
    /// > be updated.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func update<Result>(
        _ message: Containerd_Services_Content_V1_UpdateRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Content_V1_UpdateResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Content_V1_UpdateRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.update(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "List" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > List streams the entire set of content as Info objects and closes the
    /// > stream.
    /// > 
    /// > Typically, this will yield a large response, chunked into messages.
    /// > Clients should make provisions to ensure they can handle the entire data
    /// > set.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func list<Result>(
        _ message: Containerd_Services_Content_V1_ListContentRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Containerd_Services_Content_V1_ListContentResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Content_V1_ListContentRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.list(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Delete" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete will delete the referenced object.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func delete<Result>(
        _ message: Containerd_Services_Content_V1_DeleteContentRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Content_V1_DeleteContentRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.delete(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Read" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Read allows one to read an object based on the offset into the content.
    /// > 
    /// > The requested data may be returned in one or more messages.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func read<Result>(
        _ message: Containerd_Services_Content_V1_ReadContentRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Containerd_Services_Content_V1_ReadContentResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Content_V1_ReadContentRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.read(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Status" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Status returns the status for a single reference.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func status<Result>(
        _ message: Containerd_Services_Content_V1_StatusRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Content_V1_StatusResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Content_V1_StatusRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.status(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListStatuses" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > ListStatuses returns the status of ongoing object ingestions, started via
    /// > Write.
    /// > 
    /// > Only those matching the regular expression will be provided in the
    /// > response. If the provided regular expression is empty, all ingestions
    /// > will be provided.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listStatuses<Result>(
        _ message: Containerd_Services_Content_V1_ListStatusesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Content_V1_ListStatusesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Content_V1_ListStatusesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listStatuses(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Write" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Write begins or resumes writes to a resource identified by a unique ref.
    /// > Only one active stream may exist at a time for each ref.
    /// > 
    /// > Once a write stream has started, it may only write to a single ref, thus
    /// > once a stream is started, the ref may be omitted on subsequent writes.
    /// > 
    /// > For any write transaction represented by a ref, only a single write may
    /// > be made to a given offset. If overlapping writes occur, it is an error.
    /// > Writes should be sequential and implementations may throw an error if
    /// > this is required.
    /// > 
    /// > If expected_digest is set and already part of the content store, the
    /// > write will fail.
    /// > 
    /// > When completed, the commit flag should be set to true. If expected size
    /// > or digest is set, the content will be validated against those values.
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func write<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Containerd_Services_Content_V1_WriteContentRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Containerd_Services_Content_V1_WriteContentResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Containerd_Services_Content_V1_WriteContentRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.write(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Abort" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Abort cancels the ongoing write named in the request. Any resources
    /// > associated with the write will be collected.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func abort<Result>(
        _ message: Containerd_Services_Content_V1_AbortRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Content_V1_AbortRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.abort(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}