//
//Copyright The containerd Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: github.com/containerd/containerd/api/services/containers/v1/containers.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - containerd.services.containers.v1.Containers

/// Namespace containing generated types for the "containerd.services.containers.v1.Containers" service.
public enum Containerd_Services_Containers_V1_Containers {
    /// Service descriptor for the "containerd.services.containers.v1.Containers" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.containers.v1.Containers")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "Get" metadata.
        public enum Get {
            /// Request type for "Get".
            public typealias Input = Containerd_Services_Containers_V1_GetContainerRequest
            /// Response type for "Get".
            public typealias Output = Containerd_Services_Containers_V1_GetContainerResponse
            /// Descriptor for "Get".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.containers.v1.Containers"),
                method: "Get"
            )
        }
        /// Namespace for "List" metadata.
        public enum List {
            /// Request type for "List".
            public typealias Input = Containerd_Services_Containers_V1_ListContainersRequest
            /// Response type for "List".
            public typealias Output = Containerd_Services_Containers_V1_ListContainersResponse
            /// Descriptor for "List".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.containers.v1.Containers"),
                method: "List"
            )
        }
        /// Namespace for "ListStream" metadata.
        public enum ListStream {
            /// Request type for "ListStream".
            public typealias Input = Containerd_Services_Containers_V1_ListContainersRequest
            /// Response type for "ListStream".
            public typealias Output = Containerd_Services_Containers_V1_ListContainerMessage
            /// Descriptor for "ListStream".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.containers.v1.Containers"),
                method: "ListStream"
            )
        }
        /// Namespace for "Create" metadata.
        public enum Create {
            /// Request type for "Create".
            public typealias Input = Containerd_Services_Containers_V1_CreateContainerRequest
            /// Response type for "Create".
            public typealias Output = Containerd_Services_Containers_V1_CreateContainerResponse
            /// Descriptor for "Create".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.containers.v1.Containers"),
                method: "Create"
            )
        }
        /// Namespace for "Update" metadata.
        public enum Update {
            /// Request type for "Update".
            public typealias Input = Containerd_Services_Containers_V1_UpdateContainerRequest
            /// Response type for "Update".
            public typealias Output = Containerd_Services_Containers_V1_UpdateContainerResponse
            /// Descriptor for "Update".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.containers.v1.Containers"),
                method: "Update"
            )
        }
        /// Namespace for "Delete" metadata.
        public enum Delete {
            /// Request type for "Delete".
            public typealias Input = Containerd_Services_Containers_V1_DeleteContainerRequest
            /// Response type for "Delete".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "Delete".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.containers.v1.Containers"),
                method: "Delete"
            )
        }
        /// Descriptors for all methods in the "containerd.services.containers.v1.Containers" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            Get.descriptor,
            List.descriptor,
            ListStream.descriptor,
            Create.descriptor,
            Update.descriptor,
            Delete.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "containerd.services.containers.v1.Containers" service.
    public static let containerd_services_containers_v1_Containers = GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.containers.v1.Containers")
}

// MARK: containerd.services.containers.v1.Containers (server)

extension Containerd_Services_Containers_V1_Containers {
    /// Streaming variant of the service protocol for the "containerd.services.containers.v1.Containers" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Containers provides metadata storage for containers used in the execution
    /// > service.
    /// > 
    /// > The objects here provide an state-independent view of containers for use in
    /// > management and resource pinning. From that perspective, containers do not
    /// > have a "state" but rather this is the set of resources that will be
    /// > considered in use by the container.
    /// > 
    /// > From the perspective of the execution service, these objects represent the
    /// > base parameters for creating a container process.
    /// > 
    /// > In general, when looking to add fields for this type, first ask yourself
    /// > whether or not the function of the field has to do with runtime execution or
    /// > is invariant of the runtime state of the container. If it has to do with
    /// > runtime, or changes as the "container" is started and stops, it probably
    /// > doesn't belong on this object.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "Get" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Containers_V1_GetContainerRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Containers_V1_GetContainerResponse` messages.
        func get(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Containers_V1_GetContainerRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Containers_V1_GetContainerResponse>

        /// Handle the "List" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Containers_V1_ListContainersRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Containers_V1_ListContainersResponse` messages.
        func list(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Containers_V1_ListContainersRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Containers_V1_ListContainersResponse>

        /// Handle the "ListStream" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Containers_V1_ListContainersRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Containers_V1_ListContainerMessage` messages.
        func listStream(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Containers_V1_ListContainersRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Containers_V1_ListContainerMessage>

        /// Handle the "Create" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Containers_V1_CreateContainerRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Containers_V1_CreateContainerResponse` messages.
        func create(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Containers_V1_CreateContainerRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Containers_V1_CreateContainerResponse>

        /// Handle the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Containers_V1_UpdateContainerRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Containers_V1_UpdateContainerResponse` messages.
        func update(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Containers_V1_UpdateContainerRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Containers_V1_UpdateContainerResponse>

        /// Handle the "Delete" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Containers_V1_DeleteContainerRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `SwiftProtobuf.Google_Protobuf_Empty` messages.
        func delete(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Containers_V1_DeleteContainerRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty>
    }

    /// Service protocol for the "containerd.services.containers.v1.Containers" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Containers provides metadata storage for containers used in the execution
    /// > service.
    /// > 
    /// > The objects here provide an state-independent view of containers for use in
    /// > management and resource pinning. From that perspective, containers do not
    /// > have a "state" but rather this is the set of resources that will be
    /// > considered in use by the container.
    /// > 
    /// > From the perspective of the execution service, these objects represent the
    /// > base parameters for creating a container process.
    /// > 
    /// > In general, when looking to add fields for this type, first ask yourself
    /// > whether or not the function of the field has to do with runtime execution or
    /// > is invariant of the runtime state of the container. If it has to do with
    /// > runtime, or changes as the "container" is started and stops, it probably
    /// > doesn't belong on this object.
    public protocol ServiceProtocol: Containerd_Services_Containers_V1_Containers.StreamingServiceProtocol {
        /// Handle the "Get" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Containers_V1_GetContainerRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Containerd_Services_Containers_V1_GetContainerResponse` message.
        func get(
            request: GRPCCore.ServerRequest<Containerd_Services_Containers_V1_GetContainerRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Containers_V1_GetContainerResponse>

        /// Handle the "List" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Containers_V1_ListContainersRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Containerd_Services_Containers_V1_ListContainersResponse` message.
        func list(
            request: GRPCCore.ServerRequest<Containerd_Services_Containers_V1_ListContainersRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Containers_V1_ListContainersResponse>

        /// Handle the "ListStream" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Containers_V1_ListContainersRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Containers_V1_ListContainerMessage` messages.
        func listStream(
            request: GRPCCore.ServerRequest<Containerd_Services_Containers_V1_ListContainersRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Containers_V1_ListContainerMessage>

        /// Handle the "Create" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Containers_V1_CreateContainerRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Containerd_Services_Containers_V1_CreateContainerResponse` message.
        func create(
            request: GRPCCore.ServerRequest<Containerd_Services_Containers_V1_CreateContainerRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Containers_V1_CreateContainerResponse>

        /// Handle the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Containers_V1_UpdateContainerRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Containerd_Services_Containers_V1_UpdateContainerResponse` message.
        func update(
            request: GRPCCore.ServerRequest<Containerd_Services_Containers_V1_UpdateContainerRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Containers_V1_UpdateContainerResponse>

        /// Handle the "Delete" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Containers_V1_DeleteContainerRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
        func delete(
            request: GRPCCore.ServerRequest<Containerd_Services_Containers_V1_DeleteContainerRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>
    }

    /// Simple service protocol for the "containerd.services.containers.v1.Containers" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Containers provides metadata storage for containers used in the execution
    /// > service.
    /// > 
    /// > The objects here provide an state-independent view of containers for use in
    /// > management and resource pinning. From that perspective, containers do not
    /// > have a "state" but rather this is the set of resources that will be
    /// > considered in use by the container.
    /// > 
    /// > From the perspective of the execution service, these objects represent the
    /// > base parameters for creating a container process.
    /// > 
    /// > In general, when looking to add fields for this type, first ask yourself
    /// > whether or not the function of the field has to do with runtime execution or
    /// > is invariant of the runtime state of the container. If it has to do with
    /// > runtime, or changes as the "container" is started and stops, it probably
    /// > doesn't belong on this object.
    public protocol SimpleServiceProtocol: Containerd_Services_Containers_V1_Containers.ServiceProtocol {
        /// Handle the "Get" method.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Containers_V1_GetContainerRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Containerd_Services_Containers_V1_GetContainerResponse` to respond with.
        func get(
            request: Containerd_Services_Containers_V1_GetContainerRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Containerd_Services_Containers_V1_GetContainerResponse

        /// Handle the "List" method.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Containers_V1_ListContainersRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Containerd_Services_Containers_V1_ListContainersResponse` to respond with.
        func list(
            request: Containerd_Services_Containers_V1_ListContainersRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Containerd_Services_Containers_V1_ListContainersResponse

        /// Handle the "ListStream" method.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Containers_V1_ListContainersRequest` message.
        ///   - response: A response stream of `Containerd_Services_Containers_V1_ListContainerMessage` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func listStream(
            request: Containerd_Services_Containers_V1_ListContainersRequest,
            response: GRPCCore.RPCWriter<Containerd_Services_Containers_V1_ListContainerMessage>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "Create" method.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Containers_V1_CreateContainerRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Containerd_Services_Containers_V1_CreateContainerResponse` to respond with.
        func create(
            request: Containerd_Services_Containers_V1_CreateContainerRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Containerd_Services_Containers_V1_CreateContainerResponse

        /// Handle the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Containers_V1_UpdateContainerRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Containerd_Services_Containers_V1_UpdateContainerResponse` to respond with.
        func update(
            request: Containerd_Services_Containers_V1_UpdateContainerRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Containerd_Services_Containers_V1_UpdateContainerResponse

        /// Handle the "Delete" method.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Containers_V1_DeleteContainerRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `SwiftProtobuf.Google_Protobuf_Empty` to respond with.
        func delete(
            request: Containerd_Services_Containers_V1_DeleteContainerRequest,
            context: GRPCCore.ServerContext
        ) async throws -> SwiftProtobuf.Google_Protobuf_Empty
    }
}

// Default implementation of 'registerMethods(with:)'.
extension Containerd_Services_Containers_V1_Containers.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Containerd_Services_Containers_V1_Containers.Method.Get.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Containers_V1_GetContainerRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Containers_V1_GetContainerResponse>(),
            handler: { request, context in
                try await self.get(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Containers_V1_Containers.Method.List.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Containers_V1_ListContainersRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Containers_V1_ListContainersResponse>(),
            handler: { request, context in
                try await self.list(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Containers_V1_Containers.Method.ListStream.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Containers_V1_ListContainersRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Containers_V1_ListContainerMessage>(),
            handler: { request, context in
                try await self.listStream(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Containers_V1_Containers.Method.Create.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Containers_V1_CreateContainerRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Containers_V1_CreateContainerResponse>(),
            handler: { request, context in
                try await self.create(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Containers_V1_Containers.Method.Update.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Containers_V1_UpdateContainerRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Containers_V1_UpdateContainerResponse>(),
            handler: { request, context in
                try await self.update(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Containers_V1_Containers.Method.Delete.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Containers_V1_DeleteContainerRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            handler: { request, context in
                try await self.delete(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension Containerd_Services_Containers_V1_Containers.ServiceProtocol {
    public func get(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Containers_V1_GetContainerRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Containers_V1_GetContainerResponse> {
        let response = try await self.get(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func list(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Containers_V1_ListContainersRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Containers_V1_ListContainersResponse> {
        let response = try await self.list(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func listStream(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Containers_V1_ListContainersRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Containers_V1_ListContainerMessage> {
        let response = try await self.listStream(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return response
    }

    public func create(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Containers_V1_CreateContainerRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Containers_V1_CreateContainerResponse> {
        let response = try await self.create(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func update(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Containers_V1_UpdateContainerRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Containers_V1_UpdateContainerResponse> {
        let response = try await self.update(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func delete(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Containers_V1_DeleteContainerRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        let response = try await self.delete(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension Containerd_Services_Containers_V1_Containers.SimpleServiceProtocol {
    public func get(
        request: GRPCCore.ServerRequest<Containerd_Services_Containers_V1_GetContainerRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Containers_V1_GetContainerResponse> {
        return GRPCCore.ServerResponse<Containerd_Services_Containers_V1_GetContainerResponse>(
            message: try await self.get(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func list(
        request: GRPCCore.ServerRequest<Containerd_Services_Containers_V1_ListContainersRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Containers_V1_ListContainersResponse> {
        return GRPCCore.ServerResponse<Containerd_Services_Containers_V1_ListContainersResponse>(
            message: try await self.list(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func listStream(
        request: GRPCCore.ServerRequest<Containerd_Services_Containers_V1_ListContainersRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Containers_V1_ListContainerMessage> {
        return GRPCCore.StreamingServerResponse<Containerd_Services_Containers_V1_ListContainerMessage>(
            metadata: [:],
            producer: { writer in
                try await self.listStream(
                    request: request.message,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    public func create(
        request: GRPCCore.ServerRequest<Containerd_Services_Containers_V1_CreateContainerRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Containers_V1_CreateContainerResponse> {
        return GRPCCore.ServerResponse<Containerd_Services_Containers_V1_CreateContainerResponse>(
            message: try await self.create(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func update(
        request: GRPCCore.ServerRequest<Containerd_Services_Containers_V1_UpdateContainerRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Containers_V1_UpdateContainerResponse> {
        return GRPCCore.ServerResponse<Containerd_Services_Containers_V1_UpdateContainerResponse>(
            message: try await self.update(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func delete(
        request: GRPCCore.ServerRequest<Containerd_Services_Containers_V1_DeleteContainerRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        return GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>(
            message: try await self.delete(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: containerd.services.containers.v1.Containers (client)

extension Containerd_Services_Containers_V1_Containers {
    /// Generated client protocol for the "containerd.services.containers.v1.Containers" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Containers provides metadata storage for containers used in the execution
    /// > service.
    /// > 
    /// > The objects here provide an state-independent view of containers for use in
    /// > management and resource pinning. From that perspective, containers do not
    /// > have a "state" but rather this is the set of resources that will be
    /// > considered in use by the container.
    /// > 
    /// > From the perspective of the execution service, these objects represent the
    /// > base parameters for creating a container process.
    /// > 
    /// > In general, when looking to add fields for this type, first ask yourself
    /// > whether or not the function of the field has to do with runtime execution or
    /// > is invariant of the runtime state of the container. If it has to do with
    /// > runtime, or changes as the "container" is started and stops, it probably
    /// > doesn't belong on this object.
    public protocol ClientProtocol: Sendable {
        /// Call the "Get" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Containers_V1_GetContainerRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Containers_V1_GetContainerRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Containers_V1_GetContainerResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func get<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Containers_V1_GetContainerRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Containers_V1_GetContainerRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Containers_V1_GetContainerResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Containers_V1_GetContainerResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "List" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Containers_V1_ListContainersRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Containers_V1_ListContainersRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Containers_V1_ListContainersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func list<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Containers_V1_ListContainersRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Containers_V1_ListContainersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Containers_V1_ListContainersResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Containers_V1_ListContainersResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListStream" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Containers_V1_ListContainersRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Containers_V1_ListContainersRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Containers_V1_ListContainerMessage` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listStream<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Containers_V1_ListContainersRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Containers_V1_ListContainersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Containers_V1_ListContainerMessage>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Containerd_Services_Containers_V1_ListContainerMessage>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Create" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Containers_V1_CreateContainerRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Containers_V1_CreateContainerRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Containers_V1_CreateContainerResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func create<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Containers_V1_CreateContainerRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Containers_V1_CreateContainerRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Containers_V1_CreateContainerResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Containers_V1_CreateContainerResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Containers_V1_UpdateContainerRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Containers_V1_UpdateContainerRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Containers_V1_UpdateContainerResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func update<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Containers_V1_UpdateContainerRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Containers_V1_UpdateContainerRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Containers_V1_UpdateContainerResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Containers_V1_UpdateContainerResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Delete" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Containers_V1_DeleteContainerRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Containers_V1_DeleteContainerRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func delete<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Containers_V1_DeleteContainerRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Containers_V1_DeleteContainerRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "containerd.services.containers.v1.Containers" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Containers provides metadata storage for containers used in the execution
    /// > service.
    /// > 
    /// > The objects here provide an state-independent view of containers for use in
    /// > management and resource pinning. From that perspective, containers do not
    /// > have a "state" but rather this is the set of resources that will be
    /// > considered in use by the container.
    /// > 
    /// > From the perspective of the execution service, these objects represent the
    /// > base parameters for creating a container process.
    /// > 
    /// > In general, when looking to add fields for this type, first ask yourself
    /// > whether or not the function of the field has to do with runtime execution or
    /// > is invariant of the runtime state of the container. If it has to do with
    /// > runtime, or changes as the "container" is started and stops, it probably
    /// > doesn't belong on this object.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "Get" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Containers_V1_GetContainerRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Containers_V1_GetContainerRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Containers_V1_GetContainerResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func get<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Containers_V1_GetContainerRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Containers_V1_GetContainerRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Containers_V1_GetContainerResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Containers_V1_GetContainerResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Containers_V1_Containers.Method.Get.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "List" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Containers_V1_ListContainersRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Containers_V1_ListContainersRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Containers_V1_ListContainersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func list<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Containers_V1_ListContainersRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Containers_V1_ListContainersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Containers_V1_ListContainersResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Containers_V1_ListContainersResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Containers_V1_Containers.Method.List.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListStream" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Containers_V1_ListContainersRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Containers_V1_ListContainersRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Containers_V1_ListContainerMessage` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listStream<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Containers_V1_ListContainersRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Containers_V1_ListContainersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Containers_V1_ListContainerMessage>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Containerd_Services_Containers_V1_ListContainerMessage>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.serverStreaming(
                request: request,
                descriptor: Containerd_Services_Containers_V1_Containers.Method.ListStream.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Create" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Containers_V1_CreateContainerRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Containers_V1_CreateContainerRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Containers_V1_CreateContainerResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func create<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Containers_V1_CreateContainerRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Containers_V1_CreateContainerRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Containers_V1_CreateContainerResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Containers_V1_CreateContainerResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Containers_V1_Containers.Method.Create.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Containers_V1_UpdateContainerRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Containers_V1_UpdateContainerRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Containers_V1_UpdateContainerResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func update<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Containers_V1_UpdateContainerRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Containers_V1_UpdateContainerRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Containers_V1_UpdateContainerResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Containers_V1_UpdateContainerResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Containers_V1_Containers.Method.Update.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Delete" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Containers_V1_DeleteContainerRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Containers_V1_DeleteContainerRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func delete<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Containers_V1_DeleteContainerRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Containers_V1_DeleteContainerRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Containers_V1_Containers.Method.Delete.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Containerd_Services_Containers_V1_Containers.ClientProtocol {
    /// Call the "Get" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Containers_V1_GetContainerRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func get<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Containers_V1_GetContainerRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Containers_V1_GetContainerResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.get(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Containers_V1_GetContainerRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Containers_V1_GetContainerResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "List" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Containers_V1_ListContainersRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func list<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Containers_V1_ListContainersRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Containers_V1_ListContainersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.list(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Containers_V1_ListContainersRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Containers_V1_ListContainersResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListStream" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Containers_V1_ListContainersRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listStream<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Containers_V1_ListContainersRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Containerd_Services_Containers_V1_ListContainerMessage>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.listStream(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Containers_V1_ListContainersRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Containers_V1_ListContainerMessage>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Create" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Containers_V1_CreateContainerRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func create<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Containers_V1_CreateContainerRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Containers_V1_CreateContainerResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.create(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Containers_V1_CreateContainerRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Containers_V1_CreateContainerResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Update" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Containers_V1_UpdateContainerRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func update<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Containers_V1_UpdateContainerRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Containers_V1_UpdateContainerResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.update(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Containers_V1_UpdateContainerRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Containers_V1_UpdateContainerResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Delete" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Containers_V1_DeleteContainerRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func delete<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Containers_V1_DeleteContainerRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.delete(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Containers_V1_DeleteContainerRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Containerd_Services_Containers_V1_Containers.ClientProtocol {
    /// Call the "Get" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func get<Result>(
        _ message: Containerd_Services_Containers_V1_GetContainerRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Containers_V1_GetContainerResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Containers_V1_GetContainerRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.get(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "List" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func list<Result>(
        _ message: Containerd_Services_Containers_V1_ListContainersRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Containers_V1_ListContainersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Containers_V1_ListContainersRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.list(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListStream" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listStream<Result>(
        _ message: Containerd_Services_Containers_V1_ListContainersRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Containerd_Services_Containers_V1_ListContainerMessage>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Containers_V1_ListContainersRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listStream(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Create" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func create<Result>(
        _ message: Containerd_Services_Containers_V1_CreateContainerRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Containers_V1_CreateContainerResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Containers_V1_CreateContainerRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.create(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Update" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func update<Result>(
        _ message: Containerd_Services_Containers_V1_UpdateContainerRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Containers_V1_UpdateContainerResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Containers_V1_UpdateContainerRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.update(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Delete" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func delete<Result>(
        _ message: Containerd_Services_Containers_V1_DeleteContainerRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Containers_V1_DeleteContainerRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.delete(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}