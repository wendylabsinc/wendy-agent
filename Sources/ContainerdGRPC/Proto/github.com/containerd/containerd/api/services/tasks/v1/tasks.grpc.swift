//
//Copyright The containerd Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: github.com/containerd/containerd/api/services/tasks/v1/tasks.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - containerd.services.tasks.v1.Tasks

/// Namespace containing generated types for the "containerd.services.tasks.v1.Tasks" service.
public enum Containerd_Services_Tasks_V1_Tasks {
    /// Service descriptor for the "containerd.services.tasks.v1.Tasks" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.tasks.v1.Tasks")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "Create" metadata.
        public enum Create {
            /// Request type for "Create".
            public typealias Input = Containerd_Services_Tasks_V1_CreateTaskRequest
            /// Response type for "Create".
            public typealias Output = Containerd_Services_Tasks_V1_CreateTaskResponse
            /// Descriptor for "Create".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.tasks.v1.Tasks"),
                method: "Create"
            )
        }
        /// Namespace for "Start" metadata.
        public enum Start {
            /// Request type for "Start".
            public typealias Input = Containerd_Services_Tasks_V1_StartRequest
            /// Response type for "Start".
            public typealias Output = Containerd_Services_Tasks_V1_StartResponse
            /// Descriptor for "Start".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.tasks.v1.Tasks"),
                method: "Start"
            )
        }
        /// Namespace for "Delete" metadata.
        public enum Delete {
            /// Request type for "Delete".
            public typealias Input = Containerd_Services_Tasks_V1_DeleteTaskRequest
            /// Response type for "Delete".
            public typealias Output = Containerd_Services_Tasks_V1_DeleteResponse
            /// Descriptor for "Delete".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.tasks.v1.Tasks"),
                method: "Delete"
            )
        }
        /// Namespace for "DeleteProcess" metadata.
        public enum DeleteProcess {
            /// Request type for "DeleteProcess".
            public typealias Input = Containerd_Services_Tasks_V1_DeleteProcessRequest
            /// Response type for "DeleteProcess".
            public typealias Output = Containerd_Services_Tasks_V1_DeleteResponse
            /// Descriptor for "DeleteProcess".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.tasks.v1.Tasks"),
                method: "DeleteProcess"
            )
        }
        /// Namespace for "Get" metadata.
        public enum Get {
            /// Request type for "Get".
            public typealias Input = Containerd_Services_Tasks_V1_GetRequest
            /// Response type for "Get".
            public typealias Output = Containerd_Services_Tasks_V1_GetResponse
            /// Descriptor for "Get".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.tasks.v1.Tasks"),
                method: "Get"
            )
        }
        /// Namespace for "List" metadata.
        public enum List {
            /// Request type for "List".
            public typealias Input = Containerd_Services_Tasks_V1_ListTasksRequest
            /// Response type for "List".
            public typealias Output = Containerd_Services_Tasks_V1_ListTasksResponse
            /// Descriptor for "List".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.tasks.v1.Tasks"),
                method: "List"
            )
        }
        /// Namespace for "Kill" metadata.
        public enum Kill {
            /// Request type for "Kill".
            public typealias Input = Containerd_Services_Tasks_V1_KillRequest
            /// Response type for "Kill".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "Kill".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.tasks.v1.Tasks"),
                method: "Kill"
            )
        }
        /// Namespace for "Exec" metadata.
        public enum Exec {
            /// Request type for "Exec".
            public typealias Input = Containerd_Services_Tasks_V1_ExecProcessRequest
            /// Response type for "Exec".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "Exec".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.tasks.v1.Tasks"),
                method: "Exec"
            )
        }
        /// Namespace for "ResizePty" metadata.
        public enum ResizePty {
            /// Request type for "ResizePty".
            public typealias Input = Containerd_Services_Tasks_V1_ResizePtyRequest
            /// Response type for "ResizePty".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "ResizePty".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.tasks.v1.Tasks"),
                method: "ResizePty"
            )
        }
        /// Namespace for "CloseIO" metadata.
        public enum CloseIO {
            /// Request type for "CloseIO".
            public typealias Input = Containerd_Services_Tasks_V1_CloseIORequest
            /// Response type for "CloseIO".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "CloseIO".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.tasks.v1.Tasks"),
                method: "CloseIO"
            )
        }
        /// Namespace for "Pause" metadata.
        public enum Pause {
            /// Request type for "Pause".
            public typealias Input = Containerd_Services_Tasks_V1_PauseTaskRequest
            /// Response type for "Pause".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "Pause".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.tasks.v1.Tasks"),
                method: "Pause"
            )
        }
        /// Namespace for "Resume" metadata.
        public enum Resume {
            /// Request type for "Resume".
            public typealias Input = Containerd_Services_Tasks_V1_ResumeTaskRequest
            /// Response type for "Resume".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "Resume".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.tasks.v1.Tasks"),
                method: "Resume"
            )
        }
        /// Namespace for "ListPids" metadata.
        public enum ListPids {
            /// Request type for "ListPids".
            public typealias Input = Containerd_Services_Tasks_V1_ListPidsRequest
            /// Response type for "ListPids".
            public typealias Output = Containerd_Services_Tasks_V1_ListPidsResponse
            /// Descriptor for "ListPids".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.tasks.v1.Tasks"),
                method: "ListPids"
            )
        }
        /// Namespace for "Checkpoint" metadata.
        public enum Checkpoint {
            /// Request type for "Checkpoint".
            public typealias Input = Containerd_Services_Tasks_V1_CheckpointTaskRequest
            /// Response type for "Checkpoint".
            public typealias Output = Containerd_Services_Tasks_V1_CheckpointTaskResponse
            /// Descriptor for "Checkpoint".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.tasks.v1.Tasks"),
                method: "Checkpoint"
            )
        }
        /// Namespace for "Update" metadata.
        public enum Update {
            /// Request type for "Update".
            public typealias Input = Containerd_Services_Tasks_V1_UpdateTaskRequest
            /// Response type for "Update".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "Update".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.tasks.v1.Tasks"),
                method: "Update"
            )
        }
        /// Namespace for "Metrics" metadata.
        public enum Metrics {
            /// Request type for "Metrics".
            public typealias Input = Containerd_Services_Tasks_V1_MetricsRequest
            /// Response type for "Metrics".
            public typealias Output = Containerd_Services_Tasks_V1_MetricsResponse
            /// Descriptor for "Metrics".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.tasks.v1.Tasks"),
                method: "Metrics"
            )
        }
        /// Namespace for "Wait" metadata.
        public enum Wait {
            /// Request type for "Wait".
            public typealias Input = Containerd_Services_Tasks_V1_WaitRequest
            /// Response type for "Wait".
            public typealias Output = Containerd_Services_Tasks_V1_WaitResponse
            /// Descriptor for "Wait".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.tasks.v1.Tasks"),
                method: "Wait"
            )
        }
        /// Descriptors for all methods in the "containerd.services.tasks.v1.Tasks" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            Create.descriptor,
            Start.descriptor,
            Delete.descriptor,
            DeleteProcess.descriptor,
            Get.descriptor,
            List.descriptor,
            Kill.descriptor,
            Exec.descriptor,
            ResizePty.descriptor,
            CloseIO.descriptor,
            Pause.descriptor,
            Resume.descriptor,
            ListPids.descriptor,
            Checkpoint.descriptor,
            Update.descriptor,
            Metrics.descriptor,
            Wait.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "containerd.services.tasks.v1.Tasks" service.
    public static let containerd_services_tasks_v1_Tasks = GRPCCore.ServiceDescriptor(fullyQualifiedService: "containerd.services.tasks.v1.Tasks")
}

// MARK: containerd.services.tasks.v1.Tasks (server)

extension Containerd_Services_Tasks_V1_Tasks {
    /// Streaming variant of the service protocol for the "containerd.services.tasks.v1.Tasks" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "Create" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create a task.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Tasks_V1_CreateTaskRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Tasks_V1_CreateTaskResponse` messages.
        func create(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_CreateTaskRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Tasks_V1_CreateTaskResponse>

        /// Handle the "Start" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Start a process.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Tasks_V1_StartRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Tasks_V1_StartResponse` messages.
        func start(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_StartRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Tasks_V1_StartResponse>

        /// Handle the "Delete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete a task and on disk state.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Tasks_V1_DeleteTaskRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Tasks_V1_DeleteResponse` messages.
        func delete(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_DeleteTaskRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Tasks_V1_DeleteResponse>

        /// Handle the "DeleteProcess" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Tasks_V1_DeleteProcessRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Tasks_V1_DeleteResponse` messages.
        func deleteProcess(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_DeleteProcessRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Tasks_V1_DeleteResponse>

        /// Handle the "Get" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Tasks_V1_GetRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Tasks_V1_GetResponse` messages.
        func get(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_GetRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Tasks_V1_GetResponse>

        /// Handle the "List" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Tasks_V1_ListTasksRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Tasks_V1_ListTasksResponse` messages.
        func list(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_ListTasksRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Tasks_V1_ListTasksResponse>

        /// Handle the "Kill" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Kill a task or process.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Tasks_V1_KillRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `SwiftProtobuf.Google_Protobuf_Empty` messages.
        func kill(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_KillRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty>

        /// Handle the "Exec" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Tasks_V1_ExecProcessRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `SwiftProtobuf.Google_Protobuf_Empty` messages.
        func exec(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_ExecProcessRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty>

        /// Handle the "ResizePty" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Tasks_V1_ResizePtyRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `SwiftProtobuf.Google_Protobuf_Empty` messages.
        func resizePty(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_ResizePtyRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty>

        /// Handle the "CloseIO" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Tasks_V1_CloseIORequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `SwiftProtobuf.Google_Protobuf_Empty` messages.
        func closeIO(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_CloseIORequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty>

        /// Handle the "Pause" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Tasks_V1_PauseTaskRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `SwiftProtobuf.Google_Protobuf_Empty` messages.
        func pause(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_PauseTaskRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty>

        /// Handle the "Resume" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Tasks_V1_ResumeTaskRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `SwiftProtobuf.Google_Protobuf_Empty` messages.
        func resume(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_ResumeTaskRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty>

        /// Handle the "ListPids" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Tasks_V1_ListPidsRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Tasks_V1_ListPidsResponse` messages.
        func listPids(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_ListPidsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Tasks_V1_ListPidsResponse>

        /// Handle the "Checkpoint" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Tasks_V1_CheckpointTaskRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Tasks_V1_CheckpointTaskResponse` messages.
        func checkpoint(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_CheckpointTaskRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Tasks_V1_CheckpointTaskResponse>

        /// Handle the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Tasks_V1_UpdateTaskRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `SwiftProtobuf.Google_Protobuf_Empty` messages.
        func update(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_UpdateTaskRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty>

        /// Handle the "Metrics" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Tasks_V1_MetricsRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Tasks_V1_MetricsResponse` messages.
        func metrics(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_MetricsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Tasks_V1_MetricsResponse>

        /// Handle the "Wait" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Containerd_Services_Tasks_V1_WaitRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Containerd_Services_Tasks_V1_WaitResponse` messages.
        func wait(
            request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_WaitRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Tasks_V1_WaitResponse>
    }

    /// Service protocol for the "containerd.services.tasks.v1.Tasks" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    public protocol ServiceProtocol: Containerd_Services_Tasks_V1_Tasks.StreamingServiceProtocol {
        /// Handle the "Create" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create a task.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_CreateTaskRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Containerd_Services_Tasks_V1_CreateTaskResponse` message.
        func create(
            request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_CreateTaskRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_CreateTaskResponse>

        /// Handle the "Start" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Start a process.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_StartRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Containerd_Services_Tasks_V1_StartResponse` message.
        func start(
            request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_StartRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_StartResponse>

        /// Handle the "Delete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete a task and on disk state.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_DeleteTaskRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Containerd_Services_Tasks_V1_DeleteResponse` message.
        func delete(
            request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_DeleteTaskRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_DeleteResponse>

        /// Handle the "DeleteProcess" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_DeleteProcessRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Containerd_Services_Tasks_V1_DeleteResponse` message.
        func deleteProcess(
            request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_DeleteProcessRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_DeleteResponse>

        /// Handle the "Get" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_GetRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Containerd_Services_Tasks_V1_GetResponse` message.
        func get(
            request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_GetRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_GetResponse>

        /// Handle the "List" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_ListTasksRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Containerd_Services_Tasks_V1_ListTasksResponse` message.
        func list(
            request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_ListTasksRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_ListTasksResponse>

        /// Handle the "Kill" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Kill a task or process.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_KillRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
        func kill(
            request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_KillRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>

        /// Handle the "Exec" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_ExecProcessRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
        func exec(
            request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_ExecProcessRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>

        /// Handle the "ResizePty" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_ResizePtyRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
        func resizePty(
            request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_ResizePtyRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>

        /// Handle the "CloseIO" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_CloseIORequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
        func closeIO(
            request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_CloseIORequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>

        /// Handle the "Pause" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_PauseTaskRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
        func pause(
            request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_PauseTaskRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>

        /// Handle the "Resume" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_ResumeTaskRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
        func resume(
            request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_ResumeTaskRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>

        /// Handle the "ListPids" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_ListPidsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Containerd_Services_Tasks_V1_ListPidsResponse` message.
        func listPids(
            request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_ListPidsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_ListPidsResponse>

        /// Handle the "Checkpoint" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_CheckpointTaskRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Containerd_Services_Tasks_V1_CheckpointTaskResponse` message.
        func checkpoint(
            request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_CheckpointTaskRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_CheckpointTaskResponse>

        /// Handle the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_UpdateTaskRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
        func update(
            request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_UpdateTaskRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>

        /// Handle the "Metrics" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_MetricsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Containerd_Services_Tasks_V1_MetricsResponse` message.
        func metrics(
            request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_MetricsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_MetricsResponse>

        /// Handle the "Wait" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_WaitRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Containerd_Services_Tasks_V1_WaitResponse` message.
        func wait(
            request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_WaitRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_WaitResponse>
    }

    /// Simple service protocol for the "containerd.services.tasks.v1.Tasks" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    public protocol SimpleServiceProtocol: Containerd_Services_Tasks_V1_Tasks.ServiceProtocol {
        /// Handle the "Create" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create a task.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Tasks_V1_CreateTaskRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Containerd_Services_Tasks_V1_CreateTaskResponse` to respond with.
        func create(
            request: Containerd_Services_Tasks_V1_CreateTaskRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Containerd_Services_Tasks_V1_CreateTaskResponse

        /// Handle the "Start" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Start a process.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Tasks_V1_StartRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Containerd_Services_Tasks_V1_StartResponse` to respond with.
        func start(
            request: Containerd_Services_Tasks_V1_StartRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Containerd_Services_Tasks_V1_StartResponse

        /// Handle the "Delete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete a task and on disk state.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Tasks_V1_DeleteTaskRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Containerd_Services_Tasks_V1_DeleteResponse` to respond with.
        func delete(
            request: Containerd_Services_Tasks_V1_DeleteTaskRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Containerd_Services_Tasks_V1_DeleteResponse

        /// Handle the "DeleteProcess" method.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Tasks_V1_DeleteProcessRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Containerd_Services_Tasks_V1_DeleteResponse` to respond with.
        func deleteProcess(
            request: Containerd_Services_Tasks_V1_DeleteProcessRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Containerd_Services_Tasks_V1_DeleteResponse

        /// Handle the "Get" method.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Tasks_V1_GetRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Containerd_Services_Tasks_V1_GetResponse` to respond with.
        func get(
            request: Containerd_Services_Tasks_V1_GetRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Containerd_Services_Tasks_V1_GetResponse

        /// Handle the "List" method.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Tasks_V1_ListTasksRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Containerd_Services_Tasks_V1_ListTasksResponse` to respond with.
        func list(
            request: Containerd_Services_Tasks_V1_ListTasksRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Containerd_Services_Tasks_V1_ListTasksResponse

        /// Handle the "Kill" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Kill a task or process.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Tasks_V1_KillRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `SwiftProtobuf.Google_Protobuf_Empty` to respond with.
        func kill(
            request: Containerd_Services_Tasks_V1_KillRequest,
            context: GRPCCore.ServerContext
        ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

        /// Handle the "Exec" method.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Tasks_V1_ExecProcessRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `SwiftProtobuf.Google_Protobuf_Empty` to respond with.
        func exec(
            request: Containerd_Services_Tasks_V1_ExecProcessRequest,
            context: GRPCCore.ServerContext
        ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

        /// Handle the "ResizePty" method.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Tasks_V1_ResizePtyRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `SwiftProtobuf.Google_Protobuf_Empty` to respond with.
        func resizePty(
            request: Containerd_Services_Tasks_V1_ResizePtyRequest,
            context: GRPCCore.ServerContext
        ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

        /// Handle the "CloseIO" method.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Tasks_V1_CloseIORequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `SwiftProtobuf.Google_Protobuf_Empty` to respond with.
        func closeIO(
            request: Containerd_Services_Tasks_V1_CloseIORequest,
            context: GRPCCore.ServerContext
        ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

        /// Handle the "Pause" method.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Tasks_V1_PauseTaskRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `SwiftProtobuf.Google_Protobuf_Empty` to respond with.
        func pause(
            request: Containerd_Services_Tasks_V1_PauseTaskRequest,
            context: GRPCCore.ServerContext
        ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

        /// Handle the "Resume" method.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Tasks_V1_ResumeTaskRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `SwiftProtobuf.Google_Protobuf_Empty` to respond with.
        func resume(
            request: Containerd_Services_Tasks_V1_ResumeTaskRequest,
            context: GRPCCore.ServerContext
        ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

        /// Handle the "ListPids" method.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Tasks_V1_ListPidsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Containerd_Services_Tasks_V1_ListPidsResponse` to respond with.
        func listPids(
            request: Containerd_Services_Tasks_V1_ListPidsRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Containerd_Services_Tasks_V1_ListPidsResponse

        /// Handle the "Checkpoint" method.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Tasks_V1_CheckpointTaskRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Containerd_Services_Tasks_V1_CheckpointTaskResponse` to respond with.
        func checkpoint(
            request: Containerd_Services_Tasks_V1_CheckpointTaskRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Containerd_Services_Tasks_V1_CheckpointTaskResponse

        /// Handle the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Tasks_V1_UpdateTaskRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `SwiftProtobuf.Google_Protobuf_Empty` to respond with.
        func update(
            request: Containerd_Services_Tasks_V1_UpdateTaskRequest,
            context: GRPCCore.ServerContext
        ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

        /// Handle the "Metrics" method.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Tasks_V1_MetricsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Containerd_Services_Tasks_V1_MetricsResponse` to respond with.
        func metrics(
            request: Containerd_Services_Tasks_V1_MetricsRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Containerd_Services_Tasks_V1_MetricsResponse

        /// Handle the "Wait" method.
        ///
        /// - Parameters:
        ///   - request: A `Containerd_Services_Tasks_V1_WaitRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Containerd_Services_Tasks_V1_WaitResponse` to respond with.
        func wait(
            request: Containerd_Services_Tasks_V1_WaitRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Containerd_Services_Tasks_V1_WaitResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
extension Containerd_Services_Tasks_V1_Tasks.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Containerd_Services_Tasks_V1_Tasks.Method.Create.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_CreateTaskRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_CreateTaskResponse>(),
            handler: { request, context in
                try await self.create(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Tasks_V1_Tasks.Method.Start.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_StartRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_StartResponse>(),
            handler: { request, context in
                try await self.start(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Tasks_V1_Tasks.Method.Delete.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_DeleteTaskRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_DeleteResponse>(),
            handler: { request, context in
                try await self.delete(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Tasks_V1_Tasks.Method.DeleteProcess.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_DeleteProcessRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_DeleteResponse>(),
            handler: { request, context in
                try await self.deleteProcess(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Tasks_V1_Tasks.Method.Get.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_GetRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_GetResponse>(),
            handler: { request, context in
                try await self.get(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Tasks_V1_Tasks.Method.List.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_ListTasksRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_ListTasksResponse>(),
            handler: { request, context in
                try await self.list(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Tasks_V1_Tasks.Method.Kill.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_KillRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            handler: { request, context in
                try await self.kill(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Tasks_V1_Tasks.Method.Exec.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_ExecProcessRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            handler: { request, context in
                try await self.exec(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Tasks_V1_Tasks.Method.ResizePty.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_ResizePtyRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            handler: { request, context in
                try await self.resizePty(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Tasks_V1_Tasks.Method.CloseIO.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_CloseIORequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            handler: { request, context in
                try await self.closeIO(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Tasks_V1_Tasks.Method.Pause.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_PauseTaskRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            handler: { request, context in
                try await self.pause(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Tasks_V1_Tasks.Method.Resume.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_ResumeTaskRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            handler: { request, context in
                try await self.resume(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Tasks_V1_Tasks.Method.ListPids.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_ListPidsRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_ListPidsResponse>(),
            handler: { request, context in
                try await self.listPids(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Tasks_V1_Tasks.Method.Checkpoint.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_CheckpointTaskRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_CheckpointTaskResponse>(),
            handler: { request, context in
                try await self.checkpoint(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Tasks_V1_Tasks.Method.Update.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_UpdateTaskRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            handler: { request, context in
                try await self.update(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Tasks_V1_Tasks.Method.Metrics.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_MetricsRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_MetricsResponse>(),
            handler: { request, context in
                try await self.metrics(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Containerd_Services_Tasks_V1_Tasks.Method.Wait.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_WaitRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_WaitResponse>(),
            handler: { request, context in
                try await self.wait(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension Containerd_Services_Tasks_V1_Tasks.ServiceProtocol {
    public func create(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_CreateTaskRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Tasks_V1_CreateTaskResponse> {
        let response = try await self.create(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func start(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_StartRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Tasks_V1_StartResponse> {
        let response = try await self.start(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func delete(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_DeleteTaskRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Tasks_V1_DeleteResponse> {
        let response = try await self.delete(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func deleteProcess(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_DeleteProcessRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Tasks_V1_DeleteResponse> {
        let response = try await self.deleteProcess(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func get(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_GetRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Tasks_V1_GetResponse> {
        let response = try await self.get(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func list(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_ListTasksRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Tasks_V1_ListTasksResponse> {
        let response = try await self.list(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func kill(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_KillRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        let response = try await self.kill(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func exec(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_ExecProcessRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        let response = try await self.exec(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func resizePty(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_ResizePtyRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        let response = try await self.resizePty(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func closeIO(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_CloseIORequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        let response = try await self.closeIO(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func pause(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_PauseTaskRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        let response = try await self.pause(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func resume(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_ResumeTaskRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        let response = try await self.resume(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func listPids(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_ListPidsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Tasks_V1_ListPidsResponse> {
        let response = try await self.listPids(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func checkpoint(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_CheckpointTaskRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Tasks_V1_CheckpointTaskResponse> {
        let response = try await self.checkpoint(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func update(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_UpdateTaskRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        let response = try await self.update(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func metrics(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_MetricsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Tasks_V1_MetricsResponse> {
        let response = try await self.metrics(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func wait(
        request: GRPCCore.StreamingServerRequest<Containerd_Services_Tasks_V1_WaitRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Containerd_Services_Tasks_V1_WaitResponse> {
        let response = try await self.wait(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension Containerd_Services_Tasks_V1_Tasks.SimpleServiceProtocol {
    public func create(
        request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_CreateTaskRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_CreateTaskResponse> {
        return GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_CreateTaskResponse>(
            message: try await self.create(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func start(
        request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_StartRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_StartResponse> {
        return GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_StartResponse>(
            message: try await self.start(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func delete(
        request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_DeleteTaskRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_DeleteResponse> {
        return GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_DeleteResponse>(
            message: try await self.delete(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func deleteProcess(
        request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_DeleteProcessRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_DeleteResponse> {
        return GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_DeleteResponse>(
            message: try await self.deleteProcess(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func get(
        request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_GetRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_GetResponse> {
        return GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_GetResponse>(
            message: try await self.get(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func list(
        request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_ListTasksRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_ListTasksResponse> {
        return GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_ListTasksResponse>(
            message: try await self.list(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func kill(
        request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_KillRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        return GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>(
            message: try await self.kill(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func exec(
        request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_ExecProcessRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        return GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>(
            message: try await self.exec(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func resizePty(
        request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_ResizePtyRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        return GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>(
            message: try await self.resizePty(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func closeIO(
        request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_CloseIORequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        return GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>(
            message: try await self.closeIO(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func pause(
        request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_PauseTaskRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        return GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>(
            message: try await self.pause(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func resume(
        request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_ResumeTaskRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        return GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>(
            message: try await self.resume(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func listPids(
        request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_ListPidsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_ListPidsResponse> {
        return GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_ListPidsResponse>(
            message: try await self.listPids(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func checkpoint(
        request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_CheckpointTaskRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_CheckpointTaskResponse> {
        return GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_CheckpointTaskResponse>(
            message: try await self.checkpoint(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func update(
        request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_UpdateTaskRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        return GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>(
            message: try await self.update(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func metrics(
        request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_MetricsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_MetricsResponse> {
        return GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_MetricsResponse>(
            message: try await self.metrics(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func wait(
        request: GRPCCore.ServerRequest<Containerd_Services_Tasks_V1_WaitRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_WaitResponse> {
        return GRPCCore.ServerResponse<Containerd_Services_Tasks_V1_WaitResponse>(
            message: try await self.wait(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: containerd.services.tasks.v1.Tasks (client)

extension Containerd_Services_Tasks_V1_Tasks {
    /// Generated client protocol for the "containerd.services.tasks.v1.Tasks" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    public protocol ClientProtocol: Sendable {
        /// Call the "Create" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create a task.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_CreateTaskRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_CreateTaskRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Tasks_V1_CreateTaskResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func create<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_CreateTaskRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_CreateTaskRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Tasks_V1_CreateTaskResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_CreateTaskResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Start" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Start a process.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_StartRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_StartRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Tasks_V1_StartResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func start<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_StartRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_StartRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Tasks_V1_StartResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_StartResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Delete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete a task and on disk state.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_DeleteTaskRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_DeleteTaskRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Tasks_V1_DeleteResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func delete<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_DeleteTaskRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_DeleteTaskRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Tasks_V1_DeleteResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_DeleteResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteProcess" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_DeleteProcessRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_DeleteProcessRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Tasks_V1_DeleteResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteProcess<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_DeleteProcessRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_DeleteProcessRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Tasks_V1_DeleteResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_DeleteResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Get" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_GetRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_GetRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Tasks_V1_GetResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func get<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_GetRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_GetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Tasks_V1_GetResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_GetResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "List" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_ListTasksRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_ListTasksRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Tasks_V1_ListTasksResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func list<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_ListTasksRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_ListTasksRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Tasks_V1_ListTasksResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_ListTasksResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Kill" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Kill a task or process.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_KillRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_KillRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func kill<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_KillRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_KillRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Exec" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_ExecProcessRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_ExecProcessRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func exec<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_ExecProcessRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_ExecProcessRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ResizePty" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_ResizePtyRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_ResizePtyRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func resizePty<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_ResizePtyRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_ResizePtyRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CloseIO" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_CloseIORequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_CloseIORequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func closeIO<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_CloseIORequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_CloseIORequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Pause" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_PauseTaskRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_PauseTaskRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func pause<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_PauseTaskRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_PauseTaskRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Resume" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_ResumeTaskRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_ResumeTaskRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func resume<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_ResumeTaskRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_ResumeTaskRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListPids" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_ListPidsRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_ListPidsRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Tasks_V1_ListPidsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listPids<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_ListPidsRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_ListPidsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Tasks_V1_ListPidsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_ListPidsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Checkpoint" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_CheckpointTaskRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_CheckpointTaskRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Tasks_V1_CheckpointTaskResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func checkpoint<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_CheckpointTaskRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_CheckpointTaskRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Tasks_V1_CheckpointTaskResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_CheckpointTaskResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_UpdateTaskRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_UpdateTaskRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func update<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_UpdateTaskRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_UpdateTaskRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Metrics" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_MetricsRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_MetricsRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Tasks_V1_MetricsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func metrics<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_MetricsRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_MetricsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Tasks_V1_MetricsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_MetricsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Wait" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_WaitRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_WaitRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Tasks_V1_WaitResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func wait<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_WaitRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_WaitRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Tasks_V1_WaitResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_WaitResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "containerd.services.tasks.v1.Tasks" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "Create" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Create a task.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_CreateTaskRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_CreateTaskRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Tasks_V1_CreateTaskResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func create<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_CreateTaskRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_CreateTaskRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Tasks_V1_CreateTaskResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_CreateTaskResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Tasks_V1_Tasks.Method.Create.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Start" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Start a process.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_StartRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_StartRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Tasks_V1_StartResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func start<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_StartRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_StartRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Tasks_V1_StartResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_StartResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Tasks_V1_Tasks.Method.Start.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Delete" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Delete a task and on disk state.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_DeleteTaskRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_DeleteTaskRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Tasks_V1_DeleteResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func delete<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_DeleteTaskRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_DeleteTaskRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Tasks_V1_DeleteResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_DeleteResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Tasks_V1_Tasks.Method.Delete.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteProcess" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_DeleteProcessRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_DeleteProcessRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Tasks_V1_DeleteResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteProcess<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_DeleteProcessRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_DeleteProcessRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Tasks_V1_DeleteResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_DeleteResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Tasks_V1_Tasks.Method.DeleteProcess.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Get" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_GetRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_GetRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Tasks_V1_GetResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func get<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_GetRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_GetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Tasks_V1_GetResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_GetResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Tasks_V1_Tasks.Method.Get.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "List" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_ListTasksRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_ListTasksRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Tasks_V1_ListTasksResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func list<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_ListTasksRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_ListTasksRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Tasks_V1_ListTasksResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_ListTasksResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Tasks_V1_Tasks.Method.List.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Kill" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Kill a task or process.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_KillRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_KillRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func kill<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_KillRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_KillRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Tasks_V1_Tasks.Method.Kill.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Exec" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_ExecProcessRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_ExecProcessRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func exec<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_ExecProcessRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_ExecProcessRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Tasks_V1_Tasks.Method.Exec.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ResizePty" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_ResizePtyRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_ResizePtyRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func resizePty<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_ResizePtyRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_ResizePtyRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Tasks_V1_Tasks.Method.ResizePty.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CloseIO" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_CloseIORequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_CloseIORequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func closeIO<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_CloseIORequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_CloseIORequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Tasks_V1_Tasks.Method.CloseIO.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Pause" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_PauseTaskRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_PauseTaskRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func pause<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_PauseTaskRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_PauseTaskRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Tasks_V1_Tasks.Method.Pause.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Resume" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_ResumeTaskRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_ResumeTaskRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func resume<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_ResumeTaskRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_ResumeTaskRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Tasks_V1_Tasks.Method.Resume.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListPids" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_ListPidsRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_ListPidsRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Tasks_V1_ListPidsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listPids<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_ListPidsRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_ListPidsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Tasks_V1_ListPidsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_ListPidsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Tasks_V1_Tasks.Method.ListPids.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Checkpoint" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_CheckpointTaskRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_CheckpointTaskRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Tasks_V1_CheckpointTaskResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func checkpoint<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_CheckpointTaskRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_CheckpointTaskRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Tasks_V1_CheckpointTaskResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_CheckpointTaskResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Tasks_V1_Tasks.Method.Checkpoint.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Update" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_UpdateTaskRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_UpdateTaskRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func update<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_UpdateTaskRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_UpdateTaskRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Tasks_V1_Tasks.Method.Update.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Metrics" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_MetricsRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_MetricsRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Tasks_V1_MetricsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func metrics<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_MetricsRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_MetricsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Tasks_V1_MetricsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_MetricsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Tasks_V1_Tasks.Method.Metrics.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Wait" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Containerd_Services_Tasks_V1_WaitRequest` message.
        ///   - serializer: A serializer for `Containerd_Services_Tasks_V1_WaitRequest` messages.
        ///   - deserializer: A deserializer for `Containerd_Services_Tasks_V1_WaitResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func wait<Result>(
            request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_WaitRequest>,
            serializer: some GRPCCore.MessageSerializer<Containerd_Services_Tasks_V1_WaitRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Containerd_Services_Tasks_V1_WaitResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_WaitResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Containerd_Services_Tasks_V1_Tasks.Method.Wait.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Containerd_Services_Tasks_V1_Tasks.ClientProtocol {
    /// Call the "Create" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create a task.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Tasks_V1_CreateTaskRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func create<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_CreateTaskRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_CreateTaskResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.create(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_CreateTaskRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_CreateTaskResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Start" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Start a process.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Tasks_V1_StartRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func start<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_StartRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_StartResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.start(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_StartRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_StartResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Delete" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete a task and on disk state.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Tasks_V1_DeleteTaskRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func delete<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_DeleteTaskRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_DeleteResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.delete(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_DeleteTaskRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_DeleteResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteProcess" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Tasks_V1_DeleteProcessRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteProcess<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_DeleteProcessRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_DeleteResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteProcess(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_DeleteProcessRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_DeleteResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Get" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Tasks_V1_GetRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func get<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_GetRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_GetResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.get(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_GetRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_GetResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "List" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Tasks_V1_ListTasksRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func list<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_ListTasksRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_ListTasksResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.list(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_ListTasksRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_ListTasksResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Kill" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Kill a task or process.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Tasks_V1_KillRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func kill<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_KillRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.kill(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_KillRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Exec" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Tasks_V1_ExecProcessRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func exec<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_ExecProcessRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.exec(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_ExecProcessRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ResizePty" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Tasks_V1_ResizePtyRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func resizePty<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_ResizePtyRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.resizePty(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_ResizePtyRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CloseIO" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Tasks_V1_CloseIORequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func closeIO<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_CloseIORequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.closeIO(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_CloseIORequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Pause" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Tasks_V1_PauseTaskRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func pause<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_PauseTaskRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.pause(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_PauseTaskRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Resume" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Tasks_V1_ResumeTaskRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func resume<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_ResumeTaskRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.resume(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_ResumeTaskRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListPids" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Tasks_V1_ListPidsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listPids<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_ListPidsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_ListPidsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listPids(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_ListPidsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_ListPidsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Checkpoint" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Tasks_V1_CheckpointTaskRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func checkpoint<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_CheckpointTaskRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_CheckpointTaskResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.checkpoint(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_CheckpointTaskRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_CheckpointTaskResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Update" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Tasks_V1_UpdateTaskRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func update<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_UpdateTaskRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.update(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_UpdateTaskRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Metrics" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Tasks_V1_MetricsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func metrics<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_MetricsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_MetricsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.metrics(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_MetricsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_MetricsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Wait" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Containerd_Services_Tasks_V1_WaitRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func wait<Result>(
        request: GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_WaitRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_WaitResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.wait(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Containerd_Services_Tasks_V1_WaitRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Containerd_Services_Tasks_V1_WaitResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Containerd_Services_Tasks_V1_Tasks.ClientProtocol {
    /// Call the "Create" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Create a task.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func create<Result>(
        _ message: Containerd_Services_Tasks_V1_CreateTaskRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_CreateTaskResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_CreateTaskRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.create(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Start" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Start a process.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func start<Result>(
        _ message: Containerd_Services_Tasks_V1_StartRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_StartResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_StartRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.start(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Delete" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Delete a task and on disk state.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func delete<Result>(
        _ message: Containerd_Services_Tasks_V1_DeleteTaskRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_DeleteResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_DeleteTaskRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.delete(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteProcess" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteProcess<Result>(
        _ message: Containerd_Services_Tasks_V1_DeleteProcessRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_DeleteResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_DeleteProcessRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteProcess(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Get" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func get<Result>(
        _ message: Containerd_Services_Tasks_V1_GetRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_GetResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_GetRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.get(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "List" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func list<Result>(
        _ message: Containerd_Services_Tasks_V1_ListTasksRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_ListTasksResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_ListTasksRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.list(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Kill" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Kill a task or process.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func kill<Result>(
        _ message: Containerd_Services_Tasks_V1_KillRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_KillRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.kill(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Exec" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func exec<Result>(
        _ message: Containerd_Services_Tasks_V1_ExecProcessRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_ExecProcessRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.exec(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ResizePty" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func resizePty<Result>(
        _ message: Containerd_Services_Tasks_V1_ResizePtyRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_ResizePtyRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.resizePty(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CloseIO" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func closeIO<Result>(
        _ message: Containerd_Services_Tasks_V1_CloseIORequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_CloseIORequest>(
            message: message,
            metadata: metadata
        )
        return try await self.closeIO(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Pause" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func pause<Result>(
        _ message: Containerd_Services_Tasks_V1_PauseTaskRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_PauseTaskRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.pause(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Resume" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func resume<Result>(
        _ message: Containerd_Services_Tasks_V1_ResumeTaskRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_ResumeTaskRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.resume(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListPids" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listPids<Result>(
        _ message: Containerd_Services_Tasks_V1_ListPidsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_ListPidsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_ListPidsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listPids(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Checkpoint" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func checkpoint<Result>(
        _ message: Containerd_Services_Tasks_V1_CheckpointTaskRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_CheckpointTaskResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_CheckpointTaskRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.checkpoint(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Update" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func update<Result>(
        _ message: Containerd_Services_Tasks_V1_UpdateTaskRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_UpdateTaskRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.update(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Metrics" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func metrics<Result>(
        _ message: Containerd_Services_Tasks_V1_MetricsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_MetricsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_MetricsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.metrics(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Wait" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func wait<Result>(
        _ message: Containerd_Services_Tasks_V1_WaitRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Containerd_Services_Tasks_V1_WaitResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Containerd_Services_Tasks_V1_WaitRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.wait(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}