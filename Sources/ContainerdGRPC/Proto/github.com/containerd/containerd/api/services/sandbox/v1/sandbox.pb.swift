// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: github.com/containerd/containerd/api/services/sandbox/v1/sandbox.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//
//Copyright The containerd Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Containerd_Services_Sandbox_V1_StoreCreateRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sandbox: Containerd_Types_Sandbox {
    get {return _sandbox ?? Containerd_Types_Sandbox()}
    set {_sandbox = newValue}
  }
  /// Returns true if `sandbox` has been explicitly set.
  public var hasSandbox: Bool {return self._sandbox != nil}
  /// Clears the value of `sandbox`. Subsequent reads from it will return its default value.
  public mutating func clearSandbox() {self._sandbox = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sandbox: Containerd_Types_Sandbox? = nil
}

public struct Containerd_Services_Sandbox_V1_StoreCreateResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sandbox: Containerd_Types_Sandbox {
    get {return _sandbox ?? Containerd_Types_Sandbox()}
    set {_sandbox = newValue}
  }
  /// Returns true if `sandbox` has been explicitly set.
  public var hasSandbox: Bool {return self._sandbox != nil}
  /// Clears the value of `sandbox`. Subsequent reads from it will return its default value.
  public mutating func clearSandbox() {self._sandbox = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sandbox: Containerd_Types_Sandbox? = nil
}

public struct Containerd_Services_Sandbox_V1_StoreUpdateRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sandbox: Containerd_Types_Sandbox {
    get {return _sandbox ?? Containerd_Types_Sandbox()}
    set {_sandbox = newValue}
  }
  /// Returns true if `sandbox` has been explicitly set.
  public var hasSandbox: Bool {return self._sandbox != nil}
  /// Clears the value of `sandbox`. Subsequent reads from it will return its default value.
  public mutating func clearSandbox() {self._sandbox = nil}

  public var fields: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sandbox: Containerd_Types_Sandbox? = nil
}

public struct Containerd_Services_Sandbox_V1_StoreUpdateResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sandbox: Containerd_Types_Sandbox {
    get {return _sandbox ?? Containerd_Types_Sandbox()}
    set {_sandbox = newValue}
  }
  /// Returns true if `sandbox` has been explicitly set.
  public var hasSandbox: Bool {return self._sandbox != nil}
  /// Clears the value of `sandbox`. Subsequent reads from it will return its default value.
  public mutating func clearSandbox() {self._sandbox = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sandbox: Containerd_Types_Sandbox? = nil
}

public struct Containerd_Services_Sandbox_V1_StoreDeleteRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sandboxID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Containerd_Services_Sandbox_V1_StoreDeleteResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Containerd_Services_Sandbox_V1_StoreListRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var filters: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Containerd_Services_Sandbox_V1_StoreListResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var list: [Containerd_Types_Sandbox] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Containerd_Services_Sandbox_V1_StoreGetRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sandboxID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Containerd_Services_Sandbox_V1_StoreGetResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sandbox: Containerd_Types_Sandbox {
    get {return _sandbox ?? Containerd_Types_Sandbox()}
    set {_sandbox = newValue}
  }
  /// Returns true if `sandbox` has been explicitly set.
  public var hasSandbox: Bool {return self._sandbox != nil}
  /// Clears the value of `sandbox`. Subsequent reads from it will return its default value.
  public mutating func clearSandbox() {self._sandbox = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sandbox: Containerd_Types_Sandbox? = nil
}

public struct Containerd_Services_Sandbox_V1_ControllerCreateRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sandboxID: String {
    get {return _storage._sandboxID}
    set {_uniqueStorage()._sandboxID = newValue}
  }

  public var rootfs: [Containerd_Types_Mount] {
    get {return _storage._rootfs}
    set {_uniqueStorage()._rootfs = newValue}
  }

  public var options: SwiftProtobuf.Google_Protobuf_Any {
    get {return _storage._options ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_uniqueStorage()._options = newValue}
  }
  /// Returns true if `options` has been explicitly set.
  public var hasOptions: Bool {return _storage._options != nil}
  /// Clears the value of `options`. Subsequent reads from it will return its default value.
  public mutating func clearOptions() {_uniqueStorage()._options = nil}

  public var netnsPath: String {
    get {return _storage._netnsPath}
    set {_uniqueStorage()._netnsPath = newValue}
  }

  public var annotations: Dictionary<String,String> {
    get {return _storage._annotations}
    set {_uniqueStorage()._annotations = newValue}
  }

  public var sandbox: Containerd_Types_Sandbox {
    get {return _storage._sandbox ?? Containerd_Types_Sandbox()}
    set {_uniqueStorage()._sandbox = newValue}
  }
  /// Returns true if `sandbox` has been explicitly set.
  public var hasSandbox: Bool {return _storage._sandbox != nil}
  /// Clears the value of `sandbox`. Subsequent reads from it will return its default value.
  public mutating func clearSandbox() {_uniqueStorage()._sandbox = nil}

  public var sandboxer: String {
    get {return _storage._sandboxer}
    set {_uniqueStorage()._sandboxer = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Containerd_Services_Sandbox_V1_ControllerCreateResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sandboxID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Containerd_Services_Sandbox_V1_ControllerStartRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sandboxID: String = String()

  public var sandboxer: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Containerd_Services_Sandbox_V1_ControllerStartResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sandboxID: String = String()

  public var pid: UInt32 = 0

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {self._createdAt = nil}

  public var labels: Dictionary<String,String> = [:]

  /// Address of the sandbox for containerd to connect,
  /// for calling Task or other APIs serving in the sandbox.
  /// it is in the form of ttrpc+unix://path/to/uds or grpc+vsock://<vsock cid>:<port>.
  public var address: String = String()

  public var version: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Containerd_Services_Sandbox_V1_ControllerPlatformRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sandboxID: String = String()

  public var sandboxer: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Containerd_Services_Sandbox_V1_ControllerPlatformResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var platform: Containerd_Types_Platform {
    get {return _platform ?? Containerd_Types_Platform()}
    set {_platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  public var hasPlatform: Bool {return self._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  public mutating func clearPlatform() {self._platform = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _platform: Containerd_Types_Platform? = nil
}

public struct Containerd_Services_Sandbox_V1_ControllerStopRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sandboxID: String = String()

  public var timeoutSecs: UInt32 = 0

  public var sandboxer: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Containerd_Services_Sandbox_V1_ControllerStopResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Containerd_Services_Sandbox_V1_ControllerWaitRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sandboxID: String = String()

  public var sandboxer: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Containerd_Services_Sandbox_V1_ControllerWaitResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var exitStatus: UInt32 = 0

  public var exitedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _exitedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_exitedAt = newValue}
  }
  /// Returns true if `exitedAt` has been explicitly set.
  public var hasExitedAt: Bool {return self._exitedAt != nil}
  /// Clears the value of `exitedAt`. Subsequent reads from it will return its default value.
  public mutating func clearExitedAt() {self._exitedAt = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _exitedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Containerd_Services_Sandbox_V1_ControllerStatusRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sandboxID: String = String()

  public var verbose: Bool = false

  public var sandboxer: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Containerd_Services_Sandbox_V1_ControllerStatusResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sandboxID: String = String()

  public var pid: UInt32 = 0

  public var state: String = String()

  public var info: Dictionary<String,String> = [:]

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return self._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {self._createdAt = nil}

  public var exitedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _exitedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_exitedAt = newValue}
  }
  /// Returns true if `exitedAt` has been explicitly set.
  public var hasExitedAt: Bool {return self._exitedAt != nil}
  /// Clears the value of `exitedAt`. Subsequent reads from it will return its default value.
  public mutating func clearExitedAt() {self._exitedAt = nil}

  public var extra: SwiftProtobuf.Google_Protobuf_Any {
    get {return _extra ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_extra = newValue}
  }
  /// Returns true if `extra` has been explicitly set.
  public var hasExtra: Bool {return self._extra != nil}
  /// Clears the value of `extra`. Subsequent reads from it will return its default value.
  public mutating func clearExtra() {self._extra = nil}

  /// Address of the sandbox for containerd to connect,
  /// for calling Task or other APIs serving in the sandbox.
  /// it is in the form of ttrpc+unix://path/to/uds or grpc+vsock://<vsock cid>:<port>.
  public var address: String = String()

  public var version: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _exitedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _extra: SwiftProtobuf.Google_Protobuf_Any? = nil
}

public struct Containerd_Services_Sandbox_V1_ControllerShutdownRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sandboxID: String = String()

  public var sandboxer: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Containerd_Services_Sandbox_V1_ControllerShutdownResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Containerd_Services_Sandbox_V1_ControllerMetricsRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sandboxID: String = String()

  public var sandboxer: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Containerd_Services_Sandbox_V1_ControllerMetricsResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var metrics: Containerd_Types_Metric {
    get {return _metrics ?? Containerd_Types_Metric()}
    set {_metrics = newValue}
  }
  /// Returns true if `metrics` has been explicitly set.
  public var hasMetrics: Bool {return self._metrics != nil}
  /// Clears the value of `metrics`. Subsequent reads from it will return its default value.
  public mutating func clearMetrics() {self._metrics = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _metrics: Containerd_Types_Metric? = nil
}

public struct Containerd_Services_Sandbox_V1_ControllerUpdateRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sandboxID: String = String()

  public var sandboxer: String = String()

  public var sandbox: Containerd_Types_Sandbox {
    get {return _sandbox ?? Containerd_Types_Sandbox()}
    set {_sandbox = newValue}
  }
  /// Returns true if `sandbox` has been explicitly set.
  public var hasSandbox: Bool {return self._sandbox != nil}
  /// Clears the value of `sandbox`. Subsequent reads from it will return its default value.
  public mutating func clearSandbox() {self._sandbox = nil}

  public var fields: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sandbox: Containerd_Types_Sandbox? = nil
}

public struct Containerd_Services_Sandbox_V1_ControllerUpdateResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "containerd.services.sandbox.v1"

extension Containerd_Services_Sandbox_V1_StoreCreateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoreCreateRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}sandbox\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._sandbox) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sandbox {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_StoreCreateRequest, rhs: Containerd_Services_Sandbox_V1_StoreCreateRequest) -> Bool {
    if lhs._sandbox != rhs._sandbox {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_StoreCreateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoreCreateResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}sandbox\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._sandbox) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sandbox {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_StoreCreateResponse, rhs: Containerd_Services_Sandbox_V1_StoreCreateResponse) -> Bool {
    if lhs._sandbox != rhs._sandbox {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_StoreUpdateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoreUpdateRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}sandbox\0\u{1}fields\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._sandbox) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.fields) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sandbox {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.fields.isEmpty {
      try visitor.visitRepeatedStringField(value: self.fields, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_StoreUpdateRequest, rhs: Containerd_Services_Sandbox_V1_StoreUpdateRequest) -> Bool {
    if lhs._sandbox != rhs._sandbox {return false}
    if lhs.fields != rhs.fields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_StoreUpdateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoreUpdateResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}sandbox\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._sandbox) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sandbox {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_StoreUpdateResponse, rhs: Containerd_Services_Sandbox_V1_StoreUpdateResponse) -> Bool {
    if lhs._sandbox != rhs._sandbox {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_StoreDeleteRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoreDeleteRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}sandbox_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sandboxID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sandboxID.isEmpty {
      try visitor.visitSingularStringField(value: self.sandboxID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_StoreDeleteRequest, rhs: Containerd_Services_Sandbox_V1_StoreDeleteRequest) -> Bool {
    if lhs.sandboxID != rhs.sandboxID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_StoreDeleteResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoreDeleteResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_StoreDeleteResponse, rhs: Containerd_Services_Sandbox_V1_StoreDeleteResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_StoreListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoreListRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}filters\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.filters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.filters.isEmpty {
      try visitor.visitRepeatedStringField(value: self.filters, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_StoreListRequest, rhs: Containerd_Services_Sandbox_V1_StoreListRequest) -> Bool {
    if lhs.filters != rhs.filters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_StoreListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoreListResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}list\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.list) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.list.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.list, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_StoreListResponse, rhs: Containerd_Services_Sandbox_V1_StoreListResponse) -> Bool {
    if lhs.list != rhs.list {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_StoreGetRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoreGetRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}sandbox_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sandboxID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sandboxID.isEmpty {
      try visitor.visitSingularStringField(value: self.sandboxID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_StoreGetRequest, rhs: Containerd_Services_Sandbox_V1_StoreGetRequest) -> Bool {
    if lhs.sandboxID != rhs.sandboxID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_StoreGetResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StoreGetResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}sandbox\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._sandbox) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sandbox {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_StoreGetResponse, rhs: Containerd_Services_Sandbox_V1_StoreGetResponse) -> Bool {
    if lhs._sandbox != rhs._sandbox {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_ControllerCreateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ControllerCreateRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}sandbox_id\0\u{1}rootfs\0\u{1}options\0\u{3}netns_path\0\u{1}annotations\0\u{1}sandbox\0\u{2}\u{4}sandboxer\0")

  fileprivate class _StorageClass {
    var _sandboxID: String = String()
    var _rootfs: [Containerd_Types_Mount] = []
    var _options: SwiftProtobuf.Google_Protobuf_Any? = nil
    var _netnsPath: String = String()
    var _annotations: Dictionary<String,String> = [:]
    var _sandbox: Containerd_Types_Sandbox? = nil
    var _sandboxer: String = String()

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _sandboxID = source._sandboxID
      _rootfs = source._rootfs
      _options = source._options
      _netnsPath = source._netnsPath
      _annotations = source._annotations
      _sandbox = source._sandbox
      _sandboxer = source._sandboxer
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._sandboxID) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._rootfs) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._options) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._netnsPath) }()
        case 5: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._annotations) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._sandbox) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._sandboxer) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._sandboxID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sandboxID, fieldNumber: 1)
      }
      if !_storage._rootfs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._rootfs, fieldNumber: 2)
      }
      try { if let v = _storage._options {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if !_storage._netnsPath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._netnsPath, fieldNumber: 4)
      }
      if !_storage._annotations.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._annotations, fieldNumber: 5)
      }
      try { if let v = _storage._sandbox {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      if !_storage._sandboxer.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sandboxer, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_ControllerCreateRequest, rhs: Containerd_Services_Sandbox_V1_ControllerCreateRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._sandboxID != rhs_storage._sandboxID {return false}
        if _storage._rootfs != rhs_storage._rootfs {return false}
        if _storage._options != rhs_storage._options {return false}
        if _storage._netnsPath != rhs_storage._netnsPath {return false}
        if _storage._annotations != rhs_storage._annotations {return false}
        if _storage._sandbox != rhs_storage._sandbox {return false}
        if _storage._sandboxer != rhs_storage._sandboxer {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_ControllerCreateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ControllerCreateResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}sandbox_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sandboxID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sandboxID.isEmpty {
      try visitor.visitSingularStringField(value: self.sandboxID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_ControllerCreateResponse, rhs: Containerd_Services_Sandbox_V1_ControllerCreateResponse) -> Bool {
    if lhs.sandboxID != rhs.sandboxID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_ControllerStartRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ControllerStartRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}sandbox_id\0\u{2}\u{9}sandboxer\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sandboxID) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.sandboxer) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sandboxID.isEmpty {
      try visitor.visitSingularStringField(value: self.sandboxID, fieldNumber: 1)
    }
    if !self.sandboxer.isEmpty {
      try visitor.visitSingularStringField(value: self.sandboxer, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_ControllerStartRequest, rhs: Containerd_Services_Sandbox_V1_ControllerStartRequest) -> Bool {
    if lhs.sandboxID != rhs.sandboxID {return false}
    if lhs.sandboxer != rhs.sandboxer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_ControllerStartResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ControllerStartResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}sandbox_id\0\u{1}pid\0\u{3}created_at\0\u{1}labels\0\u{1}address\0\u{1}version\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sandboxID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.pid) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.version) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.sandboxID.isEmpty {
      try visitor.visitSingularStringField(value: self.sandboxID, fieldNumber: 1)
    }
    if self.pid != 0 {
      try visitor.visitSingularUInt32Field(value: self.pid, fieldNumber: 2)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 4)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 5)
    }
    if self.version != 0 {
      try visitor.visitSingularUInt32Field(value: self.version, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_ControllerStartResponse, rhs: Containerd_Services_Sandbox_V1_ControllerStartResponse) -> Bool {
    if lhs.sandboxID != rhs.sandboxID {return false}
    if lhs.pid != rhs.pid {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs.address != rhs.address {return false}
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_ControllerPlatformRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ControllerPlatformRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}sandbox_id\0\u{2}\u{9}sandboxer\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sandboxID) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.sandboxer) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sandboxID.isEmpty {
      try visitor.visitSingularStringField(value: self.sandboxID, fieldNumber: 1)
    }
    if !self.sandboxer.isEmpty {
      try visitor.visitSingularStringField(value: self.sandboxer, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_ControllerPlatformRequest, rhs: Containerd_Services_Sandbox_V1_ControllerPlatformRequest) -> Bool {
    if lhs.sandboxID != rhs.sandboxID {return false}
    if lhs.sandboxer != rhs.sandboxer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_ControllerPlatformResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ControllerPlatformResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}platform\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._platform) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._platform {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_ControllerPlatformResponse, rhs: Containerd_Services_Sandbox_V1_ControllerPlatformResponse) -> Bool {
    if lhs._platform != rhs._platform {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_ControllerStopRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ControllerStopRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}sandbox_id\0\u{3}timeout_secs\0\u{2}\u{8}sandboxer\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sandboxID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.timeoutSecs) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.sandboxer) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sandboxID.isEmpty {
      try visitor.visitSingularStringField(value: self.sandboxID, fieldNumber: 1)
    }
    if self.timeoutSecs != 0 {
      try visitor.visitSingularUInt32Field(value: self.timeoutSecs, fieldNumber: 2)
    }
    if !self.sandboxer.isEmpty {
      try visitor.visitSingularStringField(value: self.sandboxer, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_ControllerStopRequest, rhs: Containerd_Services_Sandbox_V1_ControllerStopRequest) -> Bool {
    if lhs.sandboxID != rhs.sandboxID {return false}
    if lhs.timeoutSecs != rhs.timeoutSecs {return false}
    if lhs.sandboxer != rhs.sandboxer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_ControllerStopResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ControllerStopResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_ControllerStopResponse, rhs: Containerd_Services_Sandbox_V1_ControllerStopResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_ControllerWaitRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ControllerWaitRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}sandbox_id\0\u{2}\u{9}sandboxer\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sandboxID) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.sandboxer) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sandboxID.isEmpty {
      try visitor.visitSingularStringField(value: self.sandboxID, fieldNumber: 1)
    }
    if !self.sandboxer.isEmpty {
      try visitor.visitSingularStringField(value: self.sandboxer, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_ControllerWaitRequest, rhs: Containerd_Services_Sandbox_V1_ControllerWaitRequest) -> Bool {
    if lhs.sandboxID != rhs.sandboxID {return false}
    if lhs.sandboxer != rhs.sandboxer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_ControllerWaitResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ControllerWaitResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}exit_status\0\u{3}exited_at\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.exitStatus) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._exitedAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.exitStatus != 0 {
      try visitor.visitSingularUInt32Field(value: self.exitStatus, fieldNumber: 1)
    }
    try { if let v = self._exitedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_ControllerWaitResponse, rhs: Containerd_Services_Sandbox_V1_ControllerWaitResponse) -> Bool {
    if lhs.exitStatus != rhs.exitStatus {return false}
    if lhs._exitedAt != rhs._exitedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_ControllerStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ControllerStatusRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}sandbox_id\0\u{1}verbose\0\u{2}\u{8}sandboxer\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sandboxID) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.verbose) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.sandboxer) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sandboxID.isEmpty {
      try visitor.visitSingularStringField(value: self.sandboxID, fieldNumber: 1)
    }
    if self.verbose != false {
      try visitor.visitSingularBoolField(value: self.verbose, fieldNumber: 2)
    }
    if !self.sandboxer.isEmpty {
      try visitor.visitSingularStringField(value: self.sandboxer, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_ControllerStatusRequest, rhs: Containerd_Services_Sandbox_V1_ControllerStatusRequest) -> Bool {
    if lhs.sandboxID != rhs.sandboxID {return false}
    if lhs.verbose != rhs.verbose {return false}
    if lhs.sandboxer != rhs.sandboxer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_ControllerStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ControllerStatusResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}sandbox_id\0\u{1}pid\0\u{1}state\0\u{1}info\0\u{3}created_at\0\u{3}exited_at\0\u{1}extra\0\u{1}address\0\u{1}version\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sandboxID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.pid) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.state) }()
      case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.info) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._exitedAt) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._extra) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self.version) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.sandboxID.isEmpty {
      try visitor.visitSingularStringField(value: self.sandboxID, fieldNumber: 1)
    }
    if self.pid != 0 {
      try visitor.visitSingularUInt32Field(value: self.pid, fieldNumber: 2)
    }
    if !self.state.isEmpty {
      try visitor.visitSingularStringField(value: self.state, fieldNumber: 3)
    }
    if !self.info.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.info, fieldNumber: 4)
    }
    try { if let v = self._createdAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._exitedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._extra {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 8)
    }
    if self.version != 0 {
      try visitor.visitSingularUInt32Field(value: self.version, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_ControllerStatusResponse, rhs: Containerd_Services_Sandbox_V1_ControllerStatusResponse) -> Bool {
    if lhs.sandboxID != rhs.sandboxID {return false}
    if lhs.pid != rhs.pid {return false}
    if lhs.state != rhs.state {return false}
    if lhs.info != rhs.info {return false}
    if lhs._createdAt != rhs._createdAt {return false}
    if lhs._exitedAt != rhs._exitedAt {return false}
    if lhs._extra != rhs._extra {return false}
    if lhs.address != rhs.address {return false}
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_ControllerShutdownRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ControllerShutdownRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}sandbox_id\0\u{2}\u{9}sandboxer\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sandboxID) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.sandboxer) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sandboxID.isEmpty {
      try visitor.visitSingularStringField(value: self.sandboxID, fieldNumber: 1)
    }
    if !self.sandboxer.isEmpty {
      try visitor.visitSingularStringField(value: self.sandboxer, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_ControllerShutdownRequest, rhs: Containerd_Services_Sandbox_V1_ControllerShutdownRequest) -> Bool {
    if lhs.sandboxID != rhs.sandboxID {return false}
    if lhs.sandboxer != rhs.sandboxer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_ControllerShutdownResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ControllerShutdownResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_ControllerShutdownResponse, rhs: Containerd_Services_Sandbox_V1_ControllerShutdownResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_ControllerMetricsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ControllerMetricsRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}sandbox_id\0\u{2}\u{9}sandboxer\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sandboxID) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.sandboxer) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sandboxID.isEmpty {
      try visitor.visitSingularStringField(value: self.sandboxID, fieldNumber: 1)
    }
    if !self.sandboxer.isEmpty {
      try visitor.visitSingularStringField(value: self.sandboxer, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_ControllerMetricsRequest, rhs: Containerd_Services_Sandbox_V1_ControllerMetricsRequest) -> Bool {
    if lhs.sandboxID != rhs.sandboxID {return false}
    if lhs.sandboxer != rhs.sandboxer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_ControllerMetricsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ControllerMetricsResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}metrics\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._metrics) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._metrics {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_ControllerMetricsResponse, rhs: Containerd_Services_Sandbox_V1_ControllerMetricsResponse) -> Bool {
    if lhs._metrics != rhs._metrics {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_ControllerUpdateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ControllerUpdateRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}sandbox_id\0\u{1}sandboxer\0\u{1}sandbox\0\u{1}fields\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sandboxID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sandboxer) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._sandbox) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.fields) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.sandboxID.isEmpty {
      try visitor.visitSingularStringField(value: self.sandboxID, fieldNumber: 1)
    }
    if !self.sandboxer.isEmpty {
      try visitor.visitSingularStringField(value: self.sandboxer, fieldNumber: 2)
    }
    try { if let v = self._sandbox {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.fields.isEmpty {
      try visitor.visitRepeatedStringField(value: self.fields, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_ControllerUpdateRequest, rhs: Containerd_Services_Sandbox_V1_ControllerUpdateRequest) -> Bool {
    if lhs.sandboxID != rhs.sandboxID {return false}
    if lhs.sandboxer != rhs.sandboxer {return false}
    if lhs._sandbox != rhs._sandbox {return false}
    if lhs.fields != rhs.fields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Services_Sandbox_V1_ControllerUpdateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ControllerUpdateResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Services_Sandbox_V1_ControllerUpdateResponse, rhs: Containerd_Services_Sandbox_V1_ControllerUpdateResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
