// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: github.com/containerd/containerd/api/types/transfer/imagestore.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//
//Copyright The containerd Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Containerd_Types_Transfer_ImageStore: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var labels: Dictionary<String,String> = [:]

  public var platforms: [Containerd_Types_Platform] = []

  public var allMetadata: Bool = false

  public var manifestLimit: UInt32 = 0

  /// extra_references are used to set image names on imports of sub-images from the index
  public var extraReferences: [Containerd_Types_Transfer_ImageReference] = []

  public var unpacks: [Containerd_Types_Transfer_UnpackConfiguration] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Containerd_Types_Transfer_UnpackConfiguration: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// platform is the platform to unpack for, used for resolving manifest and snapshotter
  /// if not provided
  public var platform: Containerd_Types_Platform {
    get {return _platform ?? Containerd_Types_Platform()}
    set {_platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  public var hasPlatform: Bool {return self._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  public mutating func clearPlatform() {self._platform = nil}

  /// snapshotter to unpack to, if not provided default for platform shoudl be used
  public var snapshotter: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _platform: Containerd_Types_Platform? = nil
}

/// ImageReference is used to create or find a reference for an image
public struct Containerd_Types_Transfer_ImageReference: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  /// is_prefix determines whether the Name should be considered
  /// a prefix (without tag or digest).
  /// For lookup, this may allow matching multiple tags.
  /// For store, this must have a tag or digest added.
  public var isPrefix: Bool = false

  /// allow_overwrite allows overwriting or ignoring the name if
  /// another reference is provided (such as through an annotation).
  /// Only used if IsPrefix is true.
  public var allowOverwrite: Bool = false

  /// add_digest adds the manifest digest to the reference.
  /// For lookup, this allows matching tags with any digest.
  /// For store, this allows adding the digest to the name.
  /// Only used if IsPrefix is true.
  public var addDigest: Bool = false

  /// skip_named_digest only considers digest references which do not
  /// have a non-digested named reference.
  /// For lookup, this will deduplicate digest references when there is a named match.
  /// For store, this only adds this digest reference when there is no matching full
  /// name reference from the prefix.
  /// Only used if IsPrefix is true.
  public var skipNamedDigest: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "containerd.types.transfer"

extension Containerd_Types_Transfer_ImageStore: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageStore"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}name\0\u{1}labels\0\u{1}platforms\0\u{3}all_metadata\0\u{3}manifest_limit\0\u{3}extra_references\0\u{2}\u{4}unpacks\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.labels) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.platforms) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.allMetadata) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.manifestLimit) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.extraReferences) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.unpacks) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.labels.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.labels, fieldNumber: 2)
    }
    if !self.platforms.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.platforms, fieldNumber: 3)
    }
    if self.allMetadata != false {
      try visitor.visitSingularBoolField(value: self.allMetadata, fieldNumber: 4)
    }
    if self.manifestLimit != 0 {
      try visitor.visitSingularUInt32Field(value: self.manifestLimit, fieldNumber: 5)
    }
    if !self.extraReferences.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.extraReferences, fieldNumber: 6)
    }
    if !self.unpacks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.unpacks, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Types_Transfer_ImageStore, rhs: Containerd_Types_Transfer_ImageStore) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs.platforms != rhs.platforms {return false}
    if lhs.allMetadata != rhs.allMetadata {return false}
    if lhs.manifestLimit != rhs.manifestLimit {return false}
    if lhs.extraReferences != rhs.extraReferences {return false}
    if lhs.unpacks != rhs.unpacks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Types_Transfer_UnpackConfiguration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnpackConfiguration"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}platform\0\u{1}snapshotter\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._platform) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.snapshotter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._platform {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.snapshotter.isEmpty {
      try visitor.visitSingularStringField(value: self.snapshotter, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Types_Transfer_UnpackConfiguration, rhs: Containerd_Types_Transfer_UnpackConfiguration) -> Bool {
    if lhs._platform != rhs._platform {return false}
    if lhs.snapshotter != rhs.snapshotter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Types_Transfer_ImageReference: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageReference"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}name\0\u{3}is_prefix\0\u{3}allow_overwrite\0\u{3}add_digest\0\u{3}skip_named_digest\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isPrefix) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.allowOverwrite) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.addDigest) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.skipNamedDigest) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.isPrefix != false {
      try visitor.visitSingularBoolField(value: self.isPrefix, fieldNumber: 2)
    }
    if self.allowOverwrite != false {
      try visitor.visitSingularBoolField(value: self.allowOverwrite, fieldNumber: 3)
    }
    if self.addDigest != false {
      try visitor.visitSingularBoolField(value: self.addDigest, fieldNumber: 4)
    }
    if self.skipNamedDigest != false {
      try visitor.visitSingularBoolField(value: self.skipNamedDigest, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Types_Transfer_ImageReference, rhs: Containerd_Types_Transfer_ImageReference) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.isPrefix != rhs.isPrefix {return false}
    if lhs.allowOverwrite != rhs.allowOverwrite {return false}
    if lhs.addDigest != rhs.addDigest {return false}
    if lhs.skipNamedDigest != rhs.skipNamedDigest {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
