// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: github.com/containerd/containerd/api/types/transfer/importexport.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//
//Copyright The containerd Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Containerd_Types_Transfer_ImageImportStream: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Stream is used to identify the binary input stream for the import operation.
  /// The stream uses the transfer binary stream protocol with the client as the sender.
  /// The binary data is expected to be a raw tar stream.
  public var stream: String = String()

  public var mediaType: String = String()

  public var forceCompress: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Containerd_Types_Transfer_ImageExportStream: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Stream is used to identify the binary output stream for the export operation.
  /// The stream uses the transfer binary stream protocol with the server as the sender.
  /// The binary data is expected to be a raw tar stream.
  public var stream: String = String()

  public var mediaType: String = String()

  /// The specified platforms
  public var platforms: [Containerd_Types_Platform] = []

  /// Whether to include all platforms
  public var allPlatforms: Bool = false

  /// Skips the creation of the Docker compatible manifest.json file
  public var skipCompatibilityManifest: Bool = false

  /// Excludes non-distributable blobs such as Windows base layers.
  public var skipNonDistributable: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "containerd.types.transfer"

extension Containerd_Types_Transfer_ImageImportStream: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageImportStream"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}stream\0\u{3}media_type\0\u{3}force_compress\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.stream) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.mediaType) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.forceCompress) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.stream.isEmpty {
      try visitor.visitSingularStringField(value: self.stream, fieldNumber: 1)
    }
    if !self.mediaType.isEmpty {
      try visitor.visitSingularStringField(value: self.mediaType, fieldNumber: 2)
    }
    if self.forceCompress != false {
      try visitor.visitSingularBoolField(value: self.forceCompress, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Types_Transfer_ImageImportStream, rhs: Containerd_Types_Transfer_ImageImportStream) -> Bool {
    if lhs.stream != rhs.stream {return false}
    if lhs.mediaType != rhs.mediaType {return false}
    if lhs.forceCompress != rhs.forceCompress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Containerd_Types_Transfer_ImageExportStream: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageExportStream"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}stream\0\u{3}media_type\0\u{1}platforms\0\u{3}all_platforms\0\u{3}skip_compatibility_manifest\0\u{3}skip_non_distributable\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.stream) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.mediaType) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.platforms) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.allPlatforms) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.skipCompatibilityManifest) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.skipNonDistributable) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.stream.isEmpty {
      try visitor.visitSingularStringField(value: self.stream, fieldNumber: 1)
    }
    if !self.mediaType.isEmpty {
      try visitor.visitSingularStringField(value: self.mediaType, fieldNumber: 2)
    }
    if !self.platforms.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.platforms, fieldNumber: 3)
    }
    if self.allPlatforms != false {
      try visitor.visitSingularBoolField(value: self.allPlatforms, fieldNumber: 4)
    }
    if self.skipCompatibilityManifest != false {
      try visitor.visitSingularBoolField(value: self.skipCompatibilityManifest, fieldNumber: 5)
    }
    if self.skipNonDistributable != false {
      try visitor.visitSingularBoolField(value: self.skipNonDistributable, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Containerd_Types_Transfer_ImageExportStream, rhs: Containerd_Types_Transfer_ImageExportStream) -> Bool {
    if lhs.stream != rhs.stream {return false}
    if lhs.mediaType != rhs.mediaType {return false}
    if lhs.platforms != rhs.platforms {return false}
    if lhs.allPlatforms != rhs.allPlatforms {return false}
    if lhs.skipCompatibilityManifest != rhs.skipCompatibilityManifest {return false}
    if lhs.skipNonDistributable != rhs.skipNonDistributable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
