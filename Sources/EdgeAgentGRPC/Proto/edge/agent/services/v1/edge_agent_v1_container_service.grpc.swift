// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: edge/agent/services/v1/edge_agent_v1_container_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - edge.agent.services.v1.EdgeContainerService

/// Namespace containing generated types for the "edge.agent.services.v1.EdgeContainerService" service.
public enum Edge_Agent_Services_V1_EdgeContainerService {
    /// Service descriptor for the "edge.agent.services.v1.EdgeContainerService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "edge.agent.services.v1.EdgeContainerService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "ListLayers" metadata.
        public enum ListLayers {
            /// Request type for "ListLayers".
            public typealias Input = Edge_Agent_Services_V1_ListLayersRequest
            /// Response type for "ListLayers".
            public typealias Output = Edge_Agent_Services_V1_LayerHeader
            /// Descriptor for "ListLayers".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "edge.agent.services.v1.EdgeContainerService"),
                method: "ListLayers"
            )
        }
        /// Namespace for "WriteLayer" metadata.
        public enum WriteLayer {
            /// Request type for "WriteLayer".
            public typealias Input = Edge_Agent_Services_V1_WriteLayerRequest
            /// Response type for "WriteLayer".
            public typealias Output = Edge_Agent_Services_V1_WriteLayerResponse
            /// Descriptor for "WriteLayer".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "edge.agent.services.v1.EdgeContainerService"),
                method: "WriteLayer"
            )
        }
        /// Namespace for "RunContainer" metadata.
        public enum RunContainer {
            /// Request type for "RunContainer".
            public typealias Input = Edge_Agent_Services_V1_RunContainerLayersRequest
            /// Response type for "RunContainer".
            public typealias Output = Edge_Agent_Services_V1_RunContainerLayersResponse
            /// Descriptor for "RunContainer".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "edge.agent.services.v1.EdgeContainerService"),
                method: "RunContainer"
            )
        }
        /// Descriptors for all methods in the "edge.agent.services.v1.EdgeContainerService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            ListLayers.descriptor,
            WriteLayer.descriptor,
            RunContainer.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "edge.agent.services.v1.EdgeContainerService" service.
    public static let edge_agent_services_v1_EdgeContainerService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "edge.agent.services.v1.EdgeContainerService")
}

// MARK: edge.agent.services.v1.EdgeContainerService (server)

extension Edge_Agent_Services_V1_EdgeContainerService {
    /// Streaming variant of the service protocol for the "edge.agent.services.v1.EdgeContainerService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "ListLayers" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Edge_Agent_Services_V1_ListLayersRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Edge_Agent_Services_V1_LayerHeader` messages.
        func listLayers(
            request: GRPCCore.StreamingServerRequest<Edge_Agent_Services_V1_ListLayersRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Edge_Agent_Services_V1_LayerHeader>

        /// Handle the "WriteLayer" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Edge_Agent_Services_V1_WriteLayerRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Edge_Agent_Services_V1_WriteLayerResponse` messages.
        func writeLayer(
            request: GRPCCore.StreamingServerRequest<Edge_Agent_Services_V1_WriteLayerRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Edge_Agent_Services_V1_WriteLayerResponse>

        /// Handle the "RunContainer" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Edge_Agent_Services_V1_RunContainerLayersRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Edge_Agent_Services_V1_RunContainerLayersResponse` messages.
        func runContainer(
            request: GRPCCore.StreamingServerRequest<Edge_Agent_Services_V1_RunContainerLayersRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Edge_Agent_Services_V1_RunContainerLayersResponse>
    }

    /// Service protocol for the "edge.agent.services.v1.EdgeContainerService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    public protocol ServiceProtocol: Edge_Agent_Services_V1_EdgeContainerService.StreamingServiceProtocol {
        /// Handle the "ListLayers" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Edge_Agent_Services_V1_ListLayersRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Edge_Agent_Services_V1_LayerHeader` messages.
        func listLayers(
            request: GRPCCore.ServerRequest<Edge_Agent_Services_V1_ListLayersRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Edge_Agent_Services_V1_LayerHeader>

        /// Handle the "WriteLayer" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Edge_Agent_Services_V1_WriteLayerRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Edge_Agent_Services_V1_WriteLayerResponse` messages.
        func writeLayer(
            request: GRPCCore.StreamingServerRequest<Edge_Agent_Services_V1_WriteLayerRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Edge_Agent_Services_V1_WriteLayerResponse>

        /// Handle the "RunContainer" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Edge_Agent_Services_V1_RunContainerLayersRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Edge_Agent_Services_V1_RunContainerLayersResponse` message.
        func runContainer(
            request: GRPCCore.ServerRequest<Edge_Agent_Services_V1_RunContainerLayersRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Edge_Agent_Services_V1_RunContainerLayersResponse>
    }

    /// Simple service protocol for the "edge.agent.services.v1.EdgeContainerService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    public protocol SimpleServiceProtocol: Edge_Agent_Services_V1_EdgeContainerService.ServiceProtocol {
        /// Handle the "ListLayers" method.
        ///
        /// - Parameters:
        ///   - request: A `Edge_Agent_Services_V1_ListLayersRequest` message.
        ///   - response: A response stream of `Edge_Agent_Services_V1_LayerHeader` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func listLayers(
            request: Edge_Agent_Services_V1_ListLayersRequest,
            response: GRPCCore.RPCWriter<Edge_Agent_Services_V1_LayerHeader>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "WriteLayer" method.
        ///
        /// - Parameters:
        ///   - request: A stream of `Edge_Agent_Services_V1_WriteLayerRequest` messages.
        ///   - response: A response stream of `Edge_Agent_Services_V1_WriteLayerResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func writeLayer(
            request: GRPCCore.RPCAsyncSequence<Edge_Agent_Services_V1_WriteLayerRequest, any Swift.Error>,
            response: GRPCCore.RPCWriter<Edge_Agent_Services_V1_WriteLayerResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "RunContainer" method.
        ///
        /// - Parameters:
        ///   - request: A `Edge_Agent_Services_V1_RunContainerLayersRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Edge_Agent_Services_V1_RunContainerLayersResponse` to respond with.
        func runContainer(
            request: Edge_Agent_Services_V1_RunContainerLayersRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Edge_Agent_Services_V1_RunContainerLayersResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
extension Edge_Agent_Services_V1_EdgeContainerService.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Edge_Agent_Services_V1_EdgeContainerService.Method.ListLayers.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Edge_Agent_Services_V1_ListLayersRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Edge_Agent_Services_V1_LayerHeader>(),
            handler: { request, context in
                try await self.listLayers(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Edge_Agent_Services_V1_EdgeContainerService.Method.WriteLayer.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Edge_Agent_Services_V1_WriteLayerRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Edge_Agent_Services_V1_WriteLayerResponse>(),
            handler: { request, context in
                try await self.writeLayer(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Edge_Agent_Services_V1_EdgeContainerService.Method.RunContainer.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Edge_Agent_Services_V1_RunContainerLayersRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Edge_Agent_Services_V1_RunContainerLayersResponse>(),
            handler: { request, context in
                try await self.runContainer(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension Edge_Agent_Services_V1_EdgeContainerService.ServiceProtocol {
    public func listLayers(
        request: GRPCCore.StreamingServerRequest<Edge_Agent_Services_V1_ListLayersRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Edge_Agent_Services_V1_LayerHeader> {
        let response = try await self.listLayers(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return response
    }

    public func runContainer(
        request: GRPCCore.StreamingServerRequest<Edge_Agent_Services_V1_RunContainerLayersRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Edge_Agent_Services_V1_RunContainerLayersResponse> {
        let response = try await self.runContainer(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension Edge_Agent_Services_V1_EdgeContainerService.SimpleServiceProtocol {
    public func listLayers(
        request: GRPCCore.ServerRequest<Edge_Agent_Services_V1_ListLayersRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Edge_Agent_Services_V1_LayerHeader> {
        return GRPCCore.StreamingServerResponse<Edge_Agent_Services_V1_LayerHeader>(
            metadata: [:],
            producer: { writer in
                try await self.listLayers(
                    request: request.message,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    public func writeLayer(
        request: GRPCCore.StreamingServerRequest<Edge_Agent_Services_V1_WriteLayerRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Edge_Agent_Services_V1_WriteLayerResponse> {
        return GRPCCore.StreamingServerResponse<Edge_Agent_Services_V1_WriteLayerResponse>(
            metadata: [:],
            producer: { writer in
                try await self.writeLayer(
                    request: request.messages,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    public func runContainer(
        request: GRPCCore.ServerRequest<Edge_Agent_Services_V1_RunContainerLayersRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Edge_Agent_Services_V1_RunContainerLayersResponse> {
        return GRPCCore.ServerResponse<Edge_Agent_Services_V1_RunContainerLayersResponse>(
            message: try await self.runContainer(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: edge.agent.services.v1.EdgeContainerService (client)

extension Edge_Agent_Services_V1_EdgeContainerService {
    /// Generated client protocol for the "edge.agent.services.v1.EdgeContainerService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    public protocol ClientProtocol: Sendable {
        /// Call the "ListLayers" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Edge_Agent_Services_V1_ListLayersRequest` message.
        ///   - serializer: A serializer for `Edge_Agent_Services_V1_ListLayersRequest` messages.
        ///   - deserializer: A deserializer for `Edge_Agent_Services_V1_LayerHeader` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listLayers<Result>(
            request: GRPCCore.ClientRequest<Edge_Agent_Services_V1_ListLayersRequest>,
            serializer: some GRPCCore.MessageSerializer<Edge_Agent_Services_V1_ListLayersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Edge_Agent_Services_V1_LayerHeader>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Edge_Agent_Services_V1_LayerHeader>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "WriteLayer" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Edge_Agent_Services_V1_WriteLayerRequest` messages.
        ///   - serializer: A serializer for `Edge_Agent_Services_V1_WriteLayerRequest` messages.
        ///   - deserializer: A deserializer for `Edge_Agent_Services_V1_WriteLayerResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func writeLayer<Result>(
            request: GRPCCore.StreamingClientRequest<Edge_Agent_Services_V1_WriteLayerRequest>,
            serializer: some GRPCCore.MessageSerializer<Edge_Agent_Services_V1_WriteLayerRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Edge_Agent_Services_V1_WriteLayerResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Edge_Agent_Services_V1_WriteLayerResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RunContainer" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Edge_Agent_Services_V1_RunContainerLayersRequest` message.
        ///   - serializer: A serializer for `Edge_Agent_Services_V1_RunContainerLayersRequest` messages.
        ///   - deserializer: A deserializer for `Edge_Agent_Services_V1_RunContainerLayersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func runContainer<Result>(
            request: GRPCCore.ClientRequest<Edge_Agent_Services_V1_RunContainerLayersRequest>,
            serializer: some GRPCCore.MessageSerializer<Edge_Agent_Services_V1_RunContainerLayersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Edge_Agent_Services_V1_RunContainerLayersResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Edge_Agent_Services_V1_RunContainerLayersResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "edge.agent.services.v1.EdgeContainerService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "ListLayers" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Edge_Agent_Services_V1_ListLayersRequest` message.
        ///   - serializer: A serializer for `Edge_Agent_Services_V1_ListLayersRequest` messages.
        ///   - deserializer: A deserializer for `Edge_Agent_Services_V1_LayerHeader` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listLayers<Result>(
            request: GRPCCore.ClientRequest<Edge_Agent_Services_V1_ListLayersRequest>,
            serializer: some GRPCCore.MessageSerializer<Edge_Agent_Services_V1_ListLayersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Edge_Agent_Services_V1_LayerHeader>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Edge_Agent_Services_V1_LayerHeader>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.serverStreaming(
                request: request,
                descriptor: Edge_Agent_Services_V1_EdgeContainerService.Method.ListLayers.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "WriteLayer" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Edge_Agent_Services_V1_WriteLayerRequest` messages.
        ///   - serializer: A serializer for `Edge_Agent_Services_V1_WriteLayerRequest` messages.
        ///   - deserializer: A deserializer for `Edge_Agent_Services_V1_WriteLayerResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func writeLayer<Result>(
            request: GRPCCore.StreamingClientRequest<Edge_Agent_Services_V1_WriteLayerRequest>,
            serializer: some GRPCCore.MessageSerializer<Edge_Agent_Services_V1_WriteLayerRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Edge_Agent_Services_V1_WriteLayerResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Edge_Agent_Services_V1_WriteLayerResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Edge_Agent_Services_V1_EdgeContainerService.Method.WriteLayer.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RunContainer" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Edge_Agent_Services_V1_RunContainerLayersRequest` message.
        ///   - serializer: A serializer for `Edge_Agent_Services_V1_RunContainerLayersRequest` messages.
        ///   - deserializer: A deserializer for `Edge_Agent_Services_V1_RunContainerLayersResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func runContainer<Result>(
            request: GRPCCore.ClientRequest<Edge_Agent_Services_V1_RunContainerLayersRequest>,
            serializer: some GRPCCore.MessageSerializer<Edge_Agent_Services_V1_RunContainerLayersRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Edge_Agent_Services_V1_RunContainerLayersResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Edge_Agent_Services_V1_RunContainerLayersResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Edge_Agent_Services_V1_EdgeContainerService.Method.RunContainer.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Edge_Agent_Services_V1_EdgeContainerService.ClientProtocol {
    /// Call the "ListLayers" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Edge_Agent_Services_V1_ListLayersRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listLayers<Result>(
        request: GRPCCore.ClientRequest<Edge_Agent_Services_V1_ListLayersRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Edge_Agent_Services_V1_LayerHeader>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.listLayers(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Edge_Agent_Services_V1_ListLayersRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Edge_Agent_Services_V1_LayerHeader>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "WriteLayer" method.
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Edge_Agent_Services_V1_WriteLayerRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func writeLayer<Result>(
        request: GRPCCore.StreamingClientRequest<Edge_Agent_Services_V1_WriteLayerRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Edge_Agent_Services_V1_WriteLayerResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.writeLayer(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Edge_Agent_Services_V1_WriteLayerRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Edge_Agent_Services_V1_WriteLayerResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RunContainer" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Edge_Agent_Services_V1_RunContainerLayersRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func runContainer<Result>(
        request: GRPCCore.ClientRequest<Edge_Agent_Services_V1_RunContainerLayersRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Edge_Agent_Services_V1_RunContainerLayersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.runContainer(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Edge_Agent_Services_V1_RunContainerLayersRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Edge_Agent_Services_V1_RunContainerLayersResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Edge_Agent_Services_V1_EdgeContainerService.ClientProtocol {
    /// Call the "ListLayers" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listLayers<Result>(
        _ message: Edge_Agent_Services_V1_ListLayersRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Edge_Agent_Services_V1_LayerHeader>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Edge_Agent_Services_V1_ListLayersRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listLayers(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "WriteLayer" method.
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func writeLayer<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Edge_Agent_Services_V1_WriteLayerRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Edge_Agent_Services_V1_WriteLayerResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Edge_Agent_Services_V1_WriteLayerRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.writeLayer(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RunContainer" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func runContainer<Result>(
        _ message: Edge_Agent_Services_V1_RunContainerLayersRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Edge_Agent_Services_V1_RunContainerLayersResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Edge_Agent_Services_V1_RunContainerLayersRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.runContainer(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}