// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: wendy/agent/services/v1/shared.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum RestartPolicyMode: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// Agent chooses default (unless-stopped for normal runs)
  case `default` // = 0

  /// --restart unless-stopped
  case unlessStopped // = 1

  /// --restart no
  case no // = 2

  /// --restart on-failure:N (see on_failure_max_retries)
  case onFailure // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .default
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .default
    case 1: self = .unlessStopped
    case 2: self = .no
    case 3: self = .onFailure
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .default: return 0
    case .unlessStopped: return 1
    case .no: return 2
    case .onFailure: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [RestartPolicyMode] = [
    .default,
    .unlessStopped,
    .no,
    .onFailure,
  ]

}

public enum AppRunningState: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case stopped // = 0
  case running // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .stopped
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .stopped
    case 1: self = .running
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .stopped: return 0
    case .running: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [AppRunningState] = [
    .stopped,
    .running,
  ]

}

public struct RestartPolicy: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var mode: RestartPolicyMode = .default

  /// Only used when mode==ON_FAILURE
  public var onFailureMaxRetries: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct AppContainer: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var appName: String = String()

  public var appVersion: String = String()

  public var runningState: AppRunningState = .stopped

  public var failureCount: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension RestartPolicyMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0DEFAULT\0\u{1}UNLESS_STOPPED\0\u{1}NO\0\u{1}ON_FAILURE\0")
}

extension AppRunningState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0STOPPED\0\u{1}RUNNING\0")
}

extension RestartPolicy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "RestartPolicy"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}mode\0\u{3}on_failure_max_retries\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.mode) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.onFailureMaxRetries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.mode != .default {
      try visitor.visitSingularEnumField(value: self.mode, fieldNumber: 1)
    }
    if self.onFailureMaxRetries != 0 {
      try visitor.visitSingularInt32Field(value: self.onFailureMaxRetries, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: RestartPolicy, rhs: RestartPolicy) -> Bool {
    if lhs.mode != rhs.mode {return false}
    if lhs.onFailureMaxRetries != rhs.onFailureMaxRetries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AppContainer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "AppContainer"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}app_name\0\u{3}app_version\0\u{3}running_state\0\u{3}failure_count\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.appName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.appVersion) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.runningState) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.failureCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appName.isEmpty {
      try visitor.visitSingularStringField(value: self.appName, fieldNumber: 1)
    }
    if !self.appVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.appVersion, fieldNumber: 2)
    }
    if self.runningState != .stopped {
      try visitor.visitSingularEnumField(value: self.runningState, fieldNumber: 3)
    }
    if self.failureCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.failureCount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: AppContainer, rhs: AppContainer) -> Bool {
    if lhs.appName != rhs.appName {return false}
    if lhs.appVersion != rhs.appVersion {return false}
    if lhs.runningState != rhs.runningState {return false}
    if lhs.failureCount != rhs.failureCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
