// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: wendy/agent/services/v1/wendy_agent_v1_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - wendy.agent.services.v1.WendyAgentService

/// Namespace containing generated types for the "wendy.agent.services.v1.WendyAgentService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public enum Wendy_Agent_Services_V1_WendyAgentService {
    /// Service descriptor for the "wendy.agent.services.v1.WendyAgentService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendy.agent.services.v1.WendyAgentService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "RunContainer" metadata.
        public enum RunContainer {
            /// Request type for "RunContainer".
            public typealias Input = Wendy_Agent_Services_V1_RunContainerRequest
            /// Response type for "RunContainer".
            public typealias Output = Wendy_Agent_Services_V1_RunContainerResponse
            /// Descriptor for "RunContainer".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendy.agent.services.v1.WendyAgentService"),
                method: "RunContainer"
            )
        }
        /// Namespace for "UpdateAgent" metadata.
        public enum UpdateAgent {
            /// Request type for "UpdateAgent".
            public typealias Input = Wendy_Agent_Services_V1_UpdateAgentRequest
            /// Response type for "UpdateAgent".
            public typealias Output = Wendy_Agent_Services_V1_UpdateAgentResponse
            /// Descriptor for "UpdateAgent".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendy.agent.services.v1.WendyAgentService"),
                method: "UpdateAgent"
            )
        }
        /// Namespace for "GetAgentVersion" metadata.
        public enum GetAgentVersion {
            /// Request type for "GetAgentVersion".
            public typealias Input = Wendy_Agent_Services_V1_GetAgentVersionRequest
            /// Response type for "GetAgentVersion".
            public typealias Output = Wendy_Agent_Services_V1_GetAgentVersionResponse
            /// Descriptor for "GetAgentVersion".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendy.agent.services.v1.WendyAgentService"),
                method: "GetAgentVersion"
            )
        }
        /// Namespace for "ListWiFiNetworks" metadata.
        public enum ListWiFiNetworks {
            /// Request type for "ListWiFiNetworks".
            public typealias Input = Wendy_Agent_Services_V1_ListWiFiNetworksRequest
            /// Response type for "ListWiFiNetworks".
            public typealias Output = Wendy_Agent_Services_V1_ListWiFiNetworksResponse
            /// Descriptor for "ListWiFiNetworks".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendy.agent.services.v1.WendyAgentService"),
                method: "ListWiFiNetworks"
            )
        }
        /// Namespace for "ConnectToWiFi" metadata.
        public enum ConnectToWiFi {
            /// Request type for "ConnectToWiFi".
            public typealias Input = Wendy_Agent_Services_V1_ConnectToWiFiRequest
            /// Response type for "ConnectToWiFi".
            public typealias Output = Wendy_Agent_Services_V1_ConnectToWiFiResponse
            /// Descriptor for "ConnectToWiFi".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendy.agent.services.v1.WendyAgentService"),
                method: "ConnectToWiFi"
            )
        }
        /// Namespace for "GetWiFiStatus" metadata.
        public enum GetWiFiStatus {
            /// Request type for "GetWiFiStatus".
            public typealias Input = Wendy_Agent_Services_V1_GetWiFiStatusRequest
            /// Response type for "GetWiFiStatus".
            public typealias Output = Wendy_Agent_Services_V1_GetWiFiStatusResponse
            /// Descriptor for "GetWiFiStatus".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendy.agent.services.v1.WendyAgentService"),
                method: "GetWiFiStatus"
            )
        }
        /// Namespace for "DisconnectWiFi" metadata.
        public enum DisconnectWiFi {
            /// Request type for "DisconnectWiFi".
            public typealias Input = Wendy_Agent_Services_V1_DisconnectWiFiRequest
            /// Response type for "DisconnectWiFi".
            public typealias Output = Wendy_Agent_Services_V1_DisconnectWiFiResponse
            /// Descriptor for "DisconnectWiFi".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendy.agent.services.v1.WendyAgentService"),
                method: "DisconnectWiFi"
            )
        }
        /// Namespace for "ListHardwareCapabilities" metadata.
        public enum ListHardwareCapabilities {
            /// Request type for "ListHardwareCapabilities".
            public typealias Input = Wendy_Agent_Services_V1_ListHardwareCapabilitiesRequest
            /// Response type for "ListHardwareCapabilities".
            public typealias Output = Wendy_Agent_Services_V1_ListHardwareCapabilitiesResponse
            /// Descriptor for "ListHardwareCapabilities".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendy.agent.services.v1.WendyAgentService"),
                method: "ListHardwareCapabilities"
            )
        }
        /// Descriptors for all methods in the "wendy.agent.services.v1.WendyAgentService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            RunContainer.descriptor,
            UpdateAgent.descriptor,
            GetAgentVersion.descriptor,
            ListWiFiNetworks.descriptor,
            ConnectToWiFi.descriptor,
            GetWiFiStatus.descriptor,
            DisconnectWiFi.descriptor,
            ListHardwareCapabilities.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "wendy.agent.services.v1.WendyAgentService" service.
    public static let wendy_agent_services_v1_WendyAgentService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "wendy.agent.services.v1.WendyAgentService")
}

// MARK: wendy.agent.services.v1.WendyAgentService (server)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendy_Agent_Services_V1_WendyAgentService {
    /// Streaming variant of the service protocol for the "wendy.agent.services.v1.WendyAgentService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "RunContainer" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Upload a container image to the agent, and run it.
        /// > The first message in the stream MUST be the header.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendy_Agent_Services_V1_RunContainerRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendy_Agent_Services_V1_RunContainerResponse` messages.
        func runContainer(
            request: GRPCCore.StreamingServerRequest<Wendy_Agent_Services_V1_RunContainerRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendy_Agent_Services_V1_RunContainerResponse>

        /// Handle the "UpdateAgent" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendy_Agent_Services_V1_UpdateAgentRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendy_Agent_Services_V1_UpdateAgentResponse` messages.
        func updateAgent(
            request: GRPCCore.StreamingServerRequest<Wendy_Agent_Services_V1_UpdateAgentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendy_Agent_Services_V1_UpdateAgentResponse>

        /// Handle the "GetAgentVersion" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendy_Agent_Services_V1_GetAgentVersionRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendy_Agent_Services_V1_GetAgentVersionResponse` messages.
        func getAgentVersion(
            request: GRPCCore.StreamingServerRequest<Wendy_Agent_Services_V1_GetAgentVersionRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendy_Agent_Services_V1_GetAgentVersionResponse>

        /// Handle the "ListWiFiNetworks" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List available WiFi networks
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendy_Agent_Services_V1_ListWiFiNetworksRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendy_Agent_Services_V1_ListWiFiNetworksResponse` messages.
        func listWiFiNetworks(
            request: GRPCCore.StreamingServerRequest<Wendy_Agent_Services_V1_ListWiFiNetworksRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendy_Agent_Services_V1_ListWiFiNetworksResponse>

        /// Handle the "ConnectToWiFi" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Connect to a specific WiFi network
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendy_Agent_Services_V1_ConnectToWiFiRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendy_Agent_Services_V1_ConnectToWiFiResponse` messages.
        func connectToWiFi(
            request: GRPCCore.StreamingServerRequest<Wendy_Agent_Services_V1_ConnectToWiFiRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendy_Agent_Services_V1_ConnectToWiFiResponse>

        /// Handle the "GetWiFiStatus" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get the current WiFi connection status
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendy_Agent_Services_V1_GetWiFiStatusRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendy_Agent_Services_V1_GetWiFiStatusResponse` messages.
        func getWiFiStatus(
            request: GRPCCore.StreamingServerRequest<Wendy_Agent_Services_V1_GetWiFiStatusRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendy_Agent_Services_V1_GetWiFiStatusResponse>

        /// Handle the "DisconnectWiFi" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Disconnect from the current WiFi network
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendy_Agent_Services_V1_DisconnectWiFiRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendy_Agent_Services_V1_DisconnectWiFiResponse` messages.
        func disconnectWiFi(
            request: GRPCCore.StreamingServerRequest<Wendy_Agent_Services_V1_DisconnectWiFiRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendy_Agent_Services_V1_DisconnectWiFiResponse>

        /// Handle the "ListHardwareCapabilities" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List available hardware capabilities on the device
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendy_Agent_Services_V1_ListHardwareCapabilitiesRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendy_Agent_Services_V1_ListHardwareCapabilitiesResponse` messages.
        func listHardwareCapabilities(
            request: GRPCCore.StreamingServerRequest<Wendy_Agent_Services_V1_ListHardwareCapabilitiesRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendy_Agent_Services_V1_ListHardwareCapabilitiesResponse>
    }

    /// Service protocol for the "wendy.agent.services.v1.WendyAgentService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    public protocol ServiceProtocol: Wendy_Agent_Services_V1_WendyAgentService.StreamingServiceProtocol {
        /// Handle the "RunContainer" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Upload a container image to the agent, and run it.
        /// > The first message in the stream MUST be the header.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendy_Agent_Services_V1_RunContainerRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendy_Agent_Services_V1_RunContainerResponse` messages.
        func runContainer(
            request: GRPCCore.StreamingServerRequest<Wendy_Agent_Services_V1_RunContainerRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendy_Agent_Services_V1_RunContainerResponse>

        /// Handle the "UpdateAgent" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Wendy_Agent_Services_V1_UpdateAgentRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Wendy_Agent_Services_V1_UpdateAgentResponse` messages.
        func updateAgent(
            request: GRPCCore.StreamingServerRequest<Wendy_Agent_Services_V1_UpdateAgentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Wendy_Agent_Services_V1_UpdateAgentResponse>

        /// Handle the "GetAgentVersion" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendy_Agent_Services_V1_GetAgentVersionRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendy_Agent_Services_V1_GetAgentVersionResponse` message.
        func getAgentVersion(
            request: GRPCCore.ServerRequest<Wendy_Agent_Services_V1_GetAgentVersionRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendy_Agent_Services_V1_GetAgentVersionResponse>

        /// Handle the "ListWiFiNetworks" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List available WiFi networks
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendy_Agent_Services_V1_ListWiFiNetworksRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendy_Agent_Services_V1_ListWiFiNetworksResponse` message.
        func listWiFiNetworks(
            request: GRPCCore.ServerRequest<Wendy_Agent_Services_V1_ListWiFiNetworksRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendy_Agent_Services_V1_ListWiFiNetworksResponse>

        /// Handle the "ConnectToWiFi" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Connect to a specific WiFi network
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendy_Agent_Services_V1_ConnectToWiFiRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendy_Agent_Services_V1_ConnectToWiFiResponse` message.
        func connectToWiFi(
            request: GRPCCore.ServerRequest<Wendy_Agent_Services_V1_ConnectToWiFiRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendy_Agent_Services_V1_ConnectToWiFiResponse>

        /// Handle the "GetWiFiStatus" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get the current WiFi connection status
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendy_Agent_Services_V1_GetWiFiStatusRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendy_Agent_Services_V1_GetWiFiStatusResponse` message.
        func getWiFiStatus(
            request: GRPCCore.ServerRequest<Wendy_Agent_Services_V1_GetWiFiStatusRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendy_Agent_Services_V1_GetWiFiStatusResponse>

        /// Handle the "DisconnectWiFi" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Disconnect from the current WiFi network
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendy_Agent_Services_V1_DisconnectWiFiRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendy_Agent_Services_V1_DisconnectWiFiResponse` message.
        func disconnectWiFi(
            request: GRPCCore.ServerRequest<Wendy_Agent_Services_V1_DisconnectWiFiRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendy_Agent_Services_V1_DisconnectWiFiResponse>

        /// Handle the "ListHardwareCapabilities" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List available hardware capabilities on the device
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendy_Agent_Services_V1_ListHardwareCapabilitiesRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Wendy_Agent_Services_V1_ListHardwareCapabilitiesResponse` message.
        func listHardwareCapabilities(
            request: GRPCCore.ServerRequest<Wendy_Agent_Services_V1_ListHardwareCapabilitiesRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Wendy_Agent_Services_V1_ListHardwareCapabilitiesResponse>
    }

    /// Simple service protocol for the "wendy.agent.services.v1.WendyAgentService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    public protocol SimpleServiceProtocol: Wendy_Agent_Services_V1_WendyAgentService.ServiceProtocol {
        /// Handle the "RunContainer" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Upload a container image to the agent, and run it.
        /// > The first message in the stream MUST be the header.
        ///
        /// - Parameters:
        ///   - request: A stream of `Wendy_Agent_Services_V1_RunContainerRequest` messages.
        ///   - response: A response stream of `Wendy_Agent_Services_V1_RunContainerResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func runContainer(
            request: GRPCCore.RPCAsyncSequence<Wendy_Agent_Services_V1_RunContainerRequest, any Swift.Error>,
            response: GRPCCore.RPCWriter<Wendy_Agent_Services_V1_RunContainerResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "UpdateAgent" method.
        ///
        /// - Parameters:
        ///   - request: A stream of `Wendy_Agent_Services_V1_UpdateAgentRequest` messages.
        ///   - response: A response stream of `Wendy_Agent_Services_V1_UpdateAgentResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func updateAgent(
            request: GRPCCore.RPCAsyncSequence<Wendy_Agent_Services_V1_UpdateAgentRequest, any Swift.Error>,
            response: GRPCCore.RPCWriter<Wendy_Agent_Services_V1_UpdateAgentResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "GetAgentVersion" method.
        ///
        /// - Parameters:
        ///   - request: A `Wendy_Agent_Services_V1_GetAgentVersionRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendy_Agent_Services_V1_GetAgentVersionResponse` to respond with.
        func getAgentVersion(
            request: Wendy_Agent_Services_V1_GetAgentVersionRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendy_Agent_Services_V1_GetAgentVersionResponse

        /// Handle the "ListWiFiNetworks" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List available WiFi networks
        ///
        /// - Parameters:
        ///   - request: A `Wendy_Agent_Services_V1_ListWiFiNetworksRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendy_Agent_Services_V1_ListWiFiNetworksResponse` to respond with.
        func listWiFiNetworks(
            request: Wendy_Agent_Services_V1_ListWiFiNetworksRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendy_Agent_Services_V1_ListWiFiNetworksResponse

        /// Handle the "ConnectToWiFi" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Connect to a specific WiFi network
        ///
        /// - Parameters:
        ///   - request: A `Wendy_Agent_Services_V1_ConnectToWiFiRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendy_Agent_Services_V1_ConnectToWiFiResponse` to respond with.
        func connectToWiFi(
            request: Wendy_Agent_Services_V1_ConnectToWiFiRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendy_Agent_Services_V1_ConnectToWiFiResponse

        /// Handle the "GetWiFiStatus" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get the current WiFi connection status
        ///
        /// - Parameters:
        ///   - request: A `Wendy_Agent_Services_V1_GetWiFiStatusRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendy_Agent_Services_V1_GetWiFiStatusResponse` to respond with.
        func getWiFiStatus(
            request: Wendy_Agent_Services_V1_GetWiFiStatusRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendy_Agent_Services_V1_GetWiFiStatusResponse

        /// Handle the "DisconnectWiFi" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Disconnect from the current WiFi network
        ///
        /// - Parameters:
        ///   - request: A `Wendy_Agent_Services_V1_DisconnectWiFiRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendy_Agent_Services_V1_DisconnectWiFiResponse` to respond with.
        func disconnectWiFi(
            request: Wendy_Agent_Services_V1_DisconnectWiFiRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendy_Agent_Services_V1_DisconnectWiFiResponse

        /// Handle the "ListHardwareCapabilities" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List available hardware capabilities on the device
        ///
        /// - Parameters:
        ///   - request: A `Wendy_Agent_Services_V1_ListHardwareCapabilitiesRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Wendy_Agent_Services_V1_ListHardwareCapabilitiesResponse` to respond with.
        func listHardwareCapabilities(
            request: Wendy_Agent_Services_V1_ListHardwareCapabilitiesRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Wendy_Agent_Services_V1_ListHardwareCapabilitiesResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendy_Agent_Services_V1_WendyAgentService.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Wendy_Agent_Services_V1_WendyAgentService.Method.RunContainer.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendy_Agent_Services_V1_RunContainerRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendy_Agent_Services_V1_RunContainerResponse>(),
            handler: { request, context in
                try await self.runContainer(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendy_Agent_Services_V1_WendyAgentService.Method.UpdateAgent.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendy_Agent_Services_V1_UpdateAgentRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendy_Agent_Services_V1_UpdateAgentResponse>(),
            handler: { request, context in
                try await self.updateAgent(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendy_Agent_Services_V1_WendyAgentService.Method.GetAgentVersion.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendy_Agent_Services_V1_GetAgentVersionRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendy_Agent_Services_V1_GetAgentVersionResponse>(),
            handler: { request, context in
                try await self.getAgentVersion(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendy_Agent_Services_V1_WendyAgentService.Method.ListWiFiNetworks.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendy_Agent_Services_V1_ListWiFiNetworksRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendy_Agent_Services_V1_ListWiFiNetworksResponse>(),
            handler: { request, context in
                try await self.listWiFiNetworks(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendy_Agent_Services_V1_WendyAgentService.Method.ConnectToWiFi.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendy_Agent_Services_V1_ConnectToWiFiRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendy_Agent_Services_V1_ConnectToWiFiResponse>(),
            handler: { request, context in
                try await self.connectToWiFi(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendy_Agent_Services_V1_WendyAgentService.Method.GetWiFiStatus.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendy_Agent_Services_V1_GetWiFiStatusRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendy_Agent_Services_V1_GetWiFiStatusResponse>(),
            handler: { request, context in
                try await self.getWiFiStatus(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendy_Agent_Services_V1_WendyAgentService.Method.DisconnectWiFi.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendy_Agent_Services_V1_DisconnectWiFiRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendy_Agent_Services_V1_DisconnectWiFiResponse>(),
            handler: { request, context in
                try await self.disconnectWiFi(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Wendy_Agent_Services_V1_WendyAgentService.Method.ListHardwareCapabilities.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendy_Agent_Services_V1_ListHardwareCapabilitiesRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Wendy_Agent_Services_V1_ListHardwareCapabilitiesResponse>(),
            handler: { request, context in
                try await self.listHardwareCapabilities(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendy_Agent_Services_V1_WendyAgentService.ServiceProtocol {
    public func getAgentVersion(
        request: GRPCCore.StreamingServerRequest<Wendy_Agent_Services_V1_GetAgentVersionRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendy_Agent_Services_V1_GetAgentVersionResponse> {
        let response = try await self.getAgentVersion(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func listWiFiNetworks(
        request: GRPCCore.StreamingServerRequest<Wendy_Agent_Services_V1_ListWiFiNetworksRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendy_Agent_Services_V1_ListWiFiNetworksResponse> {
        let response = try await self.listWiFiNetworks(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func connectToWiFi(
        request: GRPCCore.StreamingServerRequest<Wendy_Agent_Services_V1_ConnectToWiFiRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendy_Agent_Services_V1_ConnectToWiFiResponse> {
        let response = try await self.connectToWiFi(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getWiFiStatus(
        request: GRPCCore.StreamingServerRequest<Wendy_Agent_Services_V1_GetWiFiStatusRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendy_Agent_Services_V1_GetWiFiStatusResponse> {
        let response = try await self.getWiFiStatus(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func disconnectWiFi(
        request: GRPCCore.StreamingServerRequest<Wendy_Agent_Services_V1_DisconnectWiFiRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendy_Agent_Services_V1_DisconnectWiFiResponse> {
        let response = try await self.disconnectWiFi(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func listHardwareCapabilities(
        request: GRPCCore.StreamingServerRequest<Wendy_Agent_Services_V1_ListHardwareCapabilitiesRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendy_Agent_Services_V1_ListHardwareCapabilitiesResponse> {
        let response = try await self.listHardwareCapabilities(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendy_Agent_Services_V1_WendyAgentService.SimpleServiceProtocol {
    public func runContainer(
        request: GRPCCore.StreamingServerRequest<Wendy_Agent_Services_V1_RunContainerRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendy_Agent_Services_V1_RunContainerResponse> {
        return GRPCCore.StreamingServerResponse<Wendy_Agent_Services_V1_RunContainerResponse>(
            metadata: [:],
            producer: { writer in
                try await self.runContainer(
                    request: request.messages,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    public func updateAgent(
        request: GRPCCore.StreamingServerRequest<Wendy_Agent_Services_V1_UpdateAgentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Wendy_Agent_Services_V1_UpdateAgentResponse> {
        return GRPCCore.StreamingServerResponse<Wendy_Agent_Services_V1_UpdateAgentResponse>(
            metadata: [:],
            producer: { writer in
                try await self.updateAgent(
                    request: request.messages,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    public func getAgentVersion(
        request: GRPCCore.ServerRequest<Wendy_Agent_Services_V1_GetAgentVersionRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendy_Agent_Services_V1_GetAgentVersionResponse> {
        return GRPCCore.ServerResponse<Wendy_Agent_Services_V1_GetAgentVersionResponse>(
            message: try await self.getAgentVersion(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func listWiFiNetworks(
        request: GRPCCore.ServerRequest<Wendy_Agent_Services_V1_ListWiFiNetworksRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendy_Agent_Services_V1_ListWiFiNetworksResponse> {
        return GRPCCore.ServerResponse<Wendy_Agent_Services_V1_ListWiFiNetworksResponse>(
            message: try await self.listWiFiNetworks(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func connectToWiFi(
        request: GRPCCore.ServerRequest<Wendy_Agent_Services_V1_ConnectToWiFiRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendy_Agent_Services_V1_ConnectToWiFiResponse> {
        return GRPCCore.ServerResponse<Wendy_Agent_Services_V1_ConnectToWiFiResponse>(
            message: try await self.connectToWiFi(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getWiFiStatus(
        request: GRPCCore.ServerRequest<Wendy_Agent_Services_V1_GetWiFiStatusRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendy_Agent_Services_V1_GetWiFiStatusResponse> {
        return GRPCCore.ServerResponse<Wendy_Agent_Services_V1_GetWiFiStatusResponse>(
            message: try await self.getWiFiStatus(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func disconnectWiFi(
        request: GRPCCore.ServerRequest<Wendy_Agent_Services_V1_DisconnectWiFiRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendy_Agent_Services_V1_DisconnectWiFiResponse> {
        return GRPCCore.ServerResponse<Wendy_Agent_Services_V1_DisconnectWiFiResponse>(
            message: try await self.disconnectWiFi(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func listHardwareCapabilities(
        request: GRPCCore.ServerRequest<Wendy_Agent_Services_V1_ListHardwareCapabilitiesRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Wendy_Agent_Services_V1_ListHardwareCapabilitiesResponse> {
        return GRPCCore.ServerResponse<Wendy_Agent_Services_V1_ListHardwareCapabilitiesResponse>(
            message: try await self.listHardwareCapabilities(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: wendy.agent.services.v1.WendyAgentService (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendy_Agent_Services_V1_WendyAgentService {
    /// Generated client protocol for the "wendy.agent.services.v1.WendyAgentService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    public protocol ClientProtocol: Sendable {
        /// Call the "RunContainer" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Upload a container image to the agent, and run it.
        /// > The first message in the stream MUST be the header.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Wendy_Agent_Services_V1_RunContainerRequest` messages.
        ///   - serializer: A serializer for `Wendy_Agent_Services_V1_RunContainerRequest` messages.
        ///   - deserializer: A deserializer for `Wendy_Agent_Services_V1_RunContainerResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func runContainer<Result>(
            request: GRPCCore.StreamingClientRequest<Wendy_Agent_Services_V1_RunContainerRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendy_Agent_Services_V1_RunContainerRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendy_Agent_Services_V1_RunContainerResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Wendy_Agent_Services_V1_RunContainerResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateAgent" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Wendy_Agent_Services_V1_UpdateAgentRequest` messages.
        ///   - serializer: A serializer for `Wendy_Agent_Services_V1_UpdateAgentRequest` messages.
        ///   - deserializer: A deserializer for `Wendy_Agent_Services_V1_UpdateAgentResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateAgent<Result>(
            request: GRPCCore.StreamingClientRequest<Wendy_Agent_Services_V1_UpdateAgentRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendy_Agent_Services_V1_UpdateAgentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendy_Agent_Services_V1_UpdateAgentResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Wendy_Agent_Services_V1_UpdateAgentResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetAgentVersion" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendy_Agent_Services_V1_GetAgentVersionRequest` message.
        ///   - serializer: A serializer for `Wendy_Agent_Services_V1_GetAgentVersionRequest` messages.
        ///   - deserializer: A deserializer for `Wendy_Agent_Services_V1_GetAgentVersionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getAgentVersion<Result>(
            request: GRPCCore.ClientRequest<Wendy_Agent_Services_V1_GetAgentVersionRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendy_Agent_Services_V1_GetAgentVersionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendy_Agent_Services_V1_GetAgentVersionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendy_Agent_Services_V1_GetAgentVersionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListWiFiNetworks" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List available WiFi networks
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendy_Agent_Services_V1_ListWiFiNetworksRequest` message.
        ///   - serializer: A serializer for `Wendy_Agent_Services_V1_ListWiFiNetworksRequest` messages.
        ///   - deserializer: A deserializer for `Wendy_Agent_Services_V1_ListWiFiNetworksResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listWiFiNetworks<Result>(
            request: GRPCCore.ClientRequest<Wendy_Agent_Services_V1_ListWiFiNetworksRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendy_Agent_Services_V1_ListWiFiNetworksRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendy_Agent_Services_V1_ListWiFiNetworksResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendy_Agent_Services_V1_ListWiFiNetworksResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ConnectToWiFi" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Connect to a specific WiFi network
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendy_Agent_Services_V1_ConnectToWiFiRequest` message.
        ///   - serializer: A serializer for `Wendy_Agent_Services_V1_ConnectToWiFiRequest` messages.
        ///   - deserializer: A deserializer for `Wendy_Agent_Services_V1_ConnectToWiFiResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func connectToWiFi<Result>(
            request: GRPCCore.ClientRequest<Wendy_Agent_Services_V1_ConnectToWiFiRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendy_Agent_Services_V1_ConnectToWiFiRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendy_Agent_Services_V1_ConnectToWiFiResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendy_Agent_Services_V1_ConnectToWiFiResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetWiFiStatus" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get the current WiFi connection status
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendy_Agent_Services_V1_GetWiFiStatusRequest` message.
        ///   - serializer: A serializer for `Wendy_Agent_Services_V1_GetWiFiStatusRequest` messages.
        ///   - deserializer: A deserializer for `Wendy_Agent_Services_V1_GetWiFiStatusResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getWiFiStatus<Result>(
            request: GRPCCore.ClientRequest<Wendy_Agent_Services_V1_GetWiFiStatusRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendy_Agent_Services_V1_GetWiFiStatusRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendy_Agent_Services_V1_GetWiFiStatusResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendy_Agent_Services_V1_GetWiFiStatusResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DisconnectWiFi" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Disconnect from the current WiFi network
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendy_Agent_Services_V1_DisconnectWiFiRequest` message.
        ///   - serializer: A serializer for `Wendy_Agent_Services_V1_DisconnectWiFiRequest` messages.
        ///   - deserializer: A deserializer for `Wendy_Agent_Services_V1_DisconnectWiFiResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func disconnectWiFi<Result>(
            request: GRPCCore.ClientRequest<Wendy_Agent_Services_V1_DisconnectWiFiRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendy_Agent_Services_V1_DisconnectWiFiRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendy_Agent_Services_V1_DisconnectWiFiResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendy_Agent_Services_V1_DisconnectWiFiResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListHardwareCapabilities" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List available hardware capabilities on the device
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendy_Agent_Services_V1_ListHardwareCapabilitiesRequest` message.
        ///   - serializer: A serializer for `Wendy_Agent_Services_V1_ListHardwareCapabilitiesRequest` messages.
        ///   - deserializer: A deserializer for `Wendy_Agent_Services_V1_ListHardwareCapabilitiesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listHardwareCapabilities<Result>(
            request: GRPCCore.ClientRequest<Wendy_Agent_Services_V1_ListHardwareCapabilitiesRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendy_Agent_Services_V1_ListHardwareCapabilitiesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendy_Agent_Services_V1_ListHardwareCapabilitiesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendy_Agent_Services_V1_ListHardwareCapabilitiesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "wendy.agent.services.v1.WendyAgentService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "RunContainer" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Upload a container image to the agent, and run it.
        /// > The first message in the stream MUST be the header.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Wendy_Agent_Services_V1_RunContainerRequest` messages.
        ///   - serializer: A serializer for `Wendy_Agent_Services_V1_RunContainerRequest` messages.
        ///   - deserializer: A deserializer for `Wendy_Agent_Services_V1_RunContainerResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func runContainer<Result>(
            request: GRPCCore.StreamingClientRequest<Wendy_Agent_Services_V1_RunContainerRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendy_Agent_Services_V1_RunContainerRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendy_Agent_Services_V1_RunContainerResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Wendy_Agent_Services_V1_RunContainerResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Wendy_Agent_Services_V1_WendyAgentService.Method.RunContainer.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateAgent" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Wendy_Agent_Services_V1_UpdateAgentRequest` messages.
        ///   - serializer: A serializer for `Wendy_Agent_Services_V1_UpdateAgentRequest` messages.
        ///   - deserializer: A deserializer for `Wendy_Agent_Services_V1_UpdateAgentResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateAgent<Result>(
            request: GRPCCore.StreamingClientRequest<Wendy_Agent_Services_V1_UpdateAgentRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendy_Agent_Services_V1_UpdateAgentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendy_Agent_Services_V1_UpdateAgentResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Wendy_Agent_Services_V1_UpdateAgentResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Wendy_Agent_Services_V1_WendyAgentService.Method.UpdateAgent.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetAgentVersion" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendy_Agent_Services_V1_GetAgentVersionRequest` message.
        ///   - serializer: A serializer for `Wendy_Agent_Services_V1_GetAgentVersionRequest` messages.
        ///   - deserializer: A deserializer for `Wendy_Agent_Services_V1_GetAgentVersionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getAgentVersion<Result>(
            request: GRPCCore.ClientRequest<Wendy_Agent_Services_V1_GetAgentVersionRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendy_Agent_Services_V1_GetAgentVersionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendy_Agent_Services_V1_GetAgentVersionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendy_Agent_Services_V1_GetAgentVersionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendy_Agent_Services_V1_WendyAgentService.Method.GetAgentVersion.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListWiFiNetworks" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List available WiFi networks
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendy_Agent_Services_V1_ListWiFiNetworksRequest` message.
        ///   - serializer: A serializer for `Wendy_Agent_Services_V1_ListWiFiNetworksRequest` messages.
        ///   - deserializer: A deserializer for `Wendy_Agent_Services_V1_ListWiFiNetworksResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listWiFiNetworks<Result>(
            request: GRPCCore.ClientRequest<Wendy_Agent_Services_V1_ListWiFiNetworksRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendy_Agent_Services_V1_ListWiFiNetworksRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendy_Agent_Services_V1_ListWiFiNetworksResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendy_Agent_Services_V1_ListWiFiNetworksResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendy_Agent_Services_V1_WendyAgentService.Method.ListWiFiNetworks.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ConnectToWiFi" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Connect to a specific WiFi network
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendy_Agent_Services_V1_ConnectToWiFiRequest` message.
        ///   - serializer: A serializer for `Wendy_Agent_Services_V1_ConnectToWiFiRequest` messages.
        ///   - deserializer: A deserializer for `Wendy_Agent_Services_V1_ConnectToWiFiResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func connectToWiFi<Result>(
            request: GRPCCore.ClientRequest<Wendy_Agent_Services_V1_ConnectToWiFiRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendy_Agent_Services_V1_ConnectToWiFiRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendy_Agent_Services_V1_ConnectToWiFiResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendy_Agent_Services_V1_ConnectToWiFiResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendy_Agent_Services_V1_WendyAgentService.Method.ConnectToWiFi.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetWiFiStatus" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get the current WiFi connection status
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendy_Agent_Services_V1_GetWiFiStatusRequest` message.
        ///   - serializer: A serializer for `Wendy_Agent_Services_V1_GetWiFiStatusRequest` messages.
        ///   - deserializer: A deserializer for `Wendy_Agent_Services_V1_GetWiFiStatusResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getWiFiStatus<Result>(
            request: GRPCCore.ClientRequest<Wendy_Agent_Services_V1_GetWiFiStatusRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendy_Agent_Services_V1_GetWiFiStatusRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendy_Agent_Services_V1_GetWiFiStatusResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendy_Agent_Services_V1_GetWiFiStatusResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendy_Agent_Services_V1_WendyAgentService.Method.GetWiFiStatus.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DisconnectWiFi" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Disconnect from the current WiFi network
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendy_Agent_Services_V1_DisconnectWiFiRequest` message.
        ///   - serializer: A serializer for `Wendy_Agent_Services_V1_DisconnectWiFiRequest` messages.
        ///   - deserializer: A deserializer for `Wendy_Agent_Services_V1_DisconnectWiFiResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func disconnectWiFi<Result>(
            request: GRPCCore.ClientRequest<Wendy_Agent_Services_V1_DisconnectWiFiRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendy_Agent_Services_V1_DisconnectWiFiRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendy_Agent_Services_V1_DisconnectWiFiResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendy_Agent_Services_V1_DisconnectWiFiResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendy_Agent_Services_V1_WendyAgentService.Method.DisconnectWiFi.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListHardwareCapabilities" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > List available hardware capabilities on the device
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Wendy_Agent_Services_V1_ListHardwareCapabilitiesRequest` message.
        ///   - serializer: A serializer for `Wendy_Agent_Services_V1_ListHardwareCapabilitiesRequest` messages.
        ///   - deserializer: A deserializer for `Wendy_Agent_Services_V1_ListHardwareCapabilitiesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listHardwareCapabilities<Result>(
            request: GRPCCore.ClientRequest<Wendy_Agent_Services_V1_ListHardwareCapabilitiesRequest>,
            serializer: some GRPCCore.MessageSerializer<Wendy_Agent_Services_V1_ListHardwareCapabilitiesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Wendy_Agent_Services_V1_ListHardwareCapabilitiesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendy_Agent_Services_V1_ListHardwareCapabilitiesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Wendy_Agent_Services_V1_WendyAgentService.Method.ListHardwareCapabilities.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendy_Agent_Services_V1_WendyAgentService.ClientProtocol {
    /// Call the "RunContainer" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Upload a container image to the agent, and run it.
    /// > The first message in the stream MUST be the header.
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Wendy_Agent_Services_V1_RunContainerRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func runContainer<Result>(
        request: GRPCCore.StreamingClientRequest<Wendy_Agent_Services_V1_RunContainerRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Wendy_Agent_Services_V1_RunContainerResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.runContainer(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendy_Agent_Services_V1_RunContainerRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendy_Agent_Services_V1_RunContainerResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateAgent" method.
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Wendy_Agent_Services_V1_UpdateAgentRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateAgent<Result>(
        request: GRPCCore.StreamingClientRequest<Wendy_Agent_Services_V1_UpdateAgentRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Wendy_Agent_Services_V1_UpdateAgentResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.updateAgent(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendy_Agent_Services_V1_UpdateAgentRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendy_Agent_Services_V1_UpdateAgentResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAgentVersion" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendy_Agent_Services_V1_GetAgentVersionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getAgentVersion<Result>(
        request: GRPCCore.ClientRequest<Wendy_Agent_Services_V1_GetAgentVersionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendy_Agent_Services_V1_GetAgentVersionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getAgentVersion(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendy_Agent_Services_V1_GetAgentVersionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendy_Agent_Services_V1_GetAgentVersionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListWiFiNetworks" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > List available WiFi networks
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendy_Agent_Services_V1_ListWiFiNetworksRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listWiFiNetworks<Result>(
        request: GRPCCore.ClientRequest<Wendy_Agent_Services_V1_ListWiFiNetworksRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendy_Agent_Services_V1_ListWiFiNetworksResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listWiFiNetworks(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendy_Agent_Services_V1_ListWiFiNetworksRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendy_Agent_Services_V1_ListWiFiNetworksResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ConnectToWiFi" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Connect to a specific WiFi network
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendy_Agent_Services_V1_ConnectToWiFiRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func connectToWiFi<Result>(
        request: GRPCCore.ClientRequest<Wendy_Agent_Services_V1_ConnectToWiFiRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendy_Agent_Services_V1_ConnectToWiFiResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.connectToWiFi(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendy_Agent_Services_V1_ConnectToWiFiRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendy_Agent_Services_V1_ConnectToWiFiResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetWiFiStatus" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get the current WiFi connection status
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendy_Agent_Services_V1_GetWiFiStatusRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getWiFiStatus<Result>(
        request: GRPCCore.ClientRequest<Wendy_Agent_Services_V1_GetWiFiStatusRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendy_Agent_Services_V1_GetWiFiStatusResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getWiFiStatus(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendy_Agent_Services_V1_GetWiFiStatusRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendy_Agent_Services_V1_GetWiFiStatusResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DisconnectWiFi" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Disconnect from the current WiFi network
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendy_Agent_Services_V1_DisconnectWiFiRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func disconnectWiFi<Result>(
        request: GRPCCore.ClientRequest<Wendy_Agent_Services_V1_DisconnectWiFiRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendy_Agent_Services_V1_DisconnectWiFiResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.disconnectWiFi(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendy_Agent_Services_V1_DisconnectWiFiRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendy_Agent_Services_V1_DisconnectWiFiResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListHardwareCapabilities" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > List available hardware capabilities on the device
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Wendy_Agent_Services_V1_ListHardwareCapabilitiesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listHardwareCapabilities<Result>(
        request: GRPCCore.ClientRequest<Wendy_Agent_Services_V1_ListHardwareCapabilitiesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendy_Agent_Services_V1_ListHardwareCapabilitiesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listHardwareCapabilities(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Wendy_Agent_Services_V1_ListHardwareCapabilitiesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Wendy_Agent_Services_V1_ListHardwareCapabilitiesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Wendy_Agent_Services_V1_WendyAgentService.ClientProtocol {
    /// Call the "RunContainer" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Upload a container image to the agent, and run it.
    /// > The first message in the stream MUST be the header.
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func runContainer<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Wendy_Agent_Services_V1_RunContainerRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Wendy_Agent_Services_V1_RunContainerResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Wendy_Agent_Services_V1_RunContainerRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.runContainer(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateAgent" method.
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateAgent<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Wendy_Agent_Services_V1_UpdateAgentRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Wendy_Agent_Services_V1_UpdateAgentResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Wendy_Agent_Services_V1_UpdateAgentRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.updateAgent(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetAgentVersion" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getAgentVersion<Result>(
        _ message: Wendy_Agent_Services_V1_GetAgentVersionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendy_Agent_Services_V1_GetAgentVersionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendy_Agent_Services_V1_GetAgentVersionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getAgentVersion(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListWiFiNetworks" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > List available WiFi networks
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listWiFiNetworks<Result>(
        _ message: Wendy_Agent_Services_V1_ListWiFiNetworksRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendy_Agent_Services_V1_ListWiFiNetworksResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendy_Agent_Services_V1_ListWiFiNetworksRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listWiFiNetworks(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ConnectToWiFi" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Connect to a specific WiFi network
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func connectToWiFi<Result>(
        _ message: Wendy_Agent_Services_V1_ConnectToWiFiRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendy_Agent_Services_V1_ConnectToWiFiResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendy_Agent_Services_V1_ConnectToWiFiRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.connectToWiFi(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetWiFiStatus" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get the current WiFi connection status
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getWiFiStatus<Result>(
        _ message: Wendy_Agent_Services_V1_GetWiFiStatusRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendy_Agent_Services_V1_GetWiFiStatusResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendy_Agent_Services_V1_GetWiFiStatusRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getWiFiStatus(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DisconnectWiFi" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Disconnect from the current WiFi network
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func disconnectWiFi<Result>(
        _ message: Wendy_Agent_Services_V1_DisconnectWiFiRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendy_Agent_Services_V1_DisconnectWiFiResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendy_Agent_Services_V1_DisconnectWiFiRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.disconnectWiFi(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListHardwareCapabilities" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > List available hardware capabilities on the device
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listHardwareCapabilities<Result>(
        _ message: Wendy_Agent_Services_V1_ListHardwareCapabilitiesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Wendy_Agent_Services_V1_ListHardwareCapabilitiesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Wendy_Agent_Services_V1_ListHardwareCapabilitiesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listHardwareCapabilities(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}