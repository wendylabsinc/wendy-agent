// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: wendy/agent/services/v1/wendy_agent_v1_provisioning_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Wendy_Agent_Services_V1_IsProvisionedRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Wendy_Agent_Services_V1_IsProvisionedResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var response: Wendy_Agent_Services_V1_IsProvisionedResponse.OneOf_Response? = nil

  public var notProvisioned: Wendy_Agent_Services_V1_NotProvisionedResponse {
    get {
      if case .notProvisioned(let v)? = response {return v}
      return Wendy_Agent_Services_V1_NotProvisionedResponse()
    }
    set {response = .notProvisioned(newValue)}
  }

  public var provisioned: Wendy_Agent_Services_V1_ProvisionedResponse {
    get {
      if case .provisioned(let v)? = response {return v}
      return Wendy_Agent_Services_V1_ProvisionedResponse()
    }
    set {response = .provisioned(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Response: Equatable, Sendable {
    case notProvisioned(Wendy_Agent_Services_V1_NotProvisionedResponse)
    case provisioned(Wendy_Agent_Services_V1_ProvisionedResponse)

  }

  public init() {}
}

public struct Wendy_Agent_Services_V1_NotProvisionedResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Wendy_Agent_Services_V1_ProvisionedResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var cloudHost: String = String()

  public var organizationID: Int32 = 0

  public var assetID: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Wendy_Agent_Services_V1_StartProvisioningRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var organizationID: Int32 = 0

  public var enrollmentToken: String = String()

  public var cloudHost: String = String()

  public var assetID: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Wendy_Agent_Services_V1_StartProvisioningResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "wendy.agent.services.v1"

extension Wendy_Agent_Services_V1_IsProvisionedRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IsProvisionedRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Wendy_Agent_Services_V1_IsProvisionedRequest, rhs: Wendy_Agent_Services_V1_IsProvisionedRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Wendy_Agent_Services_V1_IsProvisionedResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IsProvisionedResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}not_provisioned\0\u{1}provisioned\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Wendy_Agent_Services_V1_NotProvisionedResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .notProvisioned(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .notProvisioned(v)
        }
      }()
      case 2: try {
        var v: Wendy_Agent_Services_V1_ProvisionedResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .provisioned(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .provisioned(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.response {
    case .notProvisioned?: try {
      guard case .notProvisioned(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .provisioned?: try {
      guard case .provisioned(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Wendy_Agent_Services_V1_IsProvisionedResponse, rhs: Wendy_Agent_Services_V1_IsProvisionedResponse) -> Bool {
    if lhs.response != rhs.response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Wendy_Agent_Services_V1_NotProvisionedResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NotProvisionedResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Wendy_Agent_Services_V1_NotProvisionedResponse, rhs: Wendy_Agent_Services_V1_NotProvisionedResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Wendy_Agent_Services_V1_ProvisionedResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProvisionedResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}cloud_host\0\u{3}organization_id\0\u{3}asset_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cloudHost) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.organizationID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.assetID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cloudHost.isEmpty {
      try visitor.visitSingularStringField(value: self.cloudHost, fieldNumber: 1)
    }
    if self.organizationID != 0 {
      try visitor.visitSingularInt32Field(value: self.organizationID, fieldNumber: 2)
    }
    if self.assetID != 0 {
      try visitor.visitSingularInt32Field(value: self.assetID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Wendy_Agent_Services_V1_ProvisionedResponse, rhs: Wendy_Agent_Services_V1_ProvisionedResponse) -> Bool {
    if lhs.cloudHost != rhs.cloudHost {return false}
    if lhs.organizationID != rhs.organizationID {return false}
    if lhs.assetID != rhs.assetID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Wendy_Agent_Services_V1_StartProvisioningRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StartProvisioningRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}organization_id\0\u{3}enrollment_token\0\u{3}cloud_host\0\u{3}asset_id\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.organizationID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.enrollmentToken) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.cloudHost) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.assetID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.organizationID != 0 {
      try visitor.visitSingularInt32Field(value: self.organizationID, fieldNumber: 1)
    }
    if !self.enrollmentToken.isEmpty {
      try visitor.visitSingularStringField(value: self.enrollmentToken, fieldNumber: 2)
    }
    if !self.cloudHost.isEmpty {
      try visitor.visitSingularStringField(value: self.cloudHost, fieldNumber: 3)
    }
    if self.assetID != 0 {
      try visitor.visitSingularInt32Field(value: self.assetID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Wendy_Agent_Services_V1_StartProvisioningRequest, rhs: Wendy_Agent_Services_V1_StartProvisioningRequest) -> Bool {
    if lhs.organizationID != rhs.organizationID {return false}
    if lhs.enrollmentToken != rhs.enrollmentToken {return false}
    if lhs.cloudHost != rhs.cloudHost {return false}
    if lhs.assetID != rhs.assetID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Wendy_Agent_Services_V1_StartProvisioningResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StartProvisioningResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Wendy_Agent_Services_V1_StartProvisioningResponse, rhs: Wendy_Agent_Services_V1_StartProvisioningResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
